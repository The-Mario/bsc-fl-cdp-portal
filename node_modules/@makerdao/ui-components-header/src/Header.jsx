import React from "react";
import PropTypes from "prop-types";
import styled from "styled-components";
import { themeGet } from "styled-system";
import Hamburger from "./Hamburger";
import MobileHeaderDropdown from "./MobileHeaderDropdown";
import { withInternalLink } from "./helpers";

import {
  Box,
  Flex,
  Dropdown,
  DefaultDropdown,
} from "@makerdao/ui-components-core";
import Logo from "./Logo";

import { translate } from "@makerdao/i18n-helper";

const Trigger = styled.span`
  font-weight: 500;
  cursor: pointer;
  color: ${props => props.theme.header.linkHeaderColor};
  font-size: 1.6rem;
`;

const MobileMenu = styled(Box)`
  background-color: ${props =>
    props.theme.header.mobileMenuBackground ||
    props.theme.header.backgroundColor};
  overflow-y: scroll;
  transition: all 0.2s ease-in-out;
`;

const HeaderDropdownLink = styled.a`
  color: ${props => props.theme.header.linkColor};
  line-height: 2.4rem;
  transition: color 0.2s ease-in-out;
  text-decoration: none;
  font-size: 1.6rem;
  cursor: pointer;

  &:hover {
    color: black;
  }
`;

const MobileHeaderDropdownLink = styled.a`
  line-height: 3.4rem;
  color: #48495f;
  font-size: 1.6rem;
  &:hover {
    color: black;
  }
`;

/**
 * Global header component.
 */
class Header extends React.Component {
  constructor(props) {
    super(props);

    const desktopLinkComponent = this.props.linkComponent
      ? HeaderDropdownLink.withComponent(this.props.linkComponent)
      : null;

    const mobileLinkComponent = this.props.linkComponent
      ? MobileHeaderDropdownLink.withComponent(this.props.linkComponent)
      : null;

    const DesktopLink = withInternalLink(
      desktopLinkComponent,
      HeaderDropdownLink,
      this.props.host
    );
    const MobileLink = withInternalLink(
      mobileLinkComponent,
      MobileHeaderDropdownLink,
      this.props.host
    );
    this.DesktopLink = DesktopLink;
    this.MobileLink = MobileLink;

    this.state = {
      mobileMenuOpen: false,
    };
  }

  toggleMenu() {
    if (!this.state.mobileMenuOpen) {
      document.body.style.overflow = "hidden";
      document.body.style.height = "100vh";
    } else {
      document.body.style.overflow = "unset";
      document.body.style.height = "unset";
    }

    this.setState({
      mobileMenuOpen: !this.state.mobileMenuOpen,
    });
  }

  render() {
    const DesktopLink = this.DesktopLink;
    const MobileLink = this.MobileLink;

    const t = text => translate(text, this.props.locale);
    const headerMenuItems = [
      {
        title: t("Products"),
        items: [
          { text: t("Dai Stablecoin"), to: "https://makerdao.com/dai" },
          {
            text: t("CDP Portal"),
            to: `https://${t("cdp-portal-subdomain")}.makerdao.com`,
          },
          { text: t("Governance"), to: "https://vote.makerdao.com" },
          { text: t("Platform Data"), to: "https://mkr.tools/" },
        ],
      },
      {
        title: t("Learn"),
        items: [
          { text: t("FAQ"), to: "https://awesome.makerdao.com/#faqs" },
          {
            text: t("Developer"),
            to: "https://makerdao.com/documentation",
            external: true,
          },
          { text: t("White Paper"), to: "https://makerdao.com/whitepaper" },
          { text: t("Roadmap"), to: "https://makerdao.com/roadmap" },
        ],
      },
      {
        title: t("Foundation"),
        items: [
          { text: t("Team"), to: "https://makerdao.com/team" },
          { text: t("Careers"), to: "https://makerdao.com/careers" },
          { text: t("Contact"), to: "https://makerdao.com/contact" },
        ],
      },
      {
        title: t("Community"),
        items: [
          { text: t("Blog"), to: "https://blog.makerdao.com" },
          { text: t("Forum"), to: "https://forum.makerdao.com" },
          { text: t("Chat"), to: "https://chat.makerdao.com" },
          { text: t("Subreddit"), to: "https://www.reddit.com/r/MakerDAO" },
          { text: t("Events"), to: "https://makerdao.com/events" },
        ],
      },
    ];

    const mobileMenuItems = headerMenuItems;

    return (
      <Box
        bg={themeGet("header.backgroundColor")}
        width="100%"
        position="relative"
      >
        <Flex
          p="2rem 2.5rem 1.4rem 2.5rem"
          maxWidth="1140px"
          m="0 auto"
          justifyContent="space-between"
          alignItems="center"
        >
          <div>
            <a href="/">
              <Logo />
            </a>
          </div>
          <Box display={this.state.mobileMenuOpen ? "none" : "flex"}>
            {headerMenuItems.map(item => (
              <Box
                pl="90px"
                key={item.title}
                display={["none", "none", "block"]}
              >
                <Dropdown trigger={<Trigger>{item.title}</Trigger>}>
                  <DefaultDropdown>
                    {item.items.map((subitem, index) => (
                      <div key={index}>
                        <DesktopLink
                          to={subitem.to}
                          external={subitem.external}
                        >
                          {subitem.text}
                        </DesktopLink>
                      </div>
                    ))}
                  </DefaultDropdown>
                </Dropdown>
              </Box>
            ))}
          </Box>
          <Box
            p="25px"
            m="-25px"
            onClick={this.toggleMenu.bind(this)}
            display={[
              "block",
              "block",
              this.state.mobileMenuOpen ? "block" : "none",
            ]}
          >
            <Hamburger active={this.state.mobileMenuOpen} />
          </Box>
        </Flex>
        <MobileMenu
          width="100vw"
          opacity={this.state.mobileMenuOpen ? 1 : 0}
          height={this.state.mobileMenuOpen ? "100%" : "0"}
          position="fixed"
          left="0"
          zIndex="99"
        >
          <Box p="2.3rem 2.5rem 10.3rem 2.5rem" m="0 auto" maxWidth="1140px">
            {mobileMenuItems.map(item => (
              <MobileHeaderDropdown title={item.title} key={item.title}>
                {item.items.map((subitem, index) => (
                  <div key={index} onClick={this.toggleMenu.bind(this)}>
                    <MobileLink to={subitem.to} external={subitem.external}>
                      {subitem.text}
                    </MobileLink>
                  </div>
                ))}
              </MobileHeaderDropdown>
            ))}
          </Box>
        </MobileMenu>
      </Box>
    );
  }
}

Header.propTypes = {
  linkComponent: PropTypes.any,
  host: PropTypes.string,
  locale: PropTypes.string,
};

export default Header;
