import React from "react";
import PropTypes from "prop-types";
import styled from "styled-components";
import { QRCode } from "react-qr-svg";

import { withInternalLink } from "./utils";

import {
  Flex,
  Grid,
  Box,
  Input,
  Modal,
  Button,
  Text,
} from "@makerdao/ui-components-core";

import TwitterIcon from "./assets/twitterIcon.svg";
import RedditIcon from "./assets/redditIcon.svg";
import YoutubeIcon from "./assets/youtubeIcon.svg";
import TelegramIcon from "./assets/telegramIcon.svg";
import RocketChatIcon from "./assets/rocketChatIcon.svg";
import MediumIcon from "./assets/mediumIcon.svg";
import WeChatIcon from "./assets/wechatIcon.svg";
import RightCaret from "./assets/rightCaret.inline.svg";

import { translate } from "@makerdao/i18n-helper";

const FooterContainer = styled.footer`
  font-size: 1.5rem;
  padding: 3.6rem 2.5rem 2.7rem 2.5rem;
  width: 100%;
  background-color: ${props => props.theme.footer.backgroundColor};
`;

const LinkListHeader = styled.div`
  font-weight: 500;
  margin-bottom: 0.7rem;
  color: ${props => props.theme.footer.listHeaderColor};
`;

const LinkList = styled.ul`
  padding-left: 0;
  list-style: none;
  line-height: 3.1rem;

  & a {
    color: ${props => props.theme.footer.linkColor};
    font-weight: 400;
    transition: color 0.2s ease-out;
    text-decoration: none;
  }

  & a:hover {
    color: ${props => props.theme.footer.linkHoverColor};
  }
`;

const SignUpText = styled.div`
  max-width: 32.6rem;
  text-align: justify;
`;

const SubscribeButton = styled.button`
  border: none;
  font-size: 1em;
  background-color: transparent;
  color: #9898a6;
  transition: color 0.125s;
  cursor: pointer;
  display: inline;
  padding-right: 1rem;

  &:hover:after,
  &:focus:after {
    transform: translate(0.3rem);
    background-color: #53546a;
  }

  &:hover,
  &:focus {
    outline: none;
    color: #53546a;
  }

  &:after {
    content: "";
    mask: url(${props => props.rightCaret}) center center no-repeat;
    transition: all 0.125s;
    background-color: #9898a6;
    position: absolute;
    height: 1.8rem;
    width: 1.3rem;
  }

  input:focus + & {
    color: #53546a;

    &:after {
      background-color: #53546a;
    }
  }
`;

const Icons = styled(Grid)`
  & svg {
    width: 20px;
    height: 20px;
    fill: ${props => props.theme.footer.color};
    transition: opacity 0.2s;
    cursor: pointer;
    opacity: 0.8;

    &:hover {
      opacity: 1;
    }
  }
`;

// eslint-disable-next-line
const rfc2822EmailRegex = /[a-z0-9!#$%&'*+\/=?^_{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9][a-z0-9-]*[a-z0-9]/;

/**
 *Global footer component.
 */
class Footer extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      email: "",
      message: "",
      subscribeState: "",
      showWeChatModal: false,
    };

    this.Link = withInternalLink(this.props.linkComponent, this.props.host);

    this.subscribeEmail = this.subscribeEmail.bind(this);
    this.updateEmail = this.updateEmail.bind(this);
    this.toggleWeChatModal = this.toggleWeChatModal.bind(this);
  }

  updateEmail(evt) {
    this.setState({
      email: evt.target.value,
      message: "",
      subscribeState: "",
    });
  }

  subscribeEmail() {
    const httpRequest = new XMLHttpRequest();

    if (!rfc2822EmailRegex.test(this.state.email)) {
      this.setState({
        message: "Please enter a valid email address.",
        subscribeState: "failure",
      });
      return;
    }

    httpRequest.onreadystatechange = () => {
      if (httpRequest.readyState === XMLHttpRequest.DONE) {
        if (httpRequest.status === 200) {
          this.setState({
            email: "",
            message: `Thank you. You'll hear from us soon.`,
            subscribeState: "success",
          });
        } else {
          this.setState({
            message: "An error occurred. Please try again later.",
            subscribeState: "failure",
          });
        }
      }
    };

    httpRequest.onerror = () => {
      this.setState({
        message: "An error occurred. Please try again later.",
        subscribeState: "failure",
      });
    };

    httpRequest.open(
      "POST",
      "https://578v7re7h2.execute-api.us-east-2.amazonaws.com/default/addContactToMailingList",
      true
    );
    httpRequest.setRequestHeader("Content-Type", "application/json");

    httpRequest.send(
      JSON.stringify({
        email: this.state.email,
      })
    );
  }

  toggleWeChatModal() {
    this.setState({
      showWeChatModal: !this.state.showWeChatModal,
    });
  }

  render() {
    const Link = this.Link;
    const t = text => translate(text, this.props.locale);

    return (
      <FooterContainer>
        <Grid
          maxWidth="1140px"
          m="0 auto"
          gridTemplateColumns={[
            "1fr",
            "1fr 1fr",
            "1fr 1fr",
            "repeat(4, 1fr) auto",
          ]}
          gridRowGap="2rem"
        >
          <div>
            <LinkListHeader>{t("Learn")}</LinkListHeader>
            <LinkList>
              <li>
                <Link to="https://makerdao.com/whitepaper">
                  {t("White Paper")}
                </Link>
              </li>
              <li>
                <Link to="https://makerdao.com/privacy">
                  {t("Privacy Policy")}
                </Link>
              </li>
              <li>
                <Link to="https://makerdao.com/roadmap">{t("Roadmap")}</Link>
              </li>
            </LinkList>
          </div>
          <div>
            <LinkListHeader>{t("Products")}</LinkListHeader>
            <LinkList>
              <li>
                <Link to="https://makerdao.com/dai">{t("Dai Stablecoin")}</Link>
              </li>
              <li>
                <Link to={`https://${t("cdp-portal-subdomain")}.makerdao.com`}>
                  {t("CDP Portal")}
                </Link>
              </li>
              <li>
                <Link to="https://vote.makerdao.com">{t("Governance")}</Link>
              </li>
              <li>
                <Link to="https://mkr.tools">{t("Platform Data")}</Link>
              </li>
            </LinkList>
          </div>
          <div>
            <LinkListHeader>{t("Developer")}</LinkListHeader>
            <LinkList>
              <li>
                <Link to="https://docs.makerdao.com/" external>
                  {t("Documentation")}
                </Link>
              </li>
              <li>
                <Link to="https://github.com/makerdao/dai.js">Dai.js</Link>
              </li>
              <li>
                <Link to="https://developer.makerdao.com/dai/1/graphql/">
                  GraphQL API
                </Link>
              </li>
            </LinkList>
          </div>
          <div>
            <LinkListHeader>{t("Foundation")}</LinkListHeader>
            <LinkList>
              <li>
                <Link to="https://makerdao.com/team">{t("Team")}</Link>
              </li>
              <li>
                <Link to="https://makerdao.com/careers">{t("Careers")}</Link>
              </li>
              <li>
                <Link to="https://makerdao.com/contact">{t("Contact")}</Link>
              </li>
            </LinkList>
          </div>
          <Box gridColumn={["1 / 3", "1 / 3", "unset"]}>
            <Text color="slate.600">
              <SignUpText>{t("sign-up-text")}</SignUpText>
            </Text>
            <Box mt="1.2rem" className={this.state.subscribeState}>
              <Input
                maxWidth="320px"
                py="xs"
                placeholder="Email address"
                name="email"
                type="email"
                value={this.state.email}
                onChange={evt => this.updateEmail(evt)}
                errorMessage={
                  (this.state.subscribeState === "failure" || undefined) &&
                  this.state.message
                }
                successMessage={
                  (this.state.subscribeState === "success" || undefined) &&
                  this.state.message
                }
                after={
                  <SubscribeButton
                    type="submit"
                    rightCaret={RightCaret}
                    onClick={this.subscribeEmail}
                  >
                    Subscribe
                  </SubscribeButton>
                }
              />
            </Box>
            <Icons
              gridColumnGap="20px"
              mt="1.8rem"
              gridTemplateColumns="repeat(7, 20px)"
            >
              <Link to="https://twitter.com/MakerDAO">
                <TwitterIcon />
              </Link>
              <Link to="https://www.reddit.com/r/MakerDAO/">
                <RedditIcon />
              </Link>
              <Link to="https://t.me/makerdaoOfficial">
                <TelegramIcon />
              </Link>
              <Link to="https://chat.makerdao.com/">
                <RocketChatIcon />
              </Link>
              <Link to="https://blog.makerdao.com">
                <MediumIcon />
              </Link>
              <WeChatIcon
                style={{ cursor: "pointer" }}
                onClick={this.toggleWeChatModal}
              />
              <Link to="https://www.youtube.com/MakerDAO">
                <YoutubeIcon />
              </Link>
            </Icons>
            <Box mt="1.8rem" maxWidth="180px">
              {this.props.langDropdown}
            </Box>
          </Box>
        </Grid>
        <Modal
          show={this.state.showWeChatModal}
          onClose={this.toggleWeChatModal}
          width="380px"
        >
          <Flex flexDirection="column" alignItems="center">
            <QRCode
              bgColor="#FFFFFF"
              fgColor="#000000"
              level="Q"
              style={{ width: "245px", height: "245px" }}
              value="http://weixin.qq.com/r/tjh0bADEN11IrUQP922k"
            />
            <Box fontSize="1.8rem">{t("wechat-scan-text")}</Box>
            <Button mt="m" onClick={this.toggleWeChatModal}>
              Close
            </Button>
          </Flex>
        </Modal>
      </FooterContainer>
    );
  }
}

Footer.propTypes = {
  linkComponent: PropTypes.any,
  host: PropTypes.string,
  locale: PropTypes.string,
  langDropdown: PropTypes.element,
};

export default Footer;
