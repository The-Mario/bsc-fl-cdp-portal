{"ast":null,"code":"import _defineProperty from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport assert from 'assert';\nimport mapValues from 'lodash/mapValues';\nimport reduce from 'lodash/reduce';\nimport uniqBy from 'lodash/uniqBy';\nimport { createCurrency, createCurrencyRatio } from '@makerdao/currency';\nimport testnetAddresses from '../contracts/addresses/testnet.json';\nimport kovanAddresses from '../contracts/addresses/kovan.json';\nimport mainnetAddresses from '../contracts/addresses/mainnet.json';\nimport abiMap from '../contracts/abiMap';\nimport CdpManager from './CdpManager';\nimport SavingsService from './SavingsService';\nimport CdpTypeService from './CdpTypeService';\nimport AuctionService from './AuctionService';\nimport RewardService from './RewardService';\nimport SystemDataService from './SystemDataService';\nimport { ServiceRoles as ServiceRoles_ } from './constants';\nimport BigNumber from 'bignumber.js';\nimport wethAbi from '../contracts/abis/WETH9.json';\nexport var ServiceRoles = ServiceRoles_;\nvar CDP_MANAGER = ServiceRoles.CDP_MANAGER,\n    CDP_TYPE = ServiceRoles.CDP_TYPE,\n    SYSTEM_DATA = ServiceRoles.SYSTEM_DATA,\n    AUCTION = ServiceRoles.AUCTION,\n    SAVINGS = ServiceRoles.SAVINGS,\n    REWARDS = ServiceRoles.REWARDS; // look up contract ABIs using abiMap.\n// if an exact match is not found, prefix-match against keys ending in *, e.g.\n// MCD_JOIN_ETH_B matches MCD_JOIN_*\n// this implementation assumes that all contracts in kovan.json are also in testnet.json\n\nvar addContracts = reduce(testnetAddresses, function (result, testnetAddress, name) {\n  var abi = abiMap[name];\n\n  if (!abi) {\n    var prefix = Object.keys(abiMap).find(function (k) {\n      return k.substring(k.length - 1) == '*' && k.substring(0, k.length - 1) == name.substring(0, k.length - 1);\n    });\n    if (prefix) abi = abiMap[prefix];\n  }\n\n  if (abi) {\n    result[name] = {\n      abi: abi,\n      address: {\n        testnet: testnetAddress,\n        kovan: kovanAddresses[name],\n        mainnet: mainnetAddresses[name]\n      }\n    };\n  }\n\n  return result;\n}, {});\nexport var ETH = createCurrency('ETH');\nexport var USD = createCurrency('USD');\nexport var USD_ETH = createCurrencyRatio(USD, ETH);\nexport var WETH = createCurrency('WETH'); // Casting for savings dai\n\nexport var DSR_USDFL = createCurrency('DSR-USDFL');\nexport var USDT = createCurrency('USDT');\nexport var USDTUSDC = createCurrency('USDTUSDC');\nexport var USDTDAI = createCurrency('USDTDAI');\nexport var USDCDAI = createCurrency('USDCDAI');\nexport var USDTUSDN = createCurrency('USDTUSDN');\nexport var USDNDAI = createCurrency('USDNDAI');\nexport var USDCUSDN = createCurrency('USDCUSDN');\nexport var REP = createCurrency('REP');\nexport var ZRX = createCurrency('ZRX');\nexport var KNC = createCurrency('KNC');\nexport var OMG = createCurrency('OMG');\nexport var BAT = createCurrency('BAT');\nexport var DGD = createCurrency('DGD');\nexport var GNT = createCurrency('GNT');\nexport var USDC = createCurrency('USDC');\nexport var WBTC = createCurrency('WBTC');\nexport var TUSD = createCurrency('TUSD');\nexport var MANA = createCurrency('MANA');\nexport var FL = createCurrency('FL');\nexport var USDFL = createCurrency('USDFL');\nexport var defaultCdpTypes = [{\n  currency: USDTUSDC,\n  ilk: 'USDTUSDC-A'\n}, {\n  currency: USDTDAI,\n  ilk: 'USDTDAI-A'\n}, {\n  currency: USDCDAI,\n  ilk: 'USDCDAI-A'\n}, {\n  currency: USDNDAI,\n  ilk: 'USDNDAI-A'\n}, {\n  currency: USDTUSDN,\n  ilk: 'USDTUSDN-A'\n}, {\n  currency: USDCUSDN,\n  ilk: 'USDCUSDN-A'\n}];\nexport var SAI = createCurrency('SAI');\nexport var ALLOWANCE_AMOUNT = BigNumber('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nexport var defaultTokens = _toConsumableArray(new Set([].concat(_toConsumableArray(defaultCdpTypes.map(function (type) {\n  return type.currency;\n})), [USDFL, FL, WETH, SAI, DSR_USDFL])));\nexport var McdPlugin = {\n  addConfig: function addConfig(_) {\n    var _ref3;\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$cdpTypes = _ref.cdpTypes,\n        cdpTypes = _ref$cdpTypes === void 0 ? defaultCdpTypes : _ref$cdpTypes,\n        addressOverrides = _ref.addressOverrides,\n        _ref$prefetch = _ref.prefetch,\n        prefetch = _ref$prefetch === void 0 ? true : _ref$prefetch;\n\n    if (addressOverrides) {\n      addContracts = mapValues(addContracts, function (contractDetails, name) {\n        return _objectSpread({}, contractDetails, {\n          address: addressOverrides[name] || contractDetails.address\n        });\n      });\n    }\n\n    var tokens = uniqBy(cdpTypes, 'currency').map(function (_ref2) {\n      var currency = _ref2.currency,\n          address = _ref2.address,\n          abi = _ref2.abi,\n          decimals = _ref2.decimals;\n      var data = address && abi ? {\n        address: address,\n        abi: abi\n      } : addContracts[currency.symbol];\n      assert(data, \"No address and ABI found for \\\"\".concat(currency.symbol, \"\\\"\"));\n      return {\n        currency: currency,\n        abi: data.abi,\n        address: data.address,\n        decimals: data.decimals || decimals\n      };\n    }); // Set global BigNumber precision to enable exponential operations\n\n    BigNumber.config({\n      POW_PRECISION: 100\n    });\n    return _ref3 = {\n      smartContract: {\n        addContracts: addContracts\n      },\n      token: {\n        erc20: [{\n          currency: USDFL,\n          address: addContracts.MCD_DAI.address\n        }].concat(_toConsumableArray(tokens))\n      },\n      additionalServices: [CDP_MANAGER, CDP_TYPE, AUCTION, SYSTEM_DATA, SAVINGS, REWARDS]\n    }, _defineProperty(_ref3, CDP_TYPE, [CdpTypeService, {\n      cdpTypes: cdpTypes,\n      prefetch: prefetch\n    }]), _defineProperty(_ref3, CDP_MANAGER, CdpManager), _defineProperty(_ref3, SAVINGS, SavingsService), _defineProperty(_ref3, AUCTION, AuctionService), _defineProperty(_ref3, REWARDS, RewardService), _defineProperty(_ref3, SYSTEM_DATA, SystemDataService), _ref3;\n  }\n};\nvar _default = McdPlugin;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(ServiceRoles, \"ServiceRoles\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(CDP_MANAGER, \"CDP_MANAGER\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(CDP_TYPE, \"CDP_TYPE\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(SYSTEM_DATA, \"SYSTEM_DATA\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(AUCTION, \"AUCTION\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(SAVINGS, \"SAVINGS\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(REWARDS, \"REWARDS\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(addContracts, \"addContracts\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(ETH, \"ETH\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(USD, \"USD\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(USD_ETH, \"USD_ETH\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(WETH, \"WETH\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(DSR_USDFL, \"DSR_USDFL\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(USDT, \"USDT\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(USDTUSDC, \"USDTUSDC\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(USDTDAI, \"USDTDAI\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(USDCDAI, \"USDCDAI\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(USDTUSDN, \"USDTUSDN\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(USDNDAI, \"USDNDAI\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(USDCUSDN, \"USDCUSDN\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(REP, \"REP\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(ZRX, \"ZRX\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(KNC, \"KNC\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(OMG, \"OMG\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(BAT, \"BAT\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(DGD, \"DGD\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(GNT, \"GNT\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(USDC, \"USDC\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(WBTC, \"WBTC\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(TUSD, \"TUSD\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(MANA, \"MANA\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(FL, \"FL\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(USDFL, \"USDFL\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(defaultCdpTypes, \"defaultCdpTypes\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(SAI, \"SAI\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(ALLOWANCE_AMOUNT, \"ALLOWANCE_AMOUNT\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(defaultTokens, \"defaultTokens\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(McdPlugin, \"McdPlugin\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/index.js"],"names":["assert","mapValues","reduce","uniqBy","createCurrency","createCurrencyRatio","testnetAddresses","kovanAddresses","mainnetAddresses","abiMap","CdpManager","SavingsService","CdpTypeService","AuctionService","RewardService","SystemDataService","ServiceRoles","ServiceRoles_","BigNumber","wethAbi","CDP_MANAGER","CDP_TYPE","SYSTEM_DATA","AUCTION","SAVINGS","REWARDS","addContracts","result","testnetAddress","name","abi","prefix","Object","keys","find","k","substring","length","address","testnet","kovan","mainnet","ETH","USD","USD_ETH","WETH","DSR_USDFL","USDT","USDTUSDC","USDTDAI","USDCDAI","USDTUSDN","USDNDAI","USDCUSDN","REP","ZRX","KNC","OMG","BAT","DGD","GNT","USDC","WBTC","TUSD","MANA","FL","USDFL","defaultCdpTypes","currency","ilk","SAI","ALLOWANCE_AMOUNT","defaultTokens","Set","map","type","McdPlugin","addConfig","_","cdpTypes","addressOverrides","prefetch","contractDetails","tokens","decimals","data","symbol","config","POW_PRECISION","smartContract","token","erc20","MCD_DAI","additionalServices"],"mappings":"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","sourcesContent":["import assert from 'assert';\nimport mapValues from 'lodash/mapValues';\nimport reduce from 'lodash/reduce';\nimport uniqBy from 'lodash/uniqBy';\nimport { createCurrency, createCurrencyRatio } from '@makerdao/currency';\nimport testnetAddresses from '../contracts/addresses/testnet.json';\nimport kovanAddresses from '../contracts/addresses/kovan.json';\nimport mainnetAddresses from '../contracts/addresses/mainnet.json';\nimport abiMap from '../contracts/abiMap';\nimport CdpManager from './CdpManager';\nimport SavingsService from './SavingsService';\nimport CdpTypeService from './CdpTypeService';\nimport AuctionService from './AuctionService';\nimport RewardService from './RewardService';\nimport SystemDataService from './SystemDataService';\nimport { ServiceRoles as ServiceRoles_ } from './constants';\nimport BigNumber from 'bignumber.js';\nimport wethAbi from '../contracts/abis/WETH9.json';\n\nexport const ServiceRoles = ServiceRoles_;\nconst {\n  CDP_MANAGER,\n  CDP_TYPE,\n  SYSTEM_DATA,\n  AUCTION,\n  SAVINGS,\n  REWARDS\n} = ServiceRoles;\n\n// look up contract ABIs using abiMap.\n// if an exact match is not found, prefix-match against keys ending in *, e.g.\n// MCD_JOIN_ETH_B matches MCD_JOIN_*\n// this implementation assumes that all contracts in kovan.json are also in testnet.json\nlet addContracts = reduce(\n  testnetAddresses,\n  (result, testnetAddress, name) => {\n    let abi = abiMap[name];\n    if (!abi) {\n      const prefix = Object.keys(abiMap).find(\n        k =>\n          k.substring(k.length - 1) == '*' &&\n          k.substring(0, k.length - 1) == name.substring(0, k.length - 1)\n      );\n      if (prefix) abi = abiMap[prefix];\n    }\n    if (abi) {\n      result[name] = {\n        abi,\n        address: {\n          testnet: testnetAddress,\n          kovan: kovanAddresses[name],\n          mainnet: mainnetAddresses[name]\n        }\n      };\n    }\n    return result;\n  },\n  {}\n);\n\nexport const ETH = createCurrency('ETH');\nexport const USD = createCurrency('USD');\nexport const USD_ETH = createCurrencyRatio(USD, ETH);\n\nexport const WETH = createCurrency('WETH');\n\n// Casting for savings dai\nexport const DSR_USDFL = createCurrency('DSR-USDFL');\n\nexport const USDT = createCurrency('USDT');\n\nexport const USDTUSDC = createCurrency('USDTUSDC');\nexport const USDTDAI = createCurrency('USDTDAI');\nexport const USDCDAI = createCurrency('USDCDAI');\nexport const USDTUSDN = createCurrency('USDTUSDN');\nexport const USDNDAI = createCurrency('USDNDAI');\nexport const USDCUSDN = createCurrency('USDCUSDN');\n\nexport const REP = createCurrency('REP');\nexport const ZRX = createCurrency('ZRX');\nexport const KNC = createCurrency('KNC');\nexport const OMG = createCurrency('OMG');\nexport const BAT = createCurrency('BAT');\nexport const DGD = createCurrency('DGD');\nexport const GNT = createCurrency('GNT');\nexport const USDC = createCurrency('USDC');\nexport const WBTC = createCurrency('WBTC');\nexport const TUSD = createCurrency('TUSD');\nexport const MANA = createCurrency('MANA');\nexport const FL = createCurrency('FL');\nexport const USDFL = createCurrency('USDFL');\n\nexport const defaultCdpTypes = [\n  { currency: USDTUSDC, ilk: 'USDTUSDC-A' },\n  { currency: USDTDAI, ilk: 'USDTDAI-A' },\n  { currency: USDCDAI, ilk: 'USDCDAI-A' },\n  { currency: USDNDAI, ilk: 'USDNDAI-A' },\n  { currency: USDTUSDN, ilk: 'USDTUSDN-A' },\n  { currency: USDCUSDN, ilk: 'USDCUSDN-A' }\n];\n\nexport const SAI = createCurrency('SAI');\n\nexport const ALLOWANCE_AMOUNT = BigNumber(\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n);\n\nexport const defaultTokens = [\n  ...new Set([\n    ...defaultCdpTypes.map(type => type.currency),\n    USDFL,\n    FL,\n    WETH,\n    SAI,\n    DSR_USDFL\n  ])\n];\n\nexport const McdPlugin = {\n  addConfig: (\n    _,\n    { cdpTypes = defaultCdpTypes, addressOverrides, prefetch = true } = {}\n  ) => {\n    if (addressOverrides) {\n      addContracts = mapValues(addContracts, (contractDetails, name) => ({\n        ...contractDetails,\n        address: addressOverrides[name] || contractDetails.address\n      }));\n    }\n    const tokens = uniqBy(cdpTypes, 'currency').map(\n      ({ currency, address, abi, decimals }) => {\n        const data =\n          address && abi ? { address, abi } : addContracts[currency.symbol];\n        assert(data, `No address and ABI found for \"${currency.symbol}\"`);\n        return {\n          currency,\n          abi: data.abi,\n          address: data.address,\n          decimals: data.decimals || decimals\n        };\n      }\n    );\n\n    // Set global BigNumber precision to enable exponential operations\n    BigNumber.config({ POW_PRECISION: 100 });\n\n    return {\n      smartContract: { addContracts },\n      token: {\n        erc20: [\n          { currency: USDFL, address: addContracts.MCD_DAI.address },\n          // { currency: WETH, address: addContracts.ETH.address, abi: wethAbi },\n          ...tokens\n        ]\n      },\n      additionalServices: [\n        CDP_MANAGER,\n        CDP_TYPE,\n        AUCTION,\n        SYSTEM_DATA,\n        SAVINGS,\n        REWARDS\n      ],\n      [CDP_TYPE]: [CdpTypeService, { cdpTypes, prefetch }],\n      [CDP_MANAGER]: CdpManager,\n      [SAVINGS]: SavingsService,\n      [AUCTION]: AuctionService,\n      [REWARDS]: RewardService,\n      [SYSTEM_DATA]: SystemDataService\n    };\n  }\n};\n\nexport default McdPlugin;\n"]},"metadata":{},"sourceType":"module"}