{"ast":null,"code":"import _regeneratorRuntime from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { PublicService } from '@makerdao/services-core';\nimport { promisify } from '../utils';\n\nvar NonceService = /*#__PURE__*/function (_PublicService) {\n  _inherits(NonceService, _PublicService);\n\n  var _super = _createSuper(NonceService);\n\n  function NonceService() {\n    var _this;\n\n    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'nonce';\n\n    _classCallCheck(this, NonceService);\n\n    _this = _super.call(this, name, ['web3', 'accounts']);\n    _this._counts = {};\n    return _this;\n  }\n\n  _createClass(NonceService, [{\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this._accountsService = this.get('accounts');\n                this._web3Service = this.get('web3');\n                _context.next = 4;\n                return this.setCounts();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function connect() {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: \"_getTxCount\",\n    value: function () {\n      var _getTxCount2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", promisify(this._web3Service._web3.eth.getTransactionCount)(address, 'pending'));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _getTxCount(_x) {\n        return _getTxCount2.apply(this, arguments);\n      }\n\n      return _getTxCount;\n    }()\n  }, {\n    key: \"_compareNonceCounts\",\n    value: function _compareNonceCounts(txCount, address) {\n      if (txCount > this._counts[address]) {\n        return txCount;\n      } else {\n        return this._counts[address];\n      }\n    }\n  }, {\n    key: \"_removeDuplicateAddresses\",\n    value: function _removeDuplicateAddresses(accounts) {\n      var uniqueAddresses = [];\n      accounts.map(function (account) {\n        if (!uniqueAddresses.includes(account.address)) uniqueAddresses.push(account.address);\n      });\n      return uniqueAddresses;\n    }\n  }, {\n    key: \"setCounts\",\n    value: function () {\n      var _setCounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this2 = this;\n\n        var accountsList, uniqueAddresses;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this._accountsService.listAccounts();\n\n              case 2:\n                accountsList = _context4.sent;\n\n                if (!(accountsList.length === 0)) {\n                  _context4.next = 5;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 5:\n                uniqueAddresses = this._removeDuplicateAddresses(accountsList);\n                return _context4.abrupt(\"return\", new Promise(function (resolve) {\n                  accountsList.map( /*#__PURE__*/function () {\n                    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(account) {\n                      var txCount;\n                      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              _context3.next = 2;\n                              return _this2._getTxCount(account.address);\n\n                            case 2:\n                              txCount = _context3.sent;\n                              _this2._counts[account.address] = txCount;\n\n                              if (Object.keys(_this2._counts).length === uniqueAddresses.length) {\n                                resolve();\n                              }\n\n                            case 5:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, _callee3);\n                    }));\n\n                    return function (_x2) {\n                      return _ref.apply(this, arguments);\n                    };\n                  }());\n                }));\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function setCounts() {\n        return _setCounts.apply(this, arguments);\n      }\n\n      return setCounts;\n    }()\n  }, {\n    key: \"getNonce\",\n    value: function () {\n      var _getNonce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var address, txCount, nonce;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                address = this._web3Service.currentAddress();\n                _context5.next = 3;\n                return this._getTxCount(address);\n\n              case 3:\n                txCount = _context5.sent;\n\n                if (this._counts[address]) {\n                  nonce = this._compareNonceCounts(txCount, address);\n                  this._counts[address] += 1;\n                } else {\n                  this._counts[address] = txCount;\n                  nonce = txCount;\n                  this._counts[address] += 1;\n                }\n\n                return _context5.abrupt(\"return\", nonce);\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getNonce() {\n        return _getNonce.apply(this, arguments);\n      }\n\n      return getNonce;\n    }()\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return NonceService;\n}(PublicService);\n\nexport { NonceService as default };\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(NonceService, \"NonceService\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/eth/NonceService.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/eth/NonceService.js"],"names":["PublicService","promisify","NonceService","name","_counts","_accountsService","get","_web3Service","setCounts","address","_web3","eth","getTransactionCount","txCount","accounts","uniqueAddresses","map","account","includes","push","listAccounts","accountsList","length","_removeDuplicateAddresses","Promise","resolve","_getTxCount","Object","keys","currentAddress","nonce","_compareNonceCounts"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,aAAT,QAA8B,yBAA9B;AACA,SAASC,SAAT,QAA0B,UAA1B;;IAEqBC,Y;;;;;AACnB,0BAA4B;AAAA;;AAAA,QAAhBC,IAAgB,uEAAT,OAAS;;AAAA;;AAC1B,8BAAMA,IAAN,EAAY,CAAC,MAAD,EAAS,UAAT,CAAZ;AACA,UAAKC,OAAL,GAAe,EAAf;AAF0B;AAG3B;;;;;;;;;;AAGC,qBAAKC,gBAAL,GAAwB,KAAKC,GAAL,CAAS,UAAT,CAAxB;AACA,qBAAKC,YAAL,GAAoB,KAAKD,GAAL,CAAS,MAAT,CAApB;;uBACM,KAAKE,SAAL,E;;;;;;;;;;;;;;;;;;;oGAGUC,O;;;;;kDACTR,SAAS,CAAC,KAAKM,YAAL,CAAkBG,KAAlB,CAAwBC,GAAxB,CAA4BC,mBAA7B,CAAT,CACLH,OADK,EAEL,SAFK,C;;;;;;;;;;;;;;;;;;wCAMWI,O,EAASJ,O,EAAS;AACpC,UAAII,OAAO,GAAG,KAAKT,OAAL,CAAaK,OAAb,CAAd,EAAqC;AACnC,eAAOI,OAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAKT,OAAL,CAAaK,OAAb,CAAP;AACD;AACF;;;8CAEyBK,Q,EAAU;AAClC,UAAMC,eAAe,GAAG,EAAxB;AACAD,MAAAA,QAAQ,CAACE,GAAT,CAAa,UAAAC,OAAO,EAAI;AACtB,YAAI,CAACF,eAAe,CAACG,QAAhB,CAAyBD,OAAO,CAACR,OAAjC,CAAL,EACEM,eAAe,CAACI,IAAhB,CAAqBF,OAAO,CAACR,OAA7B;AACH,OAHD;AAIA,aAAOM,eAAP;AACD;;;;;;;;;;;;;uBAG4B,KAAKV,gBAAL,CAAsBe,YAAtB,E;;;AAArBC,gBAAAA,Y;;sBACFA,YAAY,CAACC,MAAb,KAAwB,C;;;;;;;;AACtBP,gBAAAA,e,GAAkB,KAAKQ,yBAAL,CAA+BF,YAA/B,C;kDAEjB,IAAIG,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5BJ,kBAAAA,YAAY,CAACL,GAAb;AAAA,wFAAiB,kBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCACO,MAAI,CAACS,WAAL,CAAiBT,OAAO,CAACR,OAAzB,CADP;;AAAA;AACTI,8BAAAA,OADS;AAEf,8BAAA,MAAI,CAACT,OAAL,CAAaa,OAAO,CAACR,OAArB,IAAgCI,OAAhC;;AAEA,kCAAIc,MAAM,CAACC,IAAP,CAAY,MAAI,CAACxB,OAAjB,EAA0BkB,MAA1B,KAAqCP,eAAe,CAACO,MAAzD,EAAiE;AAC/DG,gCAAAA,OAAO;AACR;;AANc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAjB;;AAAA;AAAA;AAAA;AAAA;AAQD,iBATM,C;;;;;;;;;;;;;;;;;;;;;;;;;AAaDhB,gBAAAA,O,GAAU,KAAKF,YAAL,CAAkBsB,cAAlB,E;;uBACM,KAAKH,WAAL,CAAiBjB,OAAjB,C;;;AAAhBI,gBAAAA,O;;AAGN,oBAAI,KAAKT,OAAL,CAAaK,OAAb,CAAJ,EAA2B;AACzBqB,kBAAAA,KAAK,GAAG,KAAKC,mBAAL,CAAyBlB,OAAzB,EAAkCJ,OAAlC,CAAR;AACA,uBAAKL,OAAL,CAAaK,OAAb,KAAyB,CAAzB;AACD,iBAHD,MAGO;AACL,uBAAKL,OAAL,CAAaK,OAAb,IAAwBI,OAAxB;AACAiB,kBAAAA,KAAK,GAAGjB,OAAR;AACA,uBAAKT,OAAL,CAAaK,OAAb,KAAyB,CAAzB;AACD;;kDAEMqB,K;;;;;;;;;;;;;;;;;;;;;;;;;;EAnE+B9B,a;;SAArBE,Y;;;;;;;;;;0BAAAA,Y","sourcesContent":["import { PublicService } from '@makerdao/services-core';\nimport { promisify } from '../utils';\n\nexport default class NonceService extends PublicService {\n  constructor(name = 'nonce') {\n    super(name, ['web3', 'accounts']);\n    this._counts = {};\n  }\n\n  async connect() {\n    this._accountsService = this.get('accounts');\n    this._web3Service = this.get('web3');\n    await this.setCounts();\n  }\n\n  async _getTxCount(address) {\n    return promisify(this._web3Service._web3.eth.getTransactionCount)(\n      address,\n      'pending'\n    );\n  }\n\n  _compareNonceCounts(txCount, address) {\n    if (txCount > this._counts[address]) {\n      return txCount;\n    } else {\n      return this._counts[address];\n    }\n  }\n\n  _removeDuplicateAddresses(accounts) {\n    const uniqueAddresses = [];\n    accounts.map(account => {\n      if (!uniqueAddresses.includes(account.address))\n        uniqueAddresses.push(account.address);\n    });\n    return uniqueAddresses;\n  }\n\n  async setCounts() {\n    const accountsList = await this._accountsService.listAccounts();\n    if (accountsList.length === 0) return;\n    const uniqueAddresses = this._removeDuplicateAddresses(accountsList);\n\n    return new Promise(resolve => {\n      accountsList.map(async account => {\n        const txCount = await this._getTxCount(account.address);\n        this._counts[account.address] = txCount;\n\n        if (Object.keys(this._counts).length === uniqueAddresses.length) {\n          resolve();\n        }\n      });\n    });\n  }\n\n  async getNonce() {\n    const address = this._web3Service.currentAddress();\n    const txCount = await this._getTxCount(address);\n    let nonce;\n\n    if (this._counts[address]) {\n      nonce = this._compareNonceCounts(txCount, address);\n      this._counts[address] += 1;\n    } else {\n      this._counts[address] = txCount;\n      nonce = txCount;\n      this._counts[address] += 1;\n    }\n\n    return nonce;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}