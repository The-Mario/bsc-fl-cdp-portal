{"ast":null,"code":"import _toConsumableArray from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { useContext } from 'react';\nimport { watch } from 'hooks/useObservable';\nimport ilks from 'references/ilkList';\nimport { MakerObjectContext } from '../providers/MakerProvider';\nexport default function useCdpTypes() {\n  var _useContext = useContext(MakerObjectContext),\n      network = _useContext.network;\n\n  var types = ilks.filter(function (ilk) {\n    return ilk.networks.includes(network);\n  });\n  var ceilings = watch.collateralDebtCeilings(types.map(function (type) {\n    return type.symbol;\n  }));\n\n  if (!ceilings) {\n    return {\n      cdpTypes: [],\n      cdpTypesList: [],\n      gemTypeList: []\n    };\n  }\n\n  var cdpTypesWithNonZeroDebtCeilings = Object.entries(ceilings).reduce(function (acc, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        type = _ref2[0],\n        ceiling = _ref2[1];\n\n    if (ceiling.gt(0)) return [].concat(_toConsumableArray(acc), [type]);\n    return acc;\n  }, []);\n  var cdpTypes = types.reduce(function (acc, type) {\n    if (cdpTypesWithNonZeroDebtCeilings.some(function (t) {\n      return type.symbol === t;\n    })) return [].concat(_toConsumableArray(acc), [type]);\n    return acc;\n  }, []);\n  var cdpTypesList = cdpTypes.reduce(function (acc, type) {\n    if (!acc.includes(type.key)) acc.push(type.key);\n    return acc;\n  }, []);\n  var gemTypeList = cdpTypes.reduce(function (acc, type) {\n    if (!acc.includes(type.gem)) acc.push(type.gem);\n    return acc;\n  }, []);\n  return {\n    cdpTypes: cdpTypes,\n    cdpTypesList: cdpTypesList,\n    gemTypeList: gemTypeList\n  };\n}\n\n__signature__(useCdpTypes, \"useContext{{ network }}\");\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(useCdpTypes, \"useCdpTypes\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useCdpTypes.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useCdpTypes.js"],"names":["useContext","watch","ilks","MakerObjectContext","useCdpTypes","network","types","filter","ilk","networks","includes","ceilings","collateralDebtCeilings","map","type","symbol","cdpTypes","cdpTypesList","gemTypeList","cdpTypesWithNonZeroDebtCeilings","Object","entries","reduce","acc","ceiling","gt","some","t","key","push","gem"],"mappings":";;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,kBAAT,QAAmC,4BAAnC;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA,oBAChBJ,UAAU,CAACG,kBAAD,CADM;AAAA,MAC5BE,OAD4B,eAC5BA,OAD4B;;AAGpC,MAAMC,KAAK,GAAGJ,IAAI,CAACK,MAAL,CAAY,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,QAAJ,CAAaC,QAAb,CAAsBL,OAAtB,CAAJ;AAAA,GAAf,CAAd;AACA,MAAMM,QAAQ,GAAGV,KAAK,CAACW,sBAAN,CAA6BN,KAAK,CAACO,GAAN,CAAU,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,MAAT;AAAA,GAAd,CAA7B,CAAjB;;AAEA,MAAI,CAACJ,QAAL,EAAe;AACb,WAAO;AAAEK,MAAAA,QAAQ,EAAE,EAAZ;AAAgBC,MAAAA,YAAY,EAAE,EAA9B;AAAkCC,MAAAA,WAAW,EAAE;AAA/C,KAAP;AACD;;AAED,MAAMC,+BAA+B,GAAGC,MAAM,CAACC,OAAP,CAAeV,QAAf,EAAyBW,MAAzB,CACtC,UAACC,GAAD,QAA0B;AAAA;AAAA,QAAnBT,IAAmB;AAAA,QAAbU,OAAa;;AACxB,QAAIA,OAAO,CAACC,EAAR,CAAW,CAAX,CAAJ,EACA,oCAAWF,GAAX,IAAgBT,IAAhB;AACF,WAAOS,GAAP;AACC,GALqC,EAMtC,EANsC,CAAxC;AASA,MAAMP,QAAQ,GAAGV,KAAK,CAACgB,MAAN,CAAa,UAACC,GAAD,EAAMT,IAAN,EAAe;AAC3C,QAAIK,+BAA+B,CAACO,IAAhC,CAAqC,UAAAC,CAAC;AAAA,aAAIb,IAAI,CAACC,MAAL,KAAgBY,CAApB;AAAA,KAAtC,CAAJ,EACE,oCAAWJ,GAAX,IAAgBT,IAAhB;AACF,WAAOS,GAAP;AACD,GAJgB,EAId,EAJc,CAAjB;AAOA,MAAMN,YAAY,GAAGD,QAAQ,CAACM,MAAT,CAAgB,UAACC,GAAD,EAAMT,IAAN,EAAe;AAClD,QAAI,CAACS,GAAG,CAACb,QAAJ,CAAaI,IAAI,CAACc,GAAlB,CAAL,EAA6BL,GAAG,CAACM,IAAJ,CAASf,IAAI,CAACc,GAAd;AAC7B,WAAOL,GAAP;AACD,GAHoB,EAGlB,EAHkB,CAArB;AAKA,MAAML,WAAW,GAAGF,QAAQ,CAACM,MAAT,CAAgB,UAACC,GAAD,EAAMT,IAAN,EAAe;AACjD,QAAI,CAACS,GAAG,CAACb,QAAJ,CAAaI,IAAI,CAACgB,GAAlB,CAAL,EAA6BP,GAAG,CAACM,IAAJ,CAASf,IAAI,CAACgB,GAAd;AAC7B,WAAOP,GAAP;AACD,GAHmB,EAGjB,EAHiB,CAApB;AAKA,SAAO;AAAEP,IAAAA,QAAQ,EAARA,QAAF;AAAYC,IAAAA,YAAY,EAAZA,YAAZ;AAA0BC,IAAAA,WAAW,EAAXA;AAA1B,GAAP;AACD;;cArCuBd,W;;;;;;;;;;;0BAAAA,W","sourcesContent":["import { useContext } from 'react';\nimport { watch } from 'hooks/useObservable';\nimport ilks from 'references/ilkList';\nimport { MakerObjectContext } from '../providers/MakerProvider';\n\nexport default function useCdpTypes() {\n  const { network } = useContext(MakerObjectContext);\n\n  const types = ilks.filter(ilk => ilk.networks.includes(network));\n  const ceilings = watch.collateralDebtCeilings(types.map(type => type.symbol));\n\n  if (!ceilings) {\n    return { cdpTypes: [], cdpTypesList: [], gemTypeList: [] };\n  }\n\n  const cdpTypesWithNonZeroDebtCeilings = Object.entries(ceilings).reduce(\n    (acc, [type, ceiling]) => {\n      if (ceiling.gt(0))\n      return [...acc, type];\n    return acc;\n    },\n    []\n  );\n\n  const cdpTypes = types.reduce((acc, type) => {\n    if (cdpTypesWithNonZeroDebtCeilings.some(t => type.symbol === t))\n      return [...acc, type];\n    return acc;\n  }, []);\n\n\n  const cdpTypesList = cdpTypes.reduce((acc, type) => {\n    if (!acc.includes(type.key)) acc.push(type.key);\n    return acc;\n  }, []);\n\n  const gemTypeList = cdpTypes.reduce((acc, type) => {\n    if (!acc.includes(type.gem)) acc.push(type.gem);\n    return acc;\n  }, []);\n\n  return { cdpTypes, cdpTypesList, gemTypeList };\n}\n"]},"metadata":{},"sourceType":"module"}