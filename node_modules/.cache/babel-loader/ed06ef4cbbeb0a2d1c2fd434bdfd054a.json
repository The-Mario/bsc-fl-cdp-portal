{"ast":null,"code":"import _toConsumableArray from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { useState, useCallback, useMemo } from 'react';\nimport useLanguage from 'hooks/useLanguage';\nimport { prettifyFloat } from 'utils/ui';\n/**\n * Example schema:\n *  { minFloat: 0, maxFloat: 10, isFloat: true, custom: { isEven: (value) => parseFloat(value) % 2 === 0 } }\n * Custom messages should match any custom or built in validator by key.\n * The validate function should return TRUE when the value is invalid\n */\n\nexport default function useValidatedInput() {\n  var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var validationSchema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var customMessages = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var _useLanguage = useLanguage(),\n      lang = _useLanguage.lang;\n\n  var _useState = useState(initialValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errors = _useState4[0],\n      setErrors = _useState4[1];\n\n  var defaultValidators = {\n    isFloat: {\n      validate: function validate(value) {\n        return isNaN(parseFloat(value));\n      },\n      message: function message() {\n        return lang.input_validations.is_float;\n      }\n    },\n    maxFloat: {\n      validate: function validate(value, schemaValue) {\n        return parseFloat(value) > schemaValue;\n      },\n      message: function message(value, schemaValue) {\n        return lang.formatString(lang.input_validations.max_float, prettifyFloat(schemaValue, 5));\n      }\n    },\n    minFloat: {\n      validate: function validate(value, schemaValue) {\n        return parseFloat(value) <= schemaValue;\n      },\n      message: function message(value, schemaValue) {\n        return lang.formatString(lang.input_validations.min_float, prettifyFloat(schemaValue, 5));\n      }\n    }\n  };\n  var validators = useMemo(function () {\n    var defaultErrorMessage = function defaultErrorMessage() {\n      return lang.input_validations.default;\n    };\n\n    var custom = validationSchema.custom || {};\n    delete validationSchema.custom;\n    var fromDefault = Object.keys(validationSchema).map(function (key) {\n      var defaultValidator = defaultValidators[key];\n      if (!defaultValidator) throw new Error(\"Unexpected validation \".concat(key, \" in validation schema. Valid values are \").concat(Object.keys(defaultValidators)));\n      return {\n        key: key,\n        validate: defaultValidator.validate,\n        message: customMessages[key] || defaultValidator.message\n      };\n    }, {});\n    var fromCustom = Object.entries(custom).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          validate = _ref2[1];\n\n      return {\n        key: key,\n        validate: validate,\n        message: customMessages[key] || defaultErrorMessage\n      };\n    });\n    return [].concat(_toConsumableArray(fromDefault), _toConsumableArray(fromCustom));\n  }, [validationSchema, lang.input_validations.default, defaultValidators, customMessages]);\n  var validate = useCallback(function (value) {\n    var errors = validators.reduce(function (errors, validator) {\n      var schemaValue = validationSchema[validator.key];\n      var isInvalid = validator.validate(value, schemaValue) && value !== '';\n      if (isInvalid) errors.push(validator.message(value, schemaValue));\n      return errors;\n    }, []);\n    return errors.join(', ');\n  }, [validators, validationSchema]);\n  var onChange = useCallback(function (event) {\n    var value = event.target.value;\n    setErrors(validate(value));\n    setValue(value);\n  }, [setValue, setErrors, validate]);\n  var setValueAndValidate = useCallback(function (newValue) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      validate: true\n    };\n    if (options.validate) setErrors(validate(newValue));\n    setValue(newValue);\n  }, [setValue, setErrors, validate]);\n  return [value, setValueAndValidate, onChange, errors];\n}\n\n__signature__(useValidatedInput, \"useLanguage{{ lang }}\\nuseState{[value, setValue](initialValue)}\\nuseState{[errors, setErrors]('')}\\nuseMemo{validators}\\nuseCallback{validate}\\nuseCallback{onChange}\\nuseCallback{setValueAndValidate}\", function () {\n  return [useLanguage];\n});\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(useValidatedInput, \"useValidatedInput\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useValidatedInput.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useValidatedInput.js"],"names":["useState","useCallback","useMemo","useLanguage","prettifyFloat","useValidatedInput","initialValue","validationSchema","customMessages","lang","value","setValue","errors","setErrors","defaultValidators","isFloat","validate","isNaN","parseFloat","message","input_validations","is_float","maxFloat","schemaValue","formatString","max_float","minFloat","min_float","validators","defaultErrorMessage","default","custom","fromDefault","Object","keys","map","key","defaultValidator","Error","fromCustom","entries","reduce","validator","isInvalid","push","join","onChange","event","target","setValueAndValidate","newValue","options"],"mappings":"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","sourcesContent":["import { useState, useCallback, useMemo } from 'react';\n\nimport useLanguage from 'hooks/useLanguage';\nimport { prettifyFloat } from 'utils/ui';\n\n/**\n * Example schema:\n *  { minFloat: 0, maxFloat: 10, isFloat: true, custom: { isEven: (value) => parseFloat(value) % 2 === 0 } }\n * Custom messages should match any custom or built in validator by key.\n * The validate function should return TRUE when the value is invalid\n */\n\nexport default function useValidatedInput(\n  initialValue = '',\n  validationSchema = {},\n  customMessages = {}\n) {\n  const { lang } = useLanguage();\n  const [value, setValue] = useState(initialValue);\n  const [errors, setErrors] = useState('');\n\n  const defaultValidators = {\n    isFloat: {\n      validate: value => isNaN(parseFloat(value)),\n      message: () => lang.input_validations.is_float\n    },\n    maxFloat: {\n      validate: (value, schemaValue) => parseFloat(value) > schemaValue,\n      message: (value, schemaValue) =>\n        lang.formatString(\n          lang.input_validations.max_float,\n          prettifyFloat(schemaValue, 5)\n        )\n    },\n    minFloat: {\n      validate: (value, schemaValue) => parseFloat(value) <= schemaValue,\n      message: (value, schemaValue) =>\n        lang.formatString(\n          lang.input_validations.min_float,\n          prettifyFloat(schemaValue, 5)\n        )\n    }\n  };\n\n  const validators = useMemo(() => {\n    const defaultErrorMessage = () => lang.input_validations.default;\n    const custom = validationSchema.custom || {};\n    delete validationSchema.custom;\n\n    const fromDefault = Object.keys(validationSchema).map(key => {\n      const defaultValidator = defaultValidators[key];\n      if (!defaultValidator)\n        throw new Error(\n          `Unexpected validation ${key} in validation schema. Valid values are ${Object.keys(\n            defaultValidators\n          )}`\n        );\n\n      return {\n        key,\n        validate: defaultValidator.validate,\n        message: customMessages[key] || defaultValidator.message\n      };\n    }, {});\n\n    const fromCustom = Object.entries(custom).map(([key, validate]) => {\n      return {\n        key,\n        validate,\n        message: customMessages[key] || defaultErrorMessage\n      };\n    });\n\n    return [...fromDefault, ...fromCustom];\n  }, [\n    validationSchema,\n    lang.input_validations.default,\n    defaultValidators,\n    customMessages\n  ]);\n\n  const validate = useCallback(\n    value => {\n      const errors = validators.reduce((errors, validator) => {\n        const schemaValue = validationSchema[validator.key];\n        const isInvalid =\n          validator.validate(value, schemaValue) && value !== '';\n\n        if (isInvalid) errors.push(validator.message(value, schemaValue));\n\n        return errors;\n      }, []);\n\n      return errors.join(', ');\n    },\n    [validators, validationSchema]\n  );\n\n  const onChange = useCallback(\n    event => {\n      const value = event.target.value;\n      setErrors(validate(value));\n      setValue(value);\n    },\n    [setValue, setErrors, validate]\n  );\n\n  const setValueAndValidate = useCallback(\n    (newValue, options = { validate: true }) => {\n      if (options.validate) setErrors(validate(newValue));\n      setValue(newValue);\n    },\n    [setValue, setErrors, validate]\n  );\n\n  return [value, setValueAndValidate, onChange, errors];\n}\n"]},"metadata":{},"sourceType":"module"}