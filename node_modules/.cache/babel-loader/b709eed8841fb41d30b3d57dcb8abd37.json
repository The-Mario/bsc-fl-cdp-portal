{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\n//      Copyright (c) 2012 Mathieu Turcotte\n//      Licensed under the MIT license.\nvar events = require('events');\n\nvar precond = require('precond');\n\nvar util = require('util'); // A class to hold the state of a backoff operation. Accepts a backoff strategy\n// to generate the backoff delays.\n\n\nfunction Backoff(backoffStrategy) {\n  events.EventEmitter.call(this);\n  this.backoffStrategy_ = backoffStrategy;\n  this.maxNumberOfRetry_ = -1;\n  this.backoffNumber_ = 0;\n  this.backoffDelay_ = 0;\n  this.timeoutID_ = -1;\n  this.handlers = {\n    backoff: this.onBackoff_.bind(this)\n  };\n}\n\nutil.inherits(Backoff, events.EventEmitter); // Sets a limit, greater than 0, on the maximum number of backoffs. A 'fail'\n// event will be emitted when the limit is reached.\n\nBackoff.prototype.failAfter = function (maxNumberOfRetry) {\n  precond.checkArgument(maxNumberOfRetry > 0, 'Expected a maximum number of retry greater than 0 but got %s.', maxNumberOfRetry);\n  this.maxNumberOfRetry_ = maxNumberOfRetry;\n}; // Starts a backoff operation. Accepts an optional parameter to let the\n// listeners know why the backoff operation was started.\n\n\nBackoff.prototype.backoff = function (err) {\n  precond.checkState(this.timeoutID_ === -1, 'Backoff in progress.');\n\n  if (this.backoffNumber_ === this.maxNumberOfRetry_) {\n    this.emit('fail', err);\n    this.reset();\n  } else {\n    this.backoffDelay_ = this.backoffStrategy_.next();\n    this.timeoutID_ = setTimeout(this.handlers.backoff, this.backoffDelay_);\n    this.emit('backoff', this.backoffNumber_, this.backoffDelay_, err);\n  }\n}; // Handles the backoff timeout completion.\n\n\nBackoff.prototype.onBackoff_ = function () {\n  this.timeoutID_ = -1;\n  this.emit('ready', this.backoffNumber_, this.backoffDelay_);\n  this.backoffNumber_++;\n}; // Stops any backoff operation and resets the backoff delay to its inital value.\n\n\nBackoff.prototype.reset = function () {\n  this.backoffNumber_ = 0;\n  this.backoffStrategy_.reset();\n  clearTimeout(this.timeoutID_);\n  this.timeoutID_ = -1;\n};\n\nmodule.exports = Backoff;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(Backoff, \"Backoff\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/backoff/lib/backoff.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"script"}