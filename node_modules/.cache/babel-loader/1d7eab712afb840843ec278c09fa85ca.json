{"ast":null,"code":"import _regeneratorRuntime from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport ProviderType from '../web3/ProviderType';\nimport Web3ProviderEngine from 'web3-provider-engine/dist/es5';\nimport WebsocketSubprovider from 'web3-provider-engine/dist/es5/subproviders/websocket';\nimport RpcSource from 'web3-provider-engine/dist/es5/subproviders/rpc';\nimport SubscriptionSubprovider from 'web3-provider-engine/dist/es5/subproviders/subscriptions';\nimport ProviderSubprovider from 'web3-provider-engine/dist/es5/subproviders/provider';\nvar DEFAULT_POLLING_INTERVAL = 4000;\nexport function setupEngine(_x) {\n  return _setupEngine.apply(this, arguments);\n}\n\nfunction _setupEngine() {\n  _setupEngine = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(settings) {\n    var _settings$web, providerSettings, pollingInterval, engine, result, getHttpProvider, getWebsocketProvider, getInjectedProvider;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _settings$web = settings.web3, providerSettings = _settings$web.provider, pollingInterval = _settings$web.pollingInterval;\n            engine = new Web3ProviderEngine({\n              pollingInterval: pollingInterval || DEFAULT_POLLING_INTERVAL\n            });\n            result = {\n              engine: engine\n            };\n\n            getHttpProvider = function getHttpProvider() {\n              var rpcUrl = getRpcUrl(providerSettings);\n              var subscriptionProvider = new SubscriptionSubprovider();\n              subscriptionProvider.on('data', function (err, data) {\n                return engine.emit('data', err, data);\n              });\n              engine.addProvider(subscriptionProvider);\n              return new RpcSource({\n                rpcUrl: rpcUrl\n              });\n            };\n\n            getWebsocketProvider = function getWebsocketProvider() {\n              var rpcUrl = getRpcUrl(providerSettings);\n              var subscriptionProvider = new SubscriptionSubprovider();\n              subscriptionProvider.on('data', function (err, data) {\n                return engine.emit('data', err, data);\n              });\n              engine.addProvider(subscriptionProvider);\n              return new WebsocketSubprovider({\n                rpcUrl: rpcUrl\n              });\n            };\n\n            getInjectedProvider = function getInjectedProvider() {\n              if (!providerSettings.inject) {\n                throw new Error(\"'inject' must be supplied with ProviderType.INJECT\");\n              }\n\n              return new ProviderSubprovider(providerSettings.inject);\n            };\n\n            _context.t0 = providerSettings.type;\n            _context.next = _context.t0 === ProviderType.BROWSER ? 9 : _context.t0 === ProviderType.WEBSOCKET ? 13 : _context.t0 === ProviderType.HTTP ? 15 : _context.t0 === ProviderType.INFURA ? 17 : _context.t0 === ProviderType.INJECT ? 19 : 21;\n            break;\n\n          case 9:\n            _context.next = 11;\n            return getBrowserProvider();\n\n          case 11:\n            result.provider = _context.sent;\n            return _context.abrupt(\"break\", 22);\n\n          case 13:\n            result.provider = getWebsocketProvider();\n            return _context.abrupt(\"break\", 22);\n\n          case 15:\n            result.provider = getHttpProvider();\n            return _context.abrupt(\"break\", 22);\n\n          case 17:\n            result.provider = providerSettings.protocol === 'wss' ? getWebsocketProvider() : getHttpProvider();\n            return _context.abrupt(\"break\", 22);\n\n          case 19:\n            result.provider = getInjectedProvider();\n            return _context.abrupt(\"break\", 22);\n\n          case 21:\n            throw new Error('provider type must be defined');\n\n          case 22:\n            engine.addProvider(result.provider);\n            return _context.abrupt(\"return\", result);\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _setupEngine.apply(this, arguments);\n}\n\nexport function getBrowserProvider() {\n  return _getBrowserProvider.apply(this, arguments);\n}\n\nfunction _getBrowserProvider() {\n  _getBrowserProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var wrap;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(typeof window === 'undefined')) {\n              _context2.next = 2;\n              break;\n            }\n\n            throw new Error('Cannot use ProviderType.BROWSER because window is undefined');\n\n          case 2:\n            wrap = function wrap(provider) {\n              var subprovider = new ProviderSubprovider(provider);\n              subprovider.isWindowProvider = true;\n              return subprovider;\n            };\n\n            if (!window.ethereum) {\n              _context2.next = 9;\n              break;\n            }\n\n            _context2.next = 6;\n            return window.ethereum.enable();\n\n          case 6:\n            return _context2.abrupt(\"return\", wrap(window.ethereum));\n\n          case 9:\n            if (!window.web3) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", wrap(window.web3.currentProvider));\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getBrowserProvider.apply(this, arguments);\n}\n\nfunction getInfuraUrl() {\n  var protocol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'https';\n  var network = arguments.length > 1 ? arguments[1] : undefined;\n  var infuraProjectId = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (!infuraProjectId) {\n    throw new Error('Cannot use infura without a project ID');\n  }\n\n  var url = \"\".concat(protocol, \"://\").concat(network, \".infura.io\");\n  url += protocol === 'wss' ? '/ws' : '';\n  url += \"/v3/\".concat(infuraProjectId);\n  return url;\n}\n\nfunction getRpcUrl(providerSettings) {\n  var network = providerSettings.network,\n      protocol = providerSettings.protocol,\n      infuraProjectId = providerSettings.infuraProjectId,\n      type = providerSettings.type,\n      url = providerSettings.url;\n\n  switch (type) {\n    case ProviderType.HTTP:\n      return url;\n\n    case ProviderType.WEBSOCKET:\n      return url;\n\n    case ProviderType.INFURA:\n      return getInfuraUrl(protocol, network, infuraProjectId);\n\n    default:\n      throw new Error('Invalid web3 provider type: ' + type);\n  }\n}\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(DEFAULT_POLLING_INTERVAL, \"DEFAULT_POLLING_INTERVAL\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/eth/accounts/setup.js\");\n  reactHotLoader.register(setupEngine, \"setupEngine\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/eth/accounts/setup.js\");\n  reactHotLoader.register(getBrowserProvider, \"getBrowserProvider\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/eth/accounts/setup.js\");\n  reactHotLoader.register(getInfuraUrl, \"getInfuraUrl\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/eth/accounts/setup.js\");\n  reactHotLoader.register(getRpcUrl, \"getRpcUrl\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/eth/accounts/setup.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/eth/accounts/setup.js"],"names":["ProviderType","Web3ProviderEngine","WebsocketSubprovider","RpcSource","SubscriptionSubprovider","ProviderSubprovider","DEFAULT_POLLING_INTERVAL","setupEngine","settings","web3","providerSettings","provider","pollingInterval","engine","result","getHttpProvider","rpcUrl","getRpcUrl","subscriptionProvider","on","err","data","emit","addProvider","getWebsocketProvider","getInjectedProvider","inject","Error","type","BROWSER","WEBSOCKET","HTTP","INFURA","INJECT","getBrowserProvider","protocol","window","wrap","subprovider","isWindowProvider","ethereum","enable","currentProvider","getInfuraUrl","network","infuraProjectId","url"],"mappings":"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","sourcesContent":["import ProviderType from '../web3/ProviderType';\nimport Web3ProviderEngine from 'web3-provider-engine/dist/es5';\nimport WebsocketSubprovider from 'web3-provider-engine/dist/es5/subproviders/websocket';\nimport RpcSource from 'web3-provider-engine/dist/es5/subproviders/rpc';\nimport SubscriptionSubprovider from 'web3-provider-engine/dist/es5/subproviders/subscriptions';\nimport ProviderSubprovider from 'web3-provider-engine/dist/es5/subproviders/provider';\n\nconst DEFAULT_POLLING_INTERVAL = 4000;\n\nexport async function setupEngine(settings) {\n  const { provider: providerSettings, pollingInterval } = settings.web3;\n\n  const engine = new Web3ProviderEngine({\n    pollingInterval: pollingInterval || DEFAULT_POLLING_INTERVAL\n  });\n  const result = { engine };\n\n  const getHttpProvider = () => {\n    const rpcUrl = getRpcUrl(providerSettings);\n    const subscriptionProvider = new SubscriptionSubprovider();\n    subscriptionProvider.on('data', (err, data) =>\n      engine.emit('data', err, data)\n    );\n    engine.addProvider(subscriptionProvider);\n    return new RpcSource({ rpcUrl });\n  };\n\n  const getWebsocketProvider = () => {\n    const rpcUrl = getRpcUrl(providerSettings);\n    const subscriptionProvider = new SubscriptionSubprovider();\n    subscriptionProvider.on('data', (err, data) =>\n      engine.emit('data', err, data)\n    );\n    engine.addProvider(subscriptionProvider);\n    return new WebsocketSubprovider({ rpcUrl });\n  };\n\n  const getInjectedProvider = () => {\n    if (!providerSettings.inject) {\n      throw new Error(\"'inject' must be supplied with ProviderType.INJECT\");\n    }\n    return new ProviderSubprovider(providerSettings.inject);\n  };\n\n  switch (providerSettings.type) {\n    case ProviderType.BROWSER:\n      result.provider = await getBrowserProvider();\n      break;\n    case ProviderType.WEBSOCKET:\n      result.provider = getWebsocketProvider();\n      break;\n    case ProviderType.HTTP:\n      result.provider = getHttpProvider();\n      break;\n    case ProviderType.INFURA:\n      result.provider =\n        providerSettings.protocol === 'wss'\n          ? getWebsocketProvider()\n          : getHttpProvider();\n      break;\n    case ProviderType.INJECT:\n      result.provider = getInjectedProvider();\n      break;\n    default:\n      throw new Error('provider type must be defined');\n  }\n  engine.addProvider(result.provider);\n  return result;\n}\n\nexport async function getBrowserProvider() {\n  if (typeof window === 'undefined') {\n    throw new Error(\n      'Cannot use ProviderType.BROWSER because window is undefined'\n    );\n  }\n\n  const wrap = provider => {\n    const subprovider = new ProviderSubprovider(provider);\n    subprovider.isWindowProvider = true;\n    return subprovider;\n  };\n\n  if (window.ethereum) {\n    await window.ethereum.enable();\n    return wrap(window.ethereum);\n  } else if (window.web3) {\n    return wrap(window.web3.currentProvider);\n  }\n}\n\nfunction getInfuraUrl(protocol = 'https', network, infuraProjectId) {\n  if (!infuraProjectId) {\n    throw new Error('Cannot use infura without a project ID');\n  }\n  let url = `${protocol}://${network}.infura.io`;\n  url += protocol === 'wss' ? '/ws' : '';\n  url += `/v3/${infuraProjectId}`;\n  return url;\n}\n\nfunction getRpcUrl(providerSettings) {\n  const { network, protocol, infuraProjectId, type, url } = providerSettings;\n  switch (type) {\n    case ProviderType.HTTP:\n      return url;\n    case ProviderType.WEBSOCKET:\n      return url;\n    case ProviderType.INFURA:\n      return getInfuraUrl(protocol, network, infuraProjectId);\n    default:\n      throw new Error('Invalid web3 provider type: ' + type);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}