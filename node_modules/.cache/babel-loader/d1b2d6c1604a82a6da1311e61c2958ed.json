{"ast":null,"code":"import _classCallCheck from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { PrivateService } from '@makerdao/services-core';\nimport { slug } from '../index';\nimport EventEmitter from './EventEmitter';\nimport debug from 'debug';\nvar log = debug('dai:EventService');\n\nvar EventService = /*#__PURE__*/function (_PrivateService) {\n  _inherits(EventService, _PrivateService);\n\n  var _super = _createSuper(EventService);\n\n  /**\n   * @param {string} name\n   */\n  function EventService() {\n    var _this;\n\n    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'event';\n\n    _classCallCheck(this, EventService);\n\n    _this = _super.call(this, name, []);\n    _this._block = null; // all of our emitters â€“ we can have many of these\n    // e.g. one for our maker object, a couple for some cdp objects, a few more on transaction objects, etc\n\n    _this.emitters = {}; // this is our default emitter, it will likely be the maker object's personal emitter\n\n    _this.buildEmitter({\n      defaultEmitter: true\n    });\n\n    _this.ping = _this.ping.bind(_assertThisInitialized(_this));\n    return _this;\n  } // check all of our active polls for new state\n  // this is currently called on every new block from Web3Service\n\n\n  _createClass(EventService, [{\n    key: \"ping\",\n    value: function ping(block) {\n      Object.values(this.emitters).forEach(function (emitter) {\n        return emitter.ping(block);\n      });\n    } // add a event listener to an emitter\n\n  }, {\n    key: \"on\",\n    value: function on(event, listener) {\n      var emitter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._defaultEmitter();\n      emitter.on(event, listener);\n    } // push an event through an emitter\n\n  }, {\n    key: \"emit\",\n    value: function emit(event, payload, block) {\n      var emitter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this._defaultEmitter();\n      emitter.emit(event, payload, block);\n    } // remove a listener from an emitter\n\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(event, listener) {\n      var emitter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._defaultEmitter();\n      emitter.removeListener(event, listener);\n    }\n  }, {\n    key: \"registerPollEvents\",\n    value: function registerPollEvents(eventPayloadMap) {\n      var emitter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._defaultEmitter();\n      return emitter.registerPollEvents(eventPayloadMap);\n    }\n  }, {\n    key: \"buildEmitter\",\n    value: function buildEmitter() {\n      var _this2 = this;\n\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$defaultEmitter = _ref.defaultEmitter,\n          defaultEmitter = _ref$defaultEmitter === void 0 ? false : _ref$defaultEmitter;\n\n      var id = defaultEmitter ? 'default' : slug();\n\n      var disposeEmitter = this._disposeEmitter.bind(this, id);\n\n      var newEmitter = new EventEmitter(disposeEmitter);\n      newEmitter.on('error', function (eventObj) {\n        return _this2._logError(id, eventObj.payload);\n      });\n      this.emitters[id] = newEmitter;\n      return newEmitter;\n    }\n  }, {\n    key: \"_disposeEmitter\",\n    value: function _disposeEmitter(id) {\n      if (id === 'default') {\n        this._logError(id, 'cannot dispose default emitter');\n      } else delete this.emitters[id];\n    }\n  }, {\n    key: \"_defaultEmitter\",\n    value: function _defaultEmitter() {\n      return this.emitters.default;\n    }\n  }, {\n    key: \"_logError\",\n    value: function _logError(name, msg) {\n      log(\"Problem encountered in emitter \".concat(name, \" -> \").concat(msg));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return EventService;\n}(PrivateService);\n\nexport { EventService as default };\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(log, \"log\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/utils/events/EventService.js\");\n  reactHotLoader.register(EventService, \"EventService\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/utils/events/EventService.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/utils/events/EventService.js"],"names":["PrivateService","slug","EventEmitter","debug","log","EventService","name","_block","emitters","buildEmitter","defaultEmitter","ping","bind","block","Object","values","forEach","emitter","event","listener","_defaultEmitter","on","payload","emit","removeListener","eventPayloadMap","registerPollEvents","id","disposeEmitter","_disposeEmitter","newEmitter","eventObj","_logError","default","msg"],"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,cAAT,QAA+B,yBAA/B;AACA,SAASC,IAAT,QAAqB,UAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,IAAMC,GAAG,GAAGD,KAAK,CAAC,kBAAD,CAAjB;;IAEqBE,Y;;;;;AACnB;;;AAGA,0BAA4B;AAAA;;AAAA,QAAhBC,IAAgB,uEAAT,OAAS;;AAAA;;AAC1B,8BAAMA,IAAN,EAAY,EAAZ;AAEA,UAAKC,MAAL,GAAc,IAAd,CAH0B,CAI1B;AACA;;AACA,UAAKC,QAAL,GAAgB,EAAhB,CAN0B,CAQ1B;;AACA,UAAKC,YAAL,CAAkB;AAAEC,MAAAA,cAAc,EAAE;AAAlB,KAAlB;;AAEA,UAAKC,IAAL,GAAY,MAAKA,IAAL,CAAUC,IAAV,+BAAZ;AAX0B;AAY3B,G,CAED;AACA;;;;;yBACKC,K,EAAO;AACVC,MAAAA,MAAM,CAACC,MAAP,CAAc,KAAKP,QAAnB,EAA6BQ,OAA7B,CAAqC,UAAAC,OAAO;AAAA,eAAIA,OAAO,CAACN,IAAR,CAAaE,KAAb,CAAJ;AAAA,OAA5C;AACD,K,CAED;;;;uBACGK,K,EAAOC,Q,EAA4C;AAAA,UAAlCF,OAAkC,uEAAxB,KAAKG,eAAL,EAAwB;AACpDH,MAAAA,OAAO,CAACI,EAAR,CAAWH,KAAX,EAAkBC,QAAlB;AACD,K,CAED;;;;yBACKD,K,EAAOI,O,EAAST,K,EAAyC;AAAA,UAAlCI,OAAkC,uEAAxB,KAAKG,eAAL,EAAwB;AAC5DH,MAAAA,OAAO,CAACM,IAAR,CAAaL,KAAb,EAAoBI,OAApB,EAA6BT,KAA7B;AACD,K,CAED;;;;mCACeK,K,EAAOC,Q,EAA4C;AAAA,UAAlCF,OAAkC,uEAAxB,KAAKG,eAAL,EAAwB;AAChEH,MAAAA,OAAO,CAACO,cAAR,CAAuBN,KAAvB,EAA8BC,QAA9B;AACD;;;uCAEkBM,e,EAAmD;AAAA,UAAlCR,OAAkC,uEAAxB,KAAKG,eAAL,EAAwB;AACpE,aAAOH,OAAO,CAACS,kBAAR,CAA2BD,eAA3B,CAAP;AACD;;;mCAE6C;AAAA;;AAAA,qFAAJ,EAAI;AAAA,qCAA/Bf,cAA+B;AAAA,UAA/BA,cAA+B,oCAAd,KAAc;;AAC5C,UAAMiB,EAAE,GAAGjB,cAAc,GAAG,SAAH,GAAeT,IAAI,EAA5C;;AACA,UAAM2B,cAAc,GAAG,KAAKC,eAAL,CAAqBjB,IAArB,CAA0B,IAA1B,EAAgCe,EAAhC,CAAvB;;AACA,UAAMG,UAAU,GAAG,IAAI5B,YAAJ,CAAiB0B,cAAjB,CAAnB;AACAE,MAAAA,UAAU,CAACT,EAAX,CAAc,OAAd,EAAuB,UAAAU,QAAQ;AAAA,eAAI,MAAI,CAACC,SAAL,CAAeL,EAAf,EAAmBI,QAAQ,CAACT,OAA5B,CAAJ;AAAA,OAA/B;AACA,WAAKd,QAAL,CAAcmB,EAAd,IAAoBG,UAApB;AACA,aAAOA,UAAP;AACD;;;oCAEeH,E,EAAI;AAClB,UAAIA,EAAE,KAAK,SAAX,EAAsB;AACpB,aAAKK,SAAL,CAAeL,EAAf,EAAmB,gCAAnB;AACD,OAFD,MAEO,OAAO,KAAKnB,QAAL,CAAcmB,EAAd,CAAP;AACR;;;sCAEiB;AAChB,aAAO,KAAKnB,QAAL,CAAcyB,OAArB;AACD;;;8BAES3B,I,EAAM4B,G,EAAK;AACnB9B,MAAAA,GAAG,0CAAmCE,IAAnC,iBAA8C4B,GAA9C,EAAH;AACD;;;;;;;;;;;EAhEuClC,c;;SAArBK,Y;;;;;;;;;;0BAFfD,G;0BAEeC,Y","sourcesContent":["import { PrivateService } from '@makerdao/services-core';\nimport { slug } from '../index';\nimport EventEmitter from './EventEmitter';\nimport debug from 'debug';\nconst log = debug('dai:EventService');\n\nexport default class EventService extends PrivateService {\n  /**\n   * @param {string} name\n   */\n  constructor(name = 'event') {\n    super(name, []);\n\n    this._block = null;\n    // all of our emitters â€“ we can have many of these\n    // e.g. one for our maker object, a couple for some cdp objects, a few more on transaction objects, etc\n    this.emitters = {};\n\n    // this is our default emitter, it will likely be the maker object's personal emitter\n    this.buildEmitter({ defaultEmitter: true });\n\n    this.ping = this.ping.bind(this);\n  }\n\n  // check all of our active polls for new state\n  // this is currently called on every new block from Web3Service\n  ping(block) {\n    Object.values(this.emitters).forEach(emitter => emitter.ping(block));\n  }\n\n  // add a event listener to an emitter\n  on(event, listener, emitter = this._defaultEmitter()) {\n    emitter.on(event, listener);\n  }\n\n  // push an event through an emitter\n  emit(event, payload, block, emitter = this._defaultEmitter()) {\n    emitter.emit(event, payload, block);\n  }\n\n  // remove a listener from an emitter\n  removeListener(event, listener, emitter = this._defaultEmitter()) {\n    emitter.removeListener(event, listener);\n  }\n\n  registerPollEvents(eventPayloadMap, emitter = this._defaultEmitter()) {\n    return emitter.registerPollEvents(eventPayloadMap);\n  }\n\n  buildEmitter({ defaultEmitter = false } = {}) {\n    const id = defaultEmitter ? 'default' : slug();\n    const disposeEmitter = this._disposeEmitter.bind(this, id);\n    const newEmitter = new EventEmitter(disposeEmitter);\n    newEmitter.on('error', eventObj => this._logError(id, eventObj.payload));\n    this.emitters[id] = newEmitter;\n    return newEmitter;\n  }\n\n  _disposeEmitter(id) {\n    if (id === 'default') {\n      this._logError(id, 'cannot dispose default emitter');\n    } else delete this.emitters[id];\n  }\n\n  _defaultEmitter() {\n    return this.emitters.default;\n  }\n\n  _logError(name, msg) {\n    log(`Problem encountered in emitter ${name} -> ${msg}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}