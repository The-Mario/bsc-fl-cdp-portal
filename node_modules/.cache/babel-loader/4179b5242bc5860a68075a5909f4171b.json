{"ast":null,"code":"import _slicedToArray from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _styled from \"styled-components\";\n\nvar _jsxFileName = \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/DSRDepositScreens/DSRDepositCreate.js\",\n    _this2 = this;\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useCallback } from 'react';\nimport { Box, Grid, Text, Input, Card } from '@makerdao/ui-components-core';\nimport { TextBlock } from 'components/Typography';\nimport { prettifyNumber } from 'utils/ui';\nimport ScreenFooter from '../ScreenFooter';\nimport ScreenHeader from '../ScreenHeader';\nimport useLanguage from 'hooks/useLanguage';\nimport useWalletBalances from '../../hooks/useWalletBalances';\nimport useValidatedInput from '../../hooks/useValidatedInput';\nimport SetMax from '../SetMax';\nimport useTokenAllowance from 'hooks/useTokenAllowance';\nimport { getColor } from '../../styles/theme';\n\nfunction DepositDaiForm(_ref) {\n  var _this = this;\n\n  var depositAmount = _ref.depositAmount,\n      daiBalance = _ref.daiBalance,\n      onDepositAmountChange = _ref.onDepositAmountChange,\n      setDepositMax = _ref.setDepositMax,\n      depositAmountErrors = _ref.depositAmountErrors;\n\n  var _useLanguage = useLanguage(),\n      lang = _useLanguage.lang;\n\n  var fields = [[lang.formatString(lang.dsr_deposit.deposit_form_title, 'USDFL'), /*#__PURE__*/React.createElement(Input, {\n    style: {\n      fontSize: '14px',\n      color: getColor('greyText')\n    },\n    key: \"daiinput\",\n    name: \"gemsToLock\",\n    after: /*#__PURE__*/React.createElement(SetMax, {\n      onClick: setDepositMax,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 16\n      }\n    }),\n    type: \"number\",\n    value: depositAmount,\n    onChange: onDepositAmountChange,\n    failureMessage: depositAmountErrors,\n    min: \"0\",\n    placeholder: \"0 USDFL\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    key: \"ba\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    style: {\n      fontSize: '14px',\n      color: getColor('greyText')\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, lang.your_balance, ' '), /*#__PURE__*/React.createElement(Text, {\n    style: {\n      fontSize: '14px',\n      color: getColor('whiteText')\n    },\n    display: \"inline-block\",\n    ml: \"s\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, prettifyNumber(daiBalance), \" \", 'USDFL'))]];\n  return /*#__PURE__*/React.createElement(Grid, {\n    gridRowGap: \"l\",\n    maxWidth: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    gridTemplateColumns: \"auto\",\n    gridRowGap: \"l\",\n    gridColumnGap: \"m\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, fields.map(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 4),\n        title = _ref3[0],\n        text = _ref3[1],\n        input = _ref3[2],\n        renderAfter = _ref3[3];\n\n    return /*#__PURE__*/React.createElement(Grid, {\n      gridRowGap: \"s\",\n      key: title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      gridRowGap: \"xs\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TextBlock, {\n      style: {\n        fontSize: '18px',\n        color: getColor('whiteText')\n      },\n      lineHeight: \"normal\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }, title), /*#__PURE__*/React.createElement(TextBlock, {\n      style: {\n        fontSize: '16px',\n        color: getColor('greyText')\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, text)), /*#__PURE__*/React.createElement(Box, {\n      py: \"2xs\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }\n    }, input), renderAfter);\n  })));\n}\n\n__signature__(DepositDaiForm, \"useLanguage{{ lang }}\", function () {\n  return [useLanguage];\n});\n\nvar _StyledBox = _styled(Box).withConfig({\n  displayName: \"DSRDepositCreate___StyledBox\",\n  componentId: \"sc-18dv14r-0\"\n})([\"margin:0 auto;\"]);\n\nvar DSRDepositCreate = function DSRDepositCreate(_ref4) {\n  var dispatch = _ref4.dispatch,\n      onClose = _ref4.onClose;\n\n  var _useLanguage2 = useLanguage(),\n      lang = _useLanguage2.lang;\n\n  var balances = useWalletBalances();\n  var USDFL = balances.USDFL;\n  var daiBalance = USDFL.toFixed(6);\n\n  var _useTokenAllowance = useTokenAllowance('USDFL'),\n      hasSufficientAllowance = _useTokenAllowance.hasSufficientAllowance;\n\n  var _useValidatedInput = useValidatedInput('', {\n    isFloat: true,\n    minFloat: 0.0,\n    maxFloat: USDFL && USDFL.toNumber(),\n    custom: {\n      allowanceInvalid: function allowanceInvalid(value) {\n        return !hasSufficientAllowance(value);\n      }\n    }\n  }, {\n    maxFloat: function maxFloat() {\n      return lang.formatString(lang.action_sidebar.insufficient_balance, 'USDFL');\n    },\n    allowanceInvalid: function allowanceInvalid() {\n      return lang.formatString(lang.action_sidebar.invalid_allowance, 'USDFL');\n    }\n  }),\n      _useValidatedInput2 = _slicedToArray(_useValidatedInput, 4),\n      depositAmount = _useValidatedInput2[0],\n      setDepositAmount = _useValidatedInput2[1],\n      onDepositAmountChange = _useValidatedInput2[2],\n      depositAmountErrors = _useValidatedInput2[3];\n\n  var setDepositMax = useCallback(function () {\n    if (USDFL) {\n      setDepositAmount(USDFL.toNumber().toString());\n    } else {\n      setDepositAmount('0');\n    }\n  }, [USDFL, setDepositAmount]);\n  return /*#__PURE__*/React.createElement(_StyledBox, {\n    maxWidth: \"1040px\",\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ScreenHeader, {\n    title: lang.formatString(lang.save.deposit_dai),\n    text: lang.save.deposit_dai_subheading,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    gridGap: \"m\",\n    my: \"l\",\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    px: {\n      s: 'm',\n      m: 'xl'\n    },\n    py: {\n      s: 'm',\n      m: 'l'\n    },\n    style: {\n      background: getColor('cardBg'),\n      borderColor: getColor('dashBorder')\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DepositDaiForm, {\n    daiBalance: daiBalance,\n    setDepositMax: setDepositMax,\n    depositAmount: depositAmount,\n    onDepositAmountChange: onDepositAmountChange,\n    depositAmountErrors: depositAmountErrors,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(ScreenFooter, {\n    onNext: function onNext() {\n      dispatch({\n        type: 'form/set-deposit-amount',\n        payload: {\n          depositAmount: depositAmount\n        }\n      });\n      dispatch({\n        type: 'increment-step'\n      });\n    },\n    onBack: onClose,\n    secondaryButtonText: lang.actions.skip,\n    canProgress: !!depositAmount && !depositAmountErrors,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }));\n};\n\n__signature__(DSRDepositCreate, \"useLanguage{{ lang }}\\nuseWalletBalances{balances}\\nuseTokenAllowance{{ hasSufficientAllowance }}\\nuseValidatedInput{[\\n    depositAmount,\\n    setDepositAmount,\\n    onDepositAmountChange,\\n    depositAmountErrors\\n  ]}\\nuseCallback{setDepositMax}\", function () {\n  return [useLanguage, useWalletBalances, useTokenAllowance, useValidatedInput];\n});\n\nvar _default = DSRDepositCreate;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(DepositDaiForm, \"DepositDaiForm\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/DSRDepositScreens/DSRDepositCreate.js\");\n  reactHotLoader.register(DSRDepositCreate, \"DSRDepositCreate\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/DSRDepositScreens/DSRDepositCreate.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/DSRDepositScreens/DSRDepositCreate.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/DSRDepositScreens/DSRDepositCreate.js"],"names":["React","useCallback","Box","Grid","Text","Input","Card","TextBlock","prettifyNumber","ScreenFooter","ScreenHeader","useLanguage","useWalletBalances","useValidatedInput","SetMax","useTokenAllowance","getColor","DepositDaiForm","depositAmount","daiBalance","onDepositAmountChange","setDepositMax","depositAmountErrors","lang","fields","formatString","dsr_deposit","deposit_form_title","fontSize","color","your_balance","map","title","text","input","renderAfter","DSRDepositCreate","dispatch","onClose","balances","USDFL","toFixed","hasSufficientAllowance","isFloat","minFloat","maxFloat","toNumber","custom","allowanceInvalid","value","action_sidebar","insufficient_balance","invalid_allowance","setDepositAmount","toString","save","deposit_dai","deposit_dai_subheading","s","m","background","borderColor","type","payload","actions","skip"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\nimport { Box, Grid, Text, Input, Card } from '@makerdao/ui-components-core';\nimport { TextBlock } from 'components/Typography';\nimport { prettifyNumber } from 'utils/ui';\n\nimport ScreenFooter from '../ScreenFooter';\nimport ScreenHeader from '../ScreenHeader';\nimport useLanguage from 'hooks/useLanguage';\nimport useWalletBalances from '../../hooks/useWalletBalances';\nimport useValidatedInput from '../../hooks/useValidatedInput';\nimport SetMax from '../SetMax';\nimport useTokenAllowance from 'hooks/useTokenAllowance';\nimport { getColor } from '../../styles/theme';\n\nfunction DepositDaiForm({\n  depositAmount,\n  daiBalance,\n  onDepositAmountChange,\n  setDepositMax,\n  depositAmountErrors\n}) {\n  const { lang } = useLanguage();\n\n  const fields = [\n    [\n      lang.formatString(lang.dsr_deposit.deposit_form_title, 'USDFL'),\n      <Input\n        style={{ fontSize: '14px', color: getColor('greyText') }}\n        key=\"daiinput\"\n        name=\"gemsToLock\"\n        after={<SetMax onClick={setDepositMax} />}\n        type=\"number\"\n        value={depositAmount}\n        onChange={onDepositAmountChange}\n        failureMessage={depositAmountErrors}\n        min=\"0\"\n        placeholder=\"0 USDFL\"\n      />,\n      <Box key=\"ba\">\n        <Text style={{ fontSize: '14px', color: getColor('greyText') }}>\n          {lang.your_balance}{' '}\n        </Text>\n        <Text\n          style={{ fontSize: '14px', color: getColor('whiteText') }}\n          display=\"inline-block\"\n          ml=\"s\"\n        >\n          {prettifyNumber(daiBalance)} {'USDFL'}\n        </Text>\n      </Box>\n    ]\n  ];\n\n  return (\n    <Grid gridRowGap=\"l\" maxWidth=\"100%\">\n      <Grid\n        gridTemplateColumns=\"auto\"\n        gridRowGap=\"l\"\n        gridColumnGap=\"m\"\n        alignItems=\"center\"\n      >\n        {fields.map(([title, text, input, renderAfter]) => {\n          return (\n            <Grid gridRowGap=\"s\" key={title}>\n              <Grid gridRowGap=\"xs\">\n                <TextBlock\n                  style={{ fontSize: '18px', color: getColor('whiteText') }}\n                  lineHeight=\"normal\"\n                >\n                  {title}\n                </TextBlock>\n                <TextBlock\n                  style={{ fontSize: '16px', color: getColor('greyText') }}\n                >\n                  {text}\n                </TextBlock>\n              </Grid>\n              <Box py=\"2xs\">{input}</Box>\n              {renderAfter}\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Grid>\n  );\n}\n\nconst DSRDepositCreate = ({ dispatch, onClose }) => {\n  const { lang } = useLanguage();\n  const balances = useWalletBalances();\n  const { USDFL } = balances;\n  const daiBalance = USDFL.toFixed(6);\n  const { hasSufficientAllowance } = useTokenAllowance('USDFL');\n\n  const [\n    depositAmount,\n    setDepositAmount,\n    onDepositAmountChange,\n    depositAmountErrors\n  ] = useValidatedInput(\n    '',\n    {\n      isFloat: true,\n      minFloat: 0.0,\n      maxFloat: USDFL && USDFL.toNumber(),\n      custom: {\n        allowanceInvalid: value => !hasSufficientAllowance(value)\n      }\n    },\n    {\n      maxFloat: () =>\n        lang.formatString(lang.action_sidebar.insufficient_balance, 'USDFL'),\n      allowanceInvalid: () =>\n        lang.formatString(lang.action_sidebar.invalid_allowance, 'USDFL')\n    }\n  );\n\n  const setDepositMax = useCallback(() => {\n    if (USDFL) {\n      setDepositAmount(USDFL.toNumber().toString());\n    } else {\n      setDepositAmount('0');\n    }\n  }, [USDFL, setDepositAmount]);\n  return (\n    <Box\n      maxWidth=\"1040px\"\n      css={`\n        margin: 0 auto;\n      `}\n    >\n      <ScreenHeader\n        title={lang.formatString(lang.save.deposit_dai)}\n        text={lang.save.deposit_dai_subheading}\n      />\n      <Grid gridGap=\"m\" my=\"l\">\n        <Card px={{ s: 'm', m: 'xl' }} py={{ s: 'm', m: 'l' }}\n          style={{\n            background: getColor('cardBg'),\n            borderColor: getColor('dashBorder')\n          }}\n        >\n          <DepositDaiForm\n            daiBalance={daiBalance}\n            setDepositMax={setDepositMax}\n            depositAmount={depositAmount}\n            onDepositAmountChange={onDepositAmountChange}\n            depositAmountErrors={depositAmountErrors}\n          />\n        </Card>\n      </Grid>\n      <ScreenFooter\n        onNext={() => {\n          dispatch({\n            type: 'form/set-deposit-amount',\n            payload: { depositAmount }\n          });\n          dispatch({ type: 'increment-step' });\n        }}\n        onBack={onClose}\n        secondaryButtonText={lang.actions.skip}\n        canProgress={!!depositAmount && !depositAmountErrors}\n      />\n    </Box>\n  );\n};\nexport default DSRDepositCreate;\n"]},"metadata":{},"sourceType":"module"}