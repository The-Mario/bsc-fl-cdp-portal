{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _defineProperty from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"Invalid proxy address for tokenAllowance: \", \"\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"Invalid address for tokenAllowance: \", \"\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { getMcdToken } from '../utils';\nimport { fromWei } from '../utils';\nimport BigNumber from 'bignumber.js';\nimport { TOKEN_BALANCE, TOKEN_ALLOWANCE_BASE, REWARD_TOKEN_ALLOWANCE_BY_ADDRESS } from './_constants';\nimport { validateAddress } from './_validators';\nexport var ALLOWANCE_AMOUNT = BigNumber('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nexport var tokenBalance = {\n  generate: function generate(address, symbol) {\n    if (symbol === 'WETH') symbol = 'WETH';\n    if (symbol === 'USDFL') symbol = 'USDFL';\n    var currencyToken = getMcdToken(symbol);\n    var contract = symbol === 'FL' ? 'MCD_GOV' : symbol === 'USDFL' ? 'MCD_DAI' : symbol === 'WETH' ? 'ETH' : symbol;\n    if (!currencyToken) throw new Error(\"\".concat(symbol, \" token is not part of the default tokens list\"));\n    if (symbol === 'DSR-USDFL') throw new Error(\"Balance of USDFL in savings cannot be retrieved from a token contract call. To get USDFL balance in savings call 'balance('DSR-USDFL')'\");\n    return {\n      id: \"balance.\".concat(symbol, \".\").concat(address),\n      contract: symbol === 'ETH' ? 'MULTICALL' : contract,\n      call: [symbol === 'ETH' ? 'getEthBalance(address)(uint256)' : 'balanceOf(address)(uint256)', address],\n      transforms: _defineProperty({}, TOKEN_BALANCE, function (v) {\n        if (symbol === 'USDC') {\n          return currencyToken(v, -6);\n        } else if (symbol === 'WBTC') {\n          return currencyToken(v, -8);\n        } else {\n          return currencyToken(v, 'wei');\n        }\n      })\n    };\n  },\n  returns: [TOKEN_BALANCE]\n};\nexport var tokenBalances = {\n  generate: function generate(address, symbols) {\n    return {\n      dependencies: symbols.map(function (symbol) {\n        return [TOKEN_BALANCE, address, symbol];\n      }),\n      computed: function computed() {\n        for (var _len = arguments.length, balances = new Array(_len), _key = 0; _key < _len; _key++) {\n          balances[_key] = arguments[_key];\n        }\n\n        return balances;\n      }\n    };\n  }\n};\nexport var tokenAllowanceBase = {\n  generate: function generate(address, proxyAddress, symbol) {\n    if (symbol === 'ETH' || symbol === 'DSR-USDFL') throw new Error(\"\".concat(symbol, \" does not require an allowance to be set\"));\n    var currencyToken = getMcdToken(symbol);\n    var contract = symbol === 'FL' ? 'MCD_GOV' : symbol === 'USDFL' ? 'MCD_DAI' : symbol === 'WETH' ? 'ETH' : symbol;\n    if (!currencyToken) throw new Error(\"\".concat(symbol, \" token is not part of the default tokens list\"));\n    return {\n      id: \"allowance.\".concat(symbol, \".\").concat(address),\n      contract: contract,\n      call: ['allowance(address,address)(uint256)', address, proxyAddress]\n    };\n  },\n  returns: [[TOKEN_ALLOWANCE_BASE, function (v) {\n    return BigNumber(v);\n  }]]\n};\nexport var tokenAllowance = {\n  generate: function generate(address, proxyAddress, symbol) {\n    return {\n      dependencies: [symbol === 'ETH' ? [[ALLOWANCE_AMOUNT]] : [TOKEN_ALLOWANCE_BASE, address, proxyAddress, symbol]],\n      computed: function computed(v) {\n        return v;\n      }\n    };\n  },\n  validate: {\n    args: function args(address, proxyAddress) {\n      return validateAddress(_templateObject(), 'address')(address) || validateAddress(_templateObject2(), 'address')(proxyAddress);\n    }\n  }\n};\nexport var adapterBalance = {\n  generate: function generate(collateralTypeName) {\n    return {\n      dependencies: function dependencies(_ref) {\n        var get = _ref.get;\n        var tokenSymbol = collateralTypeName.split('-')[0];\n        tokenSymbol = tokenSymbol === 'ETH' ? 'WETH' : tokenSymbol;\n        return [[TOKEN_BALANCE, get('smartContract').getContractAddress(\"MCD_JOIN_\".concat(collateralTypeName.replace('-', '_'))), tokenSymbol]];\n      },\n      computed: function computed(v) {\n        return v;\n      }\n    };\n  }\n};\nexport var tokenAllowanceByAddress = {\n  generate: function generate(address, proxyAddress, tokenAddress) {\n    // console.log(\"tokenAllowanceByAddress\", address, proxyAddress, tokenAddress);\n    var res = {\n      id: \"allowanceByAddress.\".concat(tokenAddress, \".\").concat(address),\n      call: ['allowance(address,address)(uint256)', address, proxyAddress]\n    };\n\n    if (tokenAddress == 0) {\n      //stub to prevent exception\n      res['contract'] = 'MCD_GOV';\n    } else {\n      res['target'] = tokenAddress;\n    }\n\n    return res;\n  },\n  returns: [[REWARD_TOKEN_ALLOWANCE_BY_ADDRESS, fromWei]]\n};\nvar _default = {\n  tokenBalance: tokenBalance,\n  tokenAllowanceBase: tokenAllowanceBase,\n  tokenAllowanceByAddress: tokenAllowanceByAddress,\n  // computed\n  adapterBalance: adapterBalance,\n  tokenAllowance: tokenAllowance,\n  tokenBalances: tokenBalances\n};\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(ALLOWANCE_AMOUNT, \"ALLOWANCE_AMOUNT\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/schemas/token.js\");\n  reactHotLoader.register(tokenBalance, \"tokenBalance\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/schemas/token.js\");\n  reactHotLoader.register(tokenBalances, \"tokenBalances\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/schemas/token.js\");\n  reactHotLoader.register(tokenAllowanceBase, \"tokenAllowanceBase\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/schemas/token.js\");\n  reactHotLoader.register(tokenAllowance, \"tokenAllowance\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/schemas/token.js\");\n  reactHotLoader.register(adapterBalance, \"adapterBalance\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/schemas/token.js\");\n  reactHotLoader.register(tokenAllowanceByAddress, \"tokenAllowanceByAddress\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/schemas/token.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/schemas/token.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/schemas/token.js"],"names":["getMcdToken","fromWei","BigNumber","TOKEN_BALANCE","TOKEN_ALLOWANCE_BASE","REWARD_TOKEN_ALLOWANCE_BY_ADDRESS","validateAddress","ALLOWANCE_AMOUNT","tokenBalance","generate","address","symbol","currencyToken","contract","Error","id","call","transforms","v","returns","tokenBalances","symbols","dependencies","map","computed","balances","tokenAllowanceBase","proxyAddress","tokenAllowance","validate","args","adapterBalance","collateralTypeName","get","tokenSymbol","split","getContractAddress","replace","tokenAllowanceByAddress","tokenAddress","res"],"mappings":"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","sourcesContent":["import { getMcdToken } from '../utils';\nimport { fromWei } from '../utils';\nimport BigNumber from 'bignumber.js';\n\nimport {\n  TOKEN_BALANCE,\n  TOKEN_ALLOWANCE_BASE,\n  REWARD_TOKEN_ALLOWANCE_BY_ADDRESS\n} from './_constants';\nimport { validateAddress } from './_validators';\n\nexport const ALLOWANCE_AMOUNT = BigNumber(\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n);\n\nexport const tokenBalance = {\n  generate: (address, symbol) => {\n    if (symbol === 'WETH') symbol = 'WETH';\n    if (symbol === 'USDFL') symbol = 'USDFL';\n\n    const currencyToken = getMcdToken(symbol);\n    const contract =\n      symbol === 'FL'\n        ? 'MCD_GOV'\n        : symbol === 'USDFL'\n        ? 'MCD_DAI'\n        : symbol === 'WETH'\n        ? 'ETH'\n        : symbol;\n    if (!currencyToken)\n      throw new Error(`${symbol} token is not part of the default tokens list`);\n    if (symbol === 'DSR-USDFL')\n      throw new Error(\n        \"Balance of USDFL in savings cannot be retrieved from a token contract call. To get USDFL balance in savings call 'balance('DSR-USDFL')'\"\n      );\n\n    return {\n      id: `balance.${symbol}.${address}`,\n      contract: symbol === 'ETH' ? 'MULTICALL' : contract,\n      call: [\n        symbol === 'ETH'\n          ? 'getEthBalance(address)(uint256)'\n          : 'balanceOf(address)(uint256)',\n        address\n      ],\n      transforms: {\n        [TOKEN_BALANCE]: v => {\n          if (symbol === 'USDC') {\n            return currencyToken(v, -6);\n          } else if (symbol === 'WBTC') {\n            return currencyToken(v, -8);\n          } else {\n            return currencyToken(v, 'wei');\n          }\n        }\n      }\n    };\n  },\n  returns: [TOKEN_BALANCE]\n};\n\nexport const tokenBalances = {\n  generate: (address, symbols) => ({\n    dependencies: symbols.map(symbol => [TOKEN_BALANCE, address, symbol]),\n    computed: (...balances) => balances\n  })\n};\n\nexport const tokenAllowanceBase = {\n  generate: (address, proxyAddress, symbol) => {\n    if (symbol === 'ETH' || symbol === 'DSR-USDFL')\n      throw new Error(`${symbol} does not require an allowance to be set`);\n\n    const currencyToken = getMcdToken(symbol);\n    const contract =\n      symbol === 'FL'\n        ? 'MCD_GOV'\n        : symbol === 'USDFL'\n        ? 'MCD_DAI'\n        : symbol === 'WETH'\n        ? 'ETH'\n        : symbol;\n\n    if (!currencyToken)\n      throw new Error(`${symbol} token is not part of the default tokens list`);\n\n    return {\n      id: `allowance.${symbol}.${address}`,\n      contract: contract,\n      call: ['allowance(address,address)(uint256)', address, proxyAddress]\n    };\n  },\n  returns: [[TOKEN_ALLOWANCE_BASE, v => BigNumber(v)]]\n};\n\nexport const tokenAllowance = {\n  generate: (address, proxyAddress, symbol) => ({\n    dependencies: [\n      symbol === 'ETH'\n        ? [[ALLOWANCE_AMOUNT]]\n        : [TOKEN_ALLOWANCE_BASE, address, proxyAddress, symbol]\n    ],\n    computed: v => v\n  }),\n  validate: {\n    args: (address, proxyAddress) =>\n      validateAddress`Invalid address for tokenAllowance: ${'address'}`(\n        address\n      ) ||\n      validateAddress`Invalid proxy address for tokenAllowance: ${'address'}`(\n        proxyAddress\n      )\n  }\n};\n\nexport const adapterBalance = {\n  generate: collateralTypeName => ({\n    dependencies: ({ get }) => {\n      let tokenSymbol = collateralTypeName.split('-')[0];\n      tokenSymbol = tokenSymbol === 'ETH' ? 'WETH' : tokenSymbol;\n      return [\n        [\n          TOKEN_BALANCE,\n          get('smartContract').getContractAddress(\n            `MCD_JOIN_${collateralTypeName.replace('-', '_')}`\n          ),\n          tokenSymbol\n        ]\n      ];\n    },\n    computed: v => v\n  })\n};\n\nexport const tokenAllowanceByAddress = {\n  generate: (address, proxyAddress, tokenAddress) => {\n    // console.log(\"tokenAllowanceByAddress\", address, proxyAddress, tokenAddress);\n\n    var res = {\n      id: `allowanceByAddress.${tokenAddress}.${address}`,\n      call: ['allowance(address,address)(uint256)', address, proxyAddress]\n    };\n\n    if (tokenAddress == 0) {\n      //stub to prevent exception\n      res['contract'] = 'MCD_GOV';\n    } else {\n      res['target'] = tokenAddress;\n    }\n    return res;\n  },\n  returns: [[REWARD_TOKEN_ALLOWANCE_BY_ADDRESS, fromWei]]\n};\n\nexport default {\n  tokenBalance,\n  tokenAllowanceBase,\n  tokenAllowanceByAddress,\n\n  // computed\n  adapterBalance,\n  tokenAllowance,\n  tokenBalances\n};\n"]},"metadata":{},"sourceType":"module"}