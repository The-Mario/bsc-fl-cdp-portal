{"ast":null,"code":"import _slicedToArray from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _styled from \"styled-components\";\n\nvar _jsxFileName = \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/CDPCreateScreens/CDPCreateDeposit.js\",\n    _this2 = this;\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React from 'react';\nimport { Box, Grid, Text, Input, Card, Button } from '@makerdao/ui-components-core';\nimport { USDFL } from '../../libs/dai-plugin-mcd/src/index.js';\nimport { greaterThanOrEqual } from 'utils/bignumber';\nimport { TextBlock } from 'components/Typography';\nimport { formatCollateralizationRatio, formatter } from 'utils/ui';\nimport { cdpParamsAreValid } from '../../utils/cdp';\nimport useTokenAllowance from 'hooks/useTokenAllowance';\nimport useLanguage from 'hooks/useLanguage';\nimport useAnalytics from 'hooks/useAnalytics';\nimport ScreenFooter from '../ScreenFooter';\nimport ScreenHeader from '../ScreenHeader';\nimport RatioDisplay, { RatioDisplayTypes } from 'components/RatioDisplay';\nimport BigNumber from 'bignumber.js';\nimport { getColor } from 'styles/theme';\n\nfunction OpenCDPForm(_ref) {\n  var _collateralDebtAvaila,\n      _collateralDebtAvaila2,\n      _collateralDebtAvaila3,\n      _collateralDebtAvaila4,\n      _this = this;\n\n  var selectedIlk = _ref.selectedIlk,\n      cdpParams = _ref.cdpParams,\n      handleInputChange = _ref.handleInputChange,\n      ilkData = _ref.ilkData,\n      dispatch = _ref.dispatch,\n      fairDistribAllow = _ref.fairDistribAllow,\n      convertAmountToValue = _ref.convertAmountToValue;\n\n  var _useLanguage = useLanguage(),\n      lang = _useLanguage.lang;\n\n  var calculateMaxDai = ilkData.calculateMaxDai,\n      debtFloor = ilkData.debtFloor,\n      collateralDebtAvailable = ilkData.collateralDebtAvailable,\n      collateralAmountByValue = ilkData.collateralAmountByValue;\n  collateralDebtAvailable = (_collateralDebtAvaila = collateralDebtAvailable) === null || _collateralDebtAvaila === void 0 ? void 0 : _collateralDebtAvaila.toBigNumber();\n\n  function convertValueToAmount(value) {\n    if (value == 0) return BigNumber(0);\n    var r = collateralAmountByValue(BigNumber(value));\n    if (r == undefined) return BigNumber(0);\n    return r;\n  }\n\n  var daiAvailable = calculateMaxDai(BigNumber(cdpParams.gemsToLock || '0'));\n  var daiAvailableToGenerate = daiAvailable.gt(collateralDebtAvailable) ? collateralDebtAvailable.lt(debtFloor) ? BigNumber(0) : collateralDebtAvailable : daiAvailable;\n  var belowDustLimit = debtFloor === null || debtFloor === void 0 ? void 0 : debtFloor.gt(BigNumber(cdpParams.daiToDraw));\n  var aboveDebtCeiling = ((_collateralDebtAvaila2 = collateralDebtAvailable) === null || _collateralDebtAvaila2 === void 0 ? void 0 : _collateralDebtAvaila2.lt(BigNumber(cdpParams.daiToDraw))) && ((_collateralDebtAvaila3 = collateralDebtAvailable) === null || _collateralDebtAvaila3 === void 0 ? void 0 : _collateralDebtAvaila3.gte(debtFloor));\n  var negDebtAvailable = (_collateralDebtAvaila4 = collateralDebtAvailable) === null || _collateralDebtAvaila4 === void 0 ? void 0 : _collateralDebtAvaila4.lt(debtFloor);\n\n  var _useTokenAllowance = useTokenAllowance(selectedIlk.gem),\n      hasSufficientAllowance = _useTokenAllowance.hasSufficientAllowance;\n\n  var userHasSufficientGemBalance = greaterThanOrEqual(selectedIlk.userGemBalance, cdpParams.gemsToLock);\n  var userCanDrawDaiAmount = daiAvailable === null || daiAvailable === void 0 ? void 0 : daiAvailable.gte(BigNumber(cdpParams.daiToDraw === '' ? '0' : cdpParams.daiToDraw));\n  var userBalanceValue = convertAmountToValue(selectedIlk.userGemBalance);\n\n  function handleValueChange(_ref2) {\n    var target = _ref2.target;\n    if (parseFloat(target.value) < 0) return;\n    var val = convertValueToAmount(target.value);\n    dispatch({\n      type: \"form/set-gemsToLock\",\n      payload: {\n        value: val\n      }\n    });\n  }\n\n  function setMax(_ref3) {\n    var target = _ref3.target;\n    var val = convertValueToAmount(target.value);\n    dispatch({\n      type: \"form/set-setMax\",\n      payload: {\n        value: val\n      }\n    });\n  }\n\n  var fields = [[lang.formatString(lang.cdp_create.deposit_form_field1_title, selectedIlk.gem), lang.formatString(lang.cdp_create.deposit_form_field1_text, selectedIlk.gem), /*#__PURE__*/React.createElement(Grid, {\n    gridTemplateColumns: {\n      s: 'minmax(0, 1fr)',\n      l: '1fr 1fr'\n    },\n    gridGap: \"m\",\n    style: {\n      justifyItems: 'start',\n      alignItems: 'start'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    style: {\n      fontSize: '14px',\n      color: getColor('whiteText')\n    },\n    key: \"collinput\",\n    name: \"valueToLock\",\n    after: 'USD',\n    type: \"number\",\n    value: cdpParams.setMax ? formatter(convertAmountToValue(cdpParams.gemsToLock)) : null,\n    onChange: handleValueChange,\n    width: 300,\n    borderColor: \"#323B4F\",\n    failureMessage: userHasSufficientGemBalance || !cdpParams.gemsToLock ? hasSufficientAllowance(cdpParams.gemsToLock === '' ? 0 : cdpParams.gemsToLock) ? fairDistribAllow ? null : lang.cdp_create.fair_distrib_not_allow : lang.formatString(lang.action_sidebar.invalid_allowance, selectedIlk.gem) : lang.formatString(lang.cdp_create.insufficient_ilk_balance, selectedIlk.gem),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"btn_setmax\",\n    variant: \"secondary-outline\",\n    onClick: function onClick() {\n      setMax({\n        target: {\n          name: 'setMax',\n          value: userBalanceValue\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, \"SET MAX\")), /*#__PURE__*/React.createElement(Box, {\n    key: \"ba\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    style: {\n      fontSize: '14px',\n      color: getColor('whiteText')\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, lang.your_balance, ' '), /*#__PURE__*/React.createElement(Text, {\n    style: {\n      fontSize: '14px',\n      color: getColor('whiteText')\n    },\n    display: \"inline-block\",\n    ml: \"s\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, formatter(userBalanceValue), \" \", 'USD'))], [lang.cdp_create.deposit_form_field3_title, lang.cdp_create.deposit_form_field3_text, /*#__PURE__*/React.createElement(Grid, {\n    gridTemplateColumns: {\n      s: 'minmax(0, 1fr)',\n      l: '1fr 1fr'\n    },\n    gridGap: \"m\",\n    style: {\n      justifyItems: 'start',\n      alignItems: 'start'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    style: {\n      fontSize: '14px',\n      color: getColor('whiteText')\n    },\n    key: \"daiToDraw\",\n    name: \"daiToDraw\",\n    after: \"USDFL\",\n    width: 300,\n    borderColor: \"#323B4F\",\n    type: \"number\",\n    failureMessage: (belowDustLimit ? lang.formatString(lang.cdp_create.below_dust_limit, debtFloor) : null) || (userCanDrawDaiAmount ? null : lang.cdp_create.draw_too_much_dai) || (aboveDebtCeiling ? lang.formatString(lang.action_sidebar.generate_threshold, formatter(collateralDebtAvailable)) : null) || (negDebtAvailable ? lang.action_sidebar.negative_debt_avail : null),\n    value: cdpParams.daiToDraw,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"btn_setmax\",\n    variant: \"secondary-outline\",\n    onClick: function onClick() {\n      handleInputChange({\n        target: {\n          name: 'daiToDraw',\n          value: formatter(daiAvailableToGenerate)\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }, \"SET MAX\")), /*#__PURE__*/React.createElement(Grid, {\n    gridRowGap: \"xs\",\n    key: \"keytodrawinfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    key: \"ba\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    style: {\n      fontSize: '14px',\n      color: getColor('whiteText')\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  }, lang.cdp_create.deposit_form_field3_after2, ' '), /*#__PURE__*/React.createElement(Text, {\n    display: \"inline-block\",\n    ml: \"s\",\n    style: {\n      fontSize: '14px',\n      color: getColor('whiteText')\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 11\n    }\n  }, formatter(daiAvailableToGenerate), \" USDFL\")))]];\n  return /*#__PURE__*/React.createElement(Grid, {\n    gridRowGap: \"l\",\n    maxWidth: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    gridTemplateColumns: \"auto\",\n    gridRowGap: \"l\",\n    gridColumnGap: \"m\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }\n  }, fields.map(function (_ref4) {\n    var _ref5 = _slicedToArray(_ref4, 4),\n        title = _ref5[0],\n        text = _ref5[1],\n        input = _ref5[2],\n        renderAfter = _ref5[3];\n\n    return /*#__PURE__*/React.createElement(Grid, {\n      gridRowGap: \"s\",\n      key: title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      gridRowGap: \"xs\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TextBlock, {\n      style: {\n        fontSize: '18px',\n        color: getColor('whiteText')\n      },\n      lineHeight: \"normal\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }\n    }, title), /*#__PURE__*/React.createElement(TextBlock, {\n      style: {\n        fontSize: '16px',\n        color: getColor('greyText')\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }\n    }, text)), /*#__PURE__*/React.createElement(Box, {\n      py: \"2xs\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 15\n      }\n    }, input), renderAfter);\n  })));\n}\n\n__signature__(OpenCDPForm, \"useLanguage{{ lang }}\\nuseTokenAllowance{{ hasSufficientAllowance }}\", function () {\n  return [useLanguage, useTokenAllowance];\n});\n\nvar CDPCreateDepositSidebar = function CDPCreateDepositSidebar(_ref6) {\n  var _collateralDebtAvaila5, _collateralDebtAvaila6;\n\n  var cdpParams = _ref6.cdpParams,\n      selectedIlk = _ref6.selectedIlk,\n      ilkData = _ref6.ilkData,\n      collateralizationRatio = _ref6.collateralizationRatio;\n\n  var _useLanguage2 = useLanguage(),\n      lang = _useLanguage2.lang;\n\n  var currency = selectedIlk.currency;\n  var annualStabilityFee = ilkData.annualStabilityFee,\n      collateralDebtAvailable = ilkData.collateralDebtAvailable;\n  collateralDebtAvailable = (_collateralDebtAvaila5 = collateralDebtAvailable) === null || _collateralDebtAvaila5 === void 0 ? void 0 : _collateralDebtAvaila5.toBigNumber();\n  var maxDaiAvailableToGenerate = ((_collateralDebtAvaila6 = collateralDebtAvailable) === null || _collateralDebtAvaila6 === void 0 ? void 0 : _collateralDebtAvaila6.lt(0)) ? BigNumber(0) : collateralDebtAvailable;\n  var liquidationPriceDisplay = formatter(ilkData.calculateliquidationPrice(currency(cdpParams.gemsToLock || '0'), USDFL(cdpParams.daiToDraw || '0')));\n  if ([Infinity, 'Infinity'].includes(liquidationPriceDisplay)) liquidationPriceDisplay = '0.0000';\n  return /*#__PURE__*/React.createElement(Grid, {\n    gridRowGap: \"m\",\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 5\n    }\n  }, [[lang.collateralization, /*#__PURE__*/React.createElement(RatioDisplay, {\n    key: \"ba\",\n    type: RatioDisplayTypes.TEXT,\n    text: \"\".concat(formatCollateralizationRatio(collateralizationRatio), \" (Min \").concat(formatter(ilkData.liquidationRatio, {\n      percentage: true\n    }), \"%)\"),\n    ratio: formatter(collateralizationRatio),\n    ilkLiqRatio: formatter(ilkData.liquidationRatio, {\n      percentage: true\n    }),\n    t: \"caption\",\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 11\n    }\n  })], [lang.stability_fee, \"\".concat(formatter(annualStabilityFee, {\n    percentage: true,\n    rounding: BigNumber.ROUND_HALF_UP\n  }), \"%\")], [lang.cdp_create.max_dai_available_to_generate, \"\".concat(formatter(maxDaiAvailableToGenerate), \" USDFL\")]].map(function (_ref7) {\n    var _ref8 = _slicedToArray(_ref7, 2),\n        title = _ref8[0],\n        value = _ref8[1];\n\n    return /*#__PURE__*/React.createElement(Grid, {\n      gridRowGap: \"xs\",\n      key: title,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TextBlock, {\n      style: {\n        fontSize: '18px',\n        color: getColor('whiteText')\n      },\n      lineHeight: \"normal\",\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }\n    }, title), /*#__PURE__*/React.createElement(TextBlock, {\n      style: {\n        fontSize: '14px',\n        color: getColor('greyText')\n      },\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }\n    }, value));\n  }));\n};\n\n__signature__(CDPCreateDepositSidebar, \"useLanguage{{ lang }}\", function () {\n  return [useLanguage];\n});\n\nvar _StyledBox = _styled(Box).withConfig({\n  displayName: \"CDPCreateDeposit___StyledBox\",\n  componentId: \"sc-1hpod3n-0\"\n})([\"margin:0 auto;\"]);\n\nvar CDPCreateDeposit = function CDPCreateDeposit(_ref9) {\n  var selectedIlk = _ref9.selectedIlk,\n      cdpParams = _ref9.cdpParams,\n      isFirstVault = _ref9.isFirstVault,\n      hasSufficientAllowance = _ref9.hasSufficientAllowance,\n      hasAllowance = _ref9.hasAllowance,\n      collateralTypesData = _ref9.collateralTypesData,\n      dispatch = _ref9.dispatch,\n      fairDistribAllowToLockValue = _ref9.fairDistribAllowToLockValue;\n\n  var _useLanguage3 = useLanguage(),\n      lang = _useLanguage3.lang;\n\n  var _useAnalytics = useAnalytics('DepositGenerate', 'VaultCreate'),\n      trackBtnClick = _useAnalytics.trackBtnClick;\n\n  var gemsToLock = cdpParams.gemsToLock,\n      daiToDraw = cdpParams.daiToDraw;\n  var ilkData = collateralTypesData.find(function (x) {\n    return x.symbol === selectedIlk.symbol;\n  });\n  var calculateMaxDai = ilkData.calculateMaxDai,\n      debtFloor = ilkData.debtFloor,\n      collateralValueForAmount = ilkData.collateralValueForAmount;\n  var daiAvailable = calculateMaxDai(BigNumber(cdpParams.gemsToLock || '0'));\n  var collateralizationRatio = ilkData.calculateCollateralizationRatio(BigNumber(cdpParams.gemsToLock || '0'), USDFL(cdpParams.daiToDraw || '0'));\n\n  function convertAmountToValue(amount) {\n    if (amount == 0) return BigNumber(0);\n    var r = collateralValueForAmount(BigNumber(amount)).toFixed(3);\n    if (r) return BigNumber(r);\n    return BigNumber(0);\n  }\n\n  var valueToLock = convertAmountToValue(cdpParams.gemsToLock);\n  var fairDistribAllow = fairDistribAllowToLockValue(valueToLock);\n\n  function handleInputChange(_ref10) {\n    var target = _ref10.target;\n    if (parseFloat(target.value) < 0) return;\n    dispatch({\n      type: \"form/set-\".concat(target.name),\n      payload: {\n        value: target.value\n      }\n    });\n  }\n\n  var canProgress = cdpParamsAreValid(cdpParams, selectedIlk.userGemBalance, debtFloor, daiAvailable) && hasSufficientAllowance(cdpParams.gemsToLock) && fairDistribAllow;\n  return /*#__PURE__*/React.createElement(_StyledBox, {\n    maxWidth: \"1040px\",\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ScreenHeader, {\n    title: lang.formatString(lang.cdp_create.deposit_title, selectedIlk.gem),\n    text: lang.cdp_create.deposit_text,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    gridTemplateColumns: {\n      s: 'minmax(0, 1fr)',\n      l: '2fr 1fr'\n    },\n    gridGap: \"m\",\n    my: \"l\",\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    px: {\n      s: 'm',\n      m: 'xl'\n    },\n    py: {\n      s: 'm',\n      m: 'l'\n    },\n    style: {\n      backgroundColor: getColor('cardBg'),\n      borderColor: getColor('cardBg'),\n      borderRadius: '13px'\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(OpenCDPForm, {\n    cdpParams: cdpParams,\n    handleInputChange: handleInputChange,\n    selectedIlk: selectedIlk,\n    ilkData: ilkData,\n    collateralizationRatio: collateralizationRatio,\n    dispatch: dispatch,\n    fairDistribAllow: fairDistribAllow,\n    convertAmountToValue: convertAmountToValue,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Card, {\n    px: {\n      s: 'm',\n      m: 'xl'\n    },\n    py: {\n      s: 'm',\n      m: 'l'\n    },\n    style: {\n      backgroundColor: getColor('cardBg'),\n      borderColor: getColor('cardBg'),\n      borderRadius: '13px'\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CDPCreateDepositSidebar, {\n    selectedIlk: selectedIlk,\n    cdpParams: cdpParams,\n    ilkData: ilkData,\n    collateralizationRatio: collateralizationRatio,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(ScreenFooter, {\n    onNext: function onNext() {\n      trackBtnClick('Next', {\n        lock: gemsToLock,\n        generate: daiToDraw,\n        isFirstVault: isFirstVault\n      });\n      dispatch({\n        type: 'increment-step'\n      });\n    },\n    onBack: function onBack() {\n      trackBtnClick('Back', {\n        isFirstVault: isFirstVault\n      });\n      dispatch({\n        type: 'decrement-step',\n        payload: {\n          by: hasAllowance ? 2 : 1\n        }\n      });\n    },\n    canProgress: canProgress,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }\n  }));\n};\n\n__signature__(CDPCreateDeposit, \"useLanguage{{ lang }}\\nuseAnalytics{{ trackBtnClick }}\", function () {\n  return [useLanguage, useAnalytics];\n});\n\nvar _default = CDPCreateDeposit;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(OpenCDPForm, \"OpenCDPForm\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/CDPCreateScreens/CDPCreateDeposit.js\");\n  reactHotLoader.register(CDPCreateDepositSidebar, \"CDPCreateDepositSidebar\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/CDPCreateScreens/CDPCreateDeposit.js\");\n  reactHotLoader.register(CDPCreateDeposit, \"CDPCreateDeposit\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/CDPCreateScreens/CDPCreateDeposit.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/CDPCreateScreens/CDPCreateDeposit.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/CDPCreateScreens/CDPCreateDeposit.js"],"names":["React","Box","Grid","Text","Input","Card","Button","USDFL","greaterThanOrEqual","TextBlock","formatCollateralizationRatio","formatter","cdpParamsAreValid","useTokenAllowance","useLanguage","useAnalytics","ScreenFooter","ScreenHeader","RatioDisplay","RatioDisplayTypes","BigNumber","getColor","OpenCDPForm","selectedIlk","cdpParams","handleInputChange","ilkData","dispatch","fairDistribAllow","convertAmountToValue","lang","calculateMaxDai","debtFloor","collateralDebtAvailable","collateralAmountByValue","toBigNumber","convertValueToAmount","value","r","undefined","daiAvailable","gemsToLock","daiAvailableToGenerate","gt","lt","belowDustLimit","daiToDraw","aboveDebtCeiling","gte","negDebtAvailable","gem","hasSufficientAllowance","userHasSufficientGemBalance","userGemBalance","userCanDrawDaiAmount","userBalanceValue","handleValueChange","target","parseFloat","val","type","payload","setMax","fields","formatString","cdp_create","deposit_form_field1_title","deposit_form_field1_text","s","l","justifyItems","alignItems","fontSize","color","fair_distrib_not_allow","action_sidebar","invalid_allowance","insufficient_ilk_balance","name","your_balance","deposit_form_field3_title","deposit_form_field3_text","below_dust_limit","draw_too_much_dai","generate_threshold","negative_debt_avail","deposit_form_field3_after2","map","title","text","input","renderAfter","CDPCreateDepositSidebar","collateralizationRatio","currency","annualStabilityFee","maxDaiAvailableToGenerate","liquidationPriceDisplay","calculateliquidationPrice","Infinity","includes","collateralization","TEXT","liquidationRatio","percentage","stability_fee","rounding","ROUND_HALF_UP","max_dai_available_to_generate","CDPCreateDeposit","isFirstVault","hasAllowance","collateralTypesData","fairDistribAllowToLockValue","trackBtnClick","find","x","symbol","collateralValueForAmount","calculateCollateralizationRatio","amount","toFixed","valueToLock","canProgress","deposit_title","deposit_text","m","backgroundColor","borderColor","borderRadius","lock","generate","by"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Box, Grid, Text, Input, Card, Button } from '@makerdao/ui-components-core';\nimport { USDFL } from '../../libs/dai-plugin-mcd/src/index.js';\nimport { greaterThanOrEqual } from 'utils/bignumber';\nimport { TextBlock } from 'components/Typography';\nimport { formatCollateralizationRatio, formatter } from 'utils/ui';\nimport { cdpParamsAreValid } from '../../utils/cdp';\nimport useTokenAllowance from 'hooks/useTokenAllowance';\nimport useLanguage from 'hooks/useLanguage';\nimport useAnalytics from 'hooks/useAnalytics';\nimport ScreenFooter from '../ScreenFooter';\nimport ScreenHeader from '../ScreenHeader';\nimport RatioDisplay, { RatioDisplayTypes } from 'components/RatioDisplay';\nimport BigNumber from 'bignumber.js';\nimport { getColor } from 'styles/theme';\n\nfunction OpenCDPForm({\n  selectedIlk,\n  cdpParams,\n  handleInputChange,\n  ilkData,\n  dispatch,\n  fairDistribAllow,\n  convertAmountToValue\n}) {\n  const { lang } = useLanguage();\n  let {\n    calculateMaxDai,\n    debtFloor,\n    collateralDebtAvailable,\n    collateralAmountByValue\n  } = ilkData;\n  collateralDebtAvailable = collateralDebtAvailable?.toBigNumber();\n\n  function convertValueToAmount(value) {\n    if (value == 0) return BigNumber(0);\n    const r = collateralAmountByValue(BigNumber(value));\n\n    if (r == undefined) return BigNumber(0);\n    return r;\n  }\n\n  const daiAvailable = calculateMaxDai(BigNumber(cdpParams.gemsToLock || '0'));\n  const daiAvailableToGenerate = daiAvailable.gt(collateralDebtAvailable)\n    ? collateralDebtAvailable.lt(debtFloor)\n      ? BigNumber(0)\n      : collateralDebtAvailable\n    : daiAvailable;\n\n  const belowDustLimit = debtFloor?.gt(BigNumber(cdpParams.daiToDraw));\n  const aboveDebtCeiling =\n    collateralDebtAvailable?.lt(BigNumber(cdpParams.daiToDraw)) &&\n    collateralDebtAvailable?.gte(debtFloor);\n\n  const negDebtAvailable = collateralDebtAvailable?.lt(debtFloor);\n\n  const { hasSufficientAllowance } = useTokenAllowance(selectedIlk.gem);\n  const userHasSufficientGemBalance = greaterThanOrEqual(\n    selectedIlk.userGemBalance,\n    cdpParams.gemsToLock\n  );\n\n  const userCanDrawDaiAmount = daiAvailable?.gte(\n    BigNumber(cdpParams.daiToDraw === '' ? '0' : cdpParams.daiToDraw)\n  );\n\n  const userBalanceValue = convertAmountToValue(selectedIlk.userGemBalance);\n\n  function handleValueChange({ target }) {\n    if (parseFloat(target.value) < 0) return;\n\n    const val = convertValueToAmount(target.value);\n    dispatch({\n      type: `form/set-gemsToLock`,\n      payload: { value: val }\n    });\n  }\n  function setMax({ target }) {\n    const val = convertValueToAmount(target.value);\n    dispatch({\n      type: `form/set-setMax`,\n      payload: { value: val }\n    });\n  }\n\n  const fields = [\n    [\n      lang.formatString(\n        lang.cdp_create.deposit_form_field1_title,\n        selectedIlk.gem\n      ),\n      lang.formatString(\n        lang.cdp_create.deposit_form_field1_text,\n        selectedIlk.gem\n      ),\n      <Grid\n        gridTemplateColumns={{ s: 'minmax(0, 1fr)', l: '1fr 1fr' }}\n        gridGap=\"m\"\n        style={{justifyItems: 'start', alignItems: 'start'}}\n      >\n      <Input\n        style={{ fontSize: '14px', color: getColor('whiteText') }}\n        key=\"collinput\"\n        name=\"valueToLock\"\n        after={'USD'}\n        type=\"number\"\n        value={\n          cdpParams.setMax\n            ? formatter(convertAmountToValue(cdpParams.gemsToLock))\n            : null\n        }\n        onChange={handleValueChange}\n        width={300}\n        borderColor=\"#323B4F\"\n        failureMessage={\n          userHasSufficientGemBalance || !cdpParams.gemsToLock\n            ? hasSufficientAllowance(\n                cdpParams.gemsToLock === '' ? 0 : cdpParams.gemsToLock\n              )\n              ? fairDistribAllow\n                ? null\n                : lang.cdp_create.fair_distrib_not_allow\n              : lang.formatString(\n                  lang.action_sidebar.invalid_allowance,\n                  selectedIlk.gem\n                )\n            : lang.formatString(\n                lang.cdp_create.insufficient_ilk_balance,\n                selectedIlk.gem\n              )\n        }\n      />\n      <Button\n      className=\"btn_setmax\"\n      variant=\"secondary-outline\"\n      onClick={() => {\n        setMax({\n          target: {\n            name: 'setMax',\n            value: userBalanceValue\n          }\n        });\n      }}\n      >SET MAX</Button>\n      </Grid>,\n      <Box key=\"ba\">\n        <Text style={{ fontSize: '14px', color: getColor('whiteText') }}>\n          {lang.your_balance}{' '}\n        </Text>\n        <Text\n          style={{ fontSize: '14px', color: getColor('whiteText') }}\n          display=\"inline-block\"\n          ml=\"s\"\n        >\n          {formatter(userBalanceValue)} {'USD'}\n        </Text>\n      </Box>\n    ],\n    [\n      lang.cdp_create.deposit_form_field3_title,\n      lang.cdp_create.deposit_form_field3_text,\n      <Grid\n        gridTemplateColumns={{ s: 'minmax(0, 1fr)', l: '1fr 1fr' }}\n        gridGap=\"m\"\n        style={{justifyItems: 'start', alignItems: 'start'}}\n      >\n      <Input\n        style={{ fontSize: '14px', color: getColor('whiteText') }}\n        key=\"daiToDraw\"\n        name=\"daiToDraw\"\n        after=\"USDFL\"\n        width={300}\n        borderColor=\"#323B4F\"\n        type=\"number\"\n        failureMessage={\n          (belowDustLimit\n            ? lang.formatString(lang.cdp_create.below_dust_limit, debtFloor)\n            : null) ||\n          (userCanDrawDaiAmount ? null : lang.cdp_create.draw_too_much_dai) ||\n          (aboveDebtCeiling\n            ? lang.formatString(\n                lang.action_sidebar.generate_threshold,\n                formatter(collateralDebtAvailable)\n              )\n            : null) ||\n          (negDebtAvailable ? lang.action_sidebar.negative_debt_avail : null)\n        }\n        value={cdpParams.daiToDraw}\n        onChange={handleInputChange}\n      />\n      <Button\n      className=\"btn_setmax\"\n      variant=\"secondary-outline\"\n      onClick={() => {\n        handleInputChange({\n          target: {\n            name: 'daiToDraw',\n            value: formatter(daiAvailableToGenerate)\n          }\n        });\n      }}\n      >SET MAX</Button>\n      </Grid>,\n      <Grid gridRowGap=\"xs\" key=\"keytodrawinfo\">\n        <Box key=\"ba\">\n          <Text style={{ fontSize: '14px', color: getColor('whiteText') }}>\n            {lang.cdp_create.deposit_form_field3_after2}{' '}\n          </Text>\n          <Text\n            display=\"inline-block\"\n            ml=\"s\"\n            style={{ fontSize: '14px', color: getColor('whiteText') }}\n          >\n            {formatter(daiAvailableToGenerate)} USDFL\n          </Text>\n        </Box>\n      </Grid>\n    ]\n  ];\n\n  return (\n    <Grid gridRowGap=\"l\" maxWidth=\"100%\">\n      <Grid\n        gridTemplateColumns=\"auto\"\n        gridRowGap=\"l\"\n        gridColumnGap=\"m\"\n        alignItems=\"center\"\n      >\n        {fields.map(([title, text, input, renderAfter]) => {\n          return (\n            <Grid gridRowGap=\"s\" key={title}>\n              <Grid gridRowGap=\"xs\">\n                <TextBlock\n                  style={{ fontSize: '18px', color: getColor('whiteText') }}\n                  lineHeight=\"normal\"\n                >\n                  {title}\n                </TextBlock>\n                <TextBlock\n                  style={{ fontSize: '16px', color: getColor('greyText') }}\n                >\n                  {text}\n                </TextBlock>\n              </Grid>\n              <Box py=\"2xs\">{input}</Box>\n              {renderAfter}\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Grid>\n  );\n}\n\nconst CDPCreateDepositSidebar = ({\n  cdpParams,\n  selectedIlk,\n  ilkData,\n  collateralizationRatio\n}) => {\n  const { lang } = useLanguage();\n  const currency = selectedIlk.currency;\n  let {\n    annualStabilityFee,\n    collateralDebtAvailable\n  } = ilkData;\n\n  collateralDebtAvailable = collateralDebtAvailable?.toBigNumber();\n\n  const maxDaiAvailableToGenerate = collateralDebtAvailable?.lt(0)\n    ? BigNumber(0)\n    : collateralDebtAvailable;\n\n  let liquidationPriceDisplay = formatter(\n    ilkData.calculateliquidationPrice(\n      currency(cdpParams.gemsToLock || '0'),\n      USDFL(cdpParams.daiToDraw || '0')\n    )\n  );\n  if ([Infinity, 'Infinity'].includes(liquidationPriceDisplay))\n    liquidationPriceDisplay = '0.0000';\n  return (\n    <Grid gridRowGap=\"m\">\n      {[\n        [\n          lang.collateralization,\n          <RatioDisplay\n            key=\"ba\"\n            type={RatioDisplayTypes.TEXT}\n            text={`${formatCollateralizationRatio(\n              collateralizationRatio\n            )} (Min ${formatter(ilkData.liquidationRatio, {\n              percentage: true\n            })}%)`}\n            ratio={formatter(collateralizationRatio)}\n            ilkLiqRatio={formatter(ilkData.liquidationRatio, {\n              percentage: true\n            })}\n            t=\"caption\"\n          />\n        ],\n        [\n          lang.stability_fee,\n          `${formatter(annualStabilityFee, {\n            percentage: true,\n            rounding: BigNumber.ROUND_HALF_UP\n          })}%`\n        ],\n        [\n          lang.cdp_create.max_dai_available_to_generate,\n          `${formatter(maxDaiAvailableToGenerate)} USDFL`\n        ]\n      ].map(([title, value]) => (\n        <Grid gridRowGap=\"xs\" key={title}>\n          <TextBlock\n            style={{ fontSize: '18px', color: getColor('whiteText') }}\n            lineHeight=\"normal\"\n          >\n            {title}\n          </TextBlock>\n          <TextBlock style={{ fontSize: '14px', color: getColor('greyText') }}>\n            {value}\n          </TextBlock>\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nconst CDPCreateDeposit = ({\n  selectedIlk,\n  cdpParams,\n  isFirstVault,\n  hasSufficientAllowance,\n  hasAllowance,\n  collateralTypesData,\n  dispatch,\n  fairDistribAllowToLockValue\n}) => {\n  const { lang } = useLanguage();\n  const { trackBtnClick } = useAnalytics('DepositGenerate', 'VaultCreate');\n\n  const { gemsToLock, daiToDraw } = cdpParams;\n\n  const ilkData = collateralTypesData.find(\n    x => x.symbol === selectedIlk.symbol\n  );\n  const { calculateMaxDai, debtFloor, collateralValueForAmount } = ilkData;\n  const daiAvailable = calculateMaxDai(BigNumber(cdpParams.gemsToLock || '0'));\n\n  const collateralizationRatio = ilkData.calculateCollateralizationRatio(\n    BigNumber(cdpParams.gemsToLock || '0'),\n    USDFL(cdpParams.daiToDraw || '0')\n  );\n\n  function convertAmountToValue(amount) {\n    if (amount == 0) return BigNumber(0);\n    const r = collateralValueForAmount(BigNumber(amount)).toFixed(3);\n\n    if (r) return BigNumber(r);\n\n    return BigNumber(0);\n  }\n\n  const valueToLock = convertAmountToValue(cdpParams.gemsToLock);\n\n  const fairDistribAllow = fairDistribAllowToLockValue(valueToLock);\n\n  function handleInputChange({ target }) {\n    if (parseFloat(target.value) < 0) return;\n    dispatch({\n      type: `form/set-${target.name}`,\n      payload: { value: target.value }\n    });\n  }\n\n  const canProgress =\n    cdpParamsAreValid(\n      cdpParams,\n      selectedIlk.userGemBalance,\n      debtFloor,\n      daiAvailable\n    ) &&\n    hasSufficientAllowance(cdpParams.gemsToLock) &&\n    fairDistribAllow;\n\n  return (\n    <Box\n      maxWidth=\"1040px\"\n      css={`\n        margin: 0 auto;\n      `}\n    >\n      <ScreenHeader\n        title={lang.formatString(\n          lang.cdp_create.deposit_title,\n          selectedIlk.gem\n        )}\n        text={lang.cdp_create.deposit_text}\n      />\n      <Grid\n        gridTemplateColumns={{ s: 'minmax(0, 1fr)', l: '2fr 1fr' }}\n        gridGap=\"m\"\n        my=\"l\"\n      >\n        <Card\n          px={{ s: 'm', m: 'xl' }}\n          py={{ s: 'm', m: 'l' }}\n          style={{\n            backgroundColor: getColor('cardBg'),\n            borderColor: getColor('cardBg'),\n            borderRadius: '13px'\n          }}\n        >\n          <OpenCDPForm\n            cdpParams={cdpParams}\n            handleInputChange={handleInputChange}\n            selectedIlk={selectedIlk}\n            ilkData={ilkData}\n            collateralizationRatio={collateralizationRatio}\n            dispatch={dispatch}\n            fairDistribAllow={fairDistribAllow}\n            convertAmountToValue={convertAmountToValue}\n          />\n        </Card>\n        <Card\n          px={{ s: 'm', m: 'xl' }}\n          py={{ s: 'm', m: 'l' }}\n          style={{\n            backgroundColor: getColor('cardBg'),\n            borderColor: getColor('cardBg'),\n            borderRadius: '13px'\n          }}\n        >\n          <CDPCreateDepositSidebar\n            selectedIlk={selectedIlk}\n            cdpParams={cdpParams}\n            ilkData={ilkData}\n            collateralizationRatio={collateralizationRatio}\n          />\n        </Card>\n      </Grid>\n      <ScreenFooter\n        onNext={() => {\n          trackBtnClick('Next', {\n            lock: gemsToLock,\n            generate: daiToDraw,\n            isFirstVault\n          });\n          dispatch({ type: 'increment-step' });\n        }}\n        onBack={() => {\n          trackBtnClick('Back', { isFirstVault });\n          dispatch({\n            type: 'decrement-step',\n            payload: { by: hasAllowance ? 2 : 1 }\n          });\n        }}\n        canProgress={canProgress}\n      />\n    </Box>\n  );\n};\nexport default CDPCreateDeposit;\n"]},"metadata":{},"sourceType":"module"}