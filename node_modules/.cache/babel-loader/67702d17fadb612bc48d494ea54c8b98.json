{"ast":null,"code":"import _slicedToArray from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/Sidebars/DepositAndGenerate.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { useEffect } from 'react';\nimport { Text, Input, Grid, Button } from '@makerdao/ui-components-core';\nimport { formatCollateralizationRatio, formatter } from 'utils/ui';\nimport useValidatedInput from 'hooks/useValidatedInput';\nimport useMaker from 'hooks/useMaker';\nimport useLanguage from 'hooks/useLanguage';\nimport { greaterThan } from 'utils/bignumber';\nimport useWalletBalances from 'hooks/useWalletBalances';\nimport useTokenAllowance from 'hooks/useTokenAllowance';\nimport Info from './shared/Info';\nimport InfoContainer from './shared/InfoContainer';\nimport { USDFL } from '../../libs/dai-plugin-mcd/src/index.js';\nimport { getCurrency } from 'utils/cdp';\nimport BigNumber from 'bignumber.js';\nimport { decimalRules } from '../../styles/constants';\nimport RatioDisplay, { RatioDisplayTypes } from 'components/RatioDisplay';\nimport { getColor } from '../../styles/theme';\nvar long = decimalRules.long;\nexport function calcDaiAvailable(collateralValue, debtValue, liquidationRatio) {\n  var maxSafeDebtValue = collateralValue.div(liquidationRatio);\n  return debtValue.lt(maxSafeDebtValue) ? USDFL(maxSafeDebtValue.minus(debtValue)) : USDFL(0);\n}\n\nvar DepositAndGenerate = function DepositAndGenerate(_ref) {\n  var _collateralDebtAvaila;\n\n  var vault = _ref.vault,\n      reset = _ref.reset;\n\n  var _useLanguage = useLanguage(),\n      lang = _useLanguage.lang;\n\n  var _useMaker = useMaker(),\n      maker = _useMaker.maker;\n\n  var vaultType = vault.vaultType,\n      debtValue = vault.debtValue,\n      liquidationRatio = vault.liquidationRatio,\n      debtFloor = vault.debtFloor,\n      collateralAmount = vault.collateralAmount,\n      collateralTypePrice = vault.collateralTypePrice,\n      collateralDebtAvailable = vault.collateralDebtAvailable,\n      collateralizationRatio = vault.collateralizationRatio;\n  debtValue = debtValue.toBigNumber().decimalPlaces(18);\n  collateralDebtAvailable = (_collateralDebtAvaila = collateralDebtAvailable) === null || _collateralDebtAvaila === void 0 ? void 0 : _collateralDebtAvaila.toBigNumber();\n  var symbol = collateralAmount === null || collateralAmount === void 0 ? void 0 : collateralAmount.symbol;\n  var gemBalances = useWalletBalances();\n  var gemBalance = gemBalances[symbol] || 0;\n\n  var _useTokenAllowance = useTokenAllowance(symbol),\n      hasSufficientAllowance = _useTokenAllowance.hasSufficientAllowance;\n\n  var dustLimitValidation = function dustLimitValidation(value) {\n    return debtFloor.gt(debtValue.plus(BigNumber(value)));\n  };\n\n  var debtCeilingValidation = function debtCeilingValidation(value) {\n    return greaterThan(value, collateralDebtAvailable);\n  };\n\n  var _useValidatedInput = useValidatedInput('', {\n    maxFloat: gemBalance,\n    minFloat: 0,\n    isFloat: true,\n    custom: {\n      allowanceInvalid: function allowanceInvalid(value) {\n        return !hasSufficientAllowance(value);\n      }\n    }\n  }, {\n    maxFloat: function maxFloat() {\n      return lang.formatString(lang.action_sidebar.insufficient_balance, symbol);\n    },\n    allowanceInvalid: function allowanceInvalid() {\n      return lang.formatString(lang.action_sidebar.invalid_allowance, symbol);\n    }\n  }),\n      _useValidatedInput2 = _slicedToArray(_useValidatedInput, 4),\n      depositAmount = _useValidatedInput2[0],\n      onDepositAmountChange = _useValidatedInput2[2],\n      depositFailureMessage = _useValidatedInput2[3];\n\n  var calculatedCollateralAmount = collateralAmount.plus(!depositAmount ? BigNumber(0) : BigNumber(depositAmount));\n  var calculatedCollateralValue = calculatedCollateralAmount.times(collateralTypePrice);\n  var calculatedDaiAvailable = calcDaiAvailable(calculatedCollateralValue.toBigNumber(), debtValue, liquidationRatio.toBigNumber());\n\n  var _useValidatedInput3 = useValidatedInput('', {\n    maxFloat: formatter(calculatedDaiAvailable),\n    minFloat: 0,\n    isFloat: true,\n    custom: {\n      dustLimit: dustLimitValidation,\n      debtCeiling: debtCeilingValidation\n    }\n  }, {\n    maxFloat: function maxFloat() {\n      return lang.action_sidebar.cdp_below_threshold;\n    },\n    dustLimit: function dustLimit() {\n      return lang.formatString(lang.cdp_create.below_dust_limit, formatter(debtFloor));\n    },\n    debtCeiling: function debtCeiling() {\n      return lang.formatString(lang.action_sidebar.generate_threshold, formatter(collateralDebtAvailable));\n    }\n  }),\n      _useValidatedInput4 = _slicedToArray(_useValidatedInput3, 4),\n      generateAmount = _useValidatedInput4[0],\n      onGenerateAmountChange = _useValidatedInput4[2],\n      generateFailureMessage = _useValidatedInput4[3];\n\n  useEffect(function () {\n    var e = {\n      target: {\n        value: generateAmount\n      }\n    };\n    onGenerateAmountChange(e); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [depositAmount]);\n  var calculatedDebtValue = debtValue.plus(!generateAmount ? BigNumber(0) : BigNumber(generateAmount));\n  var calculatedCollateralizationRatio = vault.calculateCollateralizationRatio({\n    collateralValue: calculatedCollateralValue,\n    debtValue: calculatedDebtValue\n  });\n\n  var depositAndGenerate = function depositAndGenerate() {\n    var currency = getCurrency({\n      ilk: vaultType\n    });\n    maker.service('mcd:cdpManager').lockAndDraw(vault.id, vaultType, currency(depositAmount), USDFL(generateAmount));\n    reset();\n  };\n\n  var actionDisabled = !depositAmount || !generateAmount || depositFailureMessage || generateFailureMessage;\n  return /*#__PURE__*/React.createElement(Grid, {\n    gridRowGap: \"m\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    gridRowGap: \"s\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Text.h4, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, lang.action_sidebar.deposit_and_generate_title), /*#__PURE__*/React.createElement(Text, {\n    t: \"body\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, lang.formatString(lang.action_sidebar.deposit_description, symbol)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input_border\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    style: {\n      color: getColor('whiteText')\n    },\n    type: \"number\",\n    min: \"0\",\n    value: depositAmount,\n    onChange: onDepositAmountChange,\n    placeholder: \"0.00 \".concat(symbol),\n    failureMessage: depositFailureMessage,\n    \"data-testid\": \"deposit-input\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Text.p, {\n    t: \"body\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  }, lang.action_sidebar.generate_description), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input_border\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"number\",\n    value: generateAmount,\n    min: \"0\",\n    onChange: onGenerateAmountChange,\n    placeholder: \"0.00 USDFL\",\n    failureMessage: generateFailureMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    gridTemplateColumns: \"1fr 1fr\",\n    gridColumnGap: \"s\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"btn\",\n    disabled: actionDisabled,\n    onClick: depositAndGenerate,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, lang.actions.generate), /*#__PURE__*/React.createElement(Button, {\n    className: \"btn\",\n    variant: \"secondary-outline\",\n    onClick: reset,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }\n  }, lang.cancel)), /*#__PURE__*/React.createElement(InfoContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Info, {\n    title: lang.action_sidebar.current_account_balance,\n    body: \"\".concat(formatter(gemBalance, {\n      precision: long\n    }), \" \").concat(symbol),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Info, {\n    title: lang.formatString(lang.action_sidebar.gem_usd_price_feed, symbol),\n    body: \"\".concat(formatter(collateralTypePrice), \" USD/\").concat(symbol),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Info, {\n    title: lang.action_sidebar.maximum_available_to_generate,\n    body: \"\".concat(formatter(calculatedDaiAvailable, {\n      precision: long\n    }), \" USDFL\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Info, {\n    title: lang.action_sidebar.new_collateralization_ratio,\n    body: /*#__PURE__*/React.createElement(RatioDisplay, {\n      type: RatioDisplayTypes.TEXT,\n      ratio: formatter(calculatedCollateralizationRatio, {\n        infinity: collateralizationRatio\n      }),\n      ilkLiqRatio: formatter(liquidationRatio, {\n        percentage: true\n      }),\n      text: formatCollateralizationRatio(calculatedCollateralizationRatio),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }\n  })));\n};\n\n__signature__(DepositAndGenerate, \"useLanguage{{ lang }}\\nuseMaker{{ maker }}\\nuseWalletBalances{gemBalances}\\nuseTokenAllowance{{ hasSufficientAllowance }}\\nuseValidatedInput{[\\n    depositAmount,\\n    ,\\n    onDepositAmountChange,\\n    depositFailureMessage\\n  ]}\\nuseValidatedInput{[\\n    generateAmount,\\n    ,\\n    onGenerateAmountChange,\\n    generateFailureMessage\\n  ]}\\nuseEffect{}\", function () {\n  return [useLanguage, useMaker, useWalletBalances, useTokenAllowance, useValidatedInput, useValidatedInput];\n});\n\nvar _default = DepositAndGenerate;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(long, \"long\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/Sidebars/DepositAndGenerate.js\");\n  reactHotLoader.register(calcDaiAvailable, \"calcDaiAvailable\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/Sidebars/DepositAndGenerate.js\");\n  reactHotLoader.register(DepositAndGenerate, \"DepositAndGenerate\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/Sidebars/DepositAndGenerate.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/Sidebars/DepositAndGenerate.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/Sidebars/DepositAndGenerate.js"],"names":["React","useEffect","Text","Input","Grid","Button","formatCollateralizationRatio","formatter","useValidatedInput","useMaker","useLanguage","greaterThan","useWalletBalances","useTokenAllowance","Info","InfoContainer","USDFL","getCurrency","BigNumber","decimalRules","RatioDisplay","RatioDisplayTypes","getColor","long","calcDaiAvailable","collateralValue","debtValue","liquidationRatio","maxSafeDebtValue","div","lt","minus","DepositAndGenerate","vault","reset","lang","maker","vaultType","debtFloor","collateralAmount","collateralTypePrice","collateralDebtAvailable","collateralizationRatio","toBigNumber","decimalPlaces","symbol","gemBalances","gemBalance","hasSufficientAllowance","dustLimitValidation","value","gt","plus","debtCeilingValidation","maxFloat","minFloat","isFloat","custom","allowanceInvalid","formatString","action_sidebar","insufficient_balance","invalid_allowance","depositAmount","onDepositAmountChange","depositFailureMessage","calculatedCollateralAmount","calculatedCollateralValue","times","calculatedDaiAvailable","dustLimit","debtCeiling","cdp_below_threshold","cdp_create","below_dust_limit","generate_threshold","generateAmount","onGenerateAmountChange","generateFailureMessage","e","target","calculatedDebtValue","calculatedCollateralizationRatio","calculateCollateralizationRatio","depositAndGenerate","currency","ilk","service","lockAndDraw","id","actionDisabled","deposit_and_generate_title","deposit_description","color","generate_description","actions","generate","cancel","current_account_balance","precision","gem_usd_price_feed","maximum_available_to_generate","new_collateralization_ratio","TEXT","infinity","percentage"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { Text, Input, Grid, Button } from '@makerdao/ui-components-core';\nimport { formatCollateralizationRatio, formatter } from 'utils/ui';\nimport useValidatedInput from 'hooks/useValidatedInput';\nimport useMaker from 'hooks/useMaker';\nimport useLanguage from 'hooks/useLanguage';\nimport { greaterThan } from 'utils/bignumber';\nimport useWalletBalances from 'hooks/useWalletBalances';\nimport useTokenAllowance from 'hooks/useTokenAllowance';\nimport Info from './shared/Info';\nimport InfoContainer from './shared/InfoContainer';\nimport { USDFL } from '../../libs/dai-plugin-mcd/src/index.js';\nimport { getCurrency } from 'utils/cdp';\nimport BigNumber from 'bignumber.js';\nimport { decimalRules } from '../../styles/constants';\nimport RatioDisplay, { RatioDisplayTypes } from 'components/RatioDisplay';\nimport { getColor } from '../../styles/theme';\n\nconst { long } = decimalRules;\n\nexport function calcDaiAvailable(collateralValue, debtValue, liquidationRatio) {\n  const maxSafeDebtValue = collateralValue.div(liquidationRatio);\n  return debtValue.lt(maxSafeDebtValue)\n    ? USDFL(maxSafeDebtValue.minus(debtValue))\n    : USDFL(0);\n}\n\nconst DepositAndGenerate = ({ vault, reset }) => {\n  const { lang } = useLanguage();\n  const { maker } = useMaker();\n  let {\n    vaultType,\n    debtValue,\n    liquidationRatio,\n    debtFloor,\n    collateralAmount,\n    collateralTypePrice,\n    collateralDebtAvailable,\n    collateralizationRatio\n  } = vault;\n  debtValue = debtValue.toBigNumber().decimalPlaces(18);\n  collateralDebtAvailable = collateralDebtAvailable?.toBigNumber();\n\n  const symbol = collateralAmount?.symbol;\n  const gemBalances = useWalletBalances();\n  const gemBalance = gemBalances[symbol] || 0;\n  const { hasSufficientAllowance } = useTokenAllowance(symbol);\n\n  const dustLimitValidation = value =>\n    debtFloor.gt(debtValue.plus(BigNumber(value)));\n\n  const debtCeilingValidation = value =>\n    greaterThan(value, collateralDebtAvailable);\n\n  const [\n    depositAmount,\n    ,\n    onDepositAmountChange,\n    depositFailureMessage\n  ] = useValidatedInput(\n    '',\n    {\n      maxFloat: gemBalance,\n      minFloat: 0,\n      isFloat: true,\n      custom: {\n        allowanceInvalid: value => !hasSufficientAllowance(value)\n      }\n    },\n    {\n      maxFloat: () =>\n        lang.formatString(lang.action_sidebar.insufficient_balance, symbol),\n      allowanceInvalid: () =>\n        lang.formatString(lang.action_sidebar.invalid_allowance, symbol)\n    }\n  );\n\n  const calculatedCollateralAmount = collateralAmount.plus(\n    !depositAmount ? BigNumber(0) : BigNumber(depositAmount)\n  );\n  const calculatedCollateralValue = calculatedCollateralAmount.times(\n    collateralTypePrice\n  );\n  const calculatedDaiAvailable = calcDaiAvailable(\n    calculatedCollateralValue.toBigNumber(),\n    debtValue,\n    liquidationRatio.toBigNumber()\n  );\n\n  const [\n    generateAmount,\n    ,\n    onGenerateAmountChange,\n    generateFailureMessage\n  ] = useValidatedInput(\n    '',\n    {\n      maxFloat: formatter(calculatedDaiAvailable),\n      minFloat: 0,\n      isFloat: true,\n      custom: {\n        dustLimit: dustLimitValidation,\n        debtCeiling: debtCeilingValidation\n      }\n    },\n    {\n      maxFloat: () => lang.action_sidebar.cdp_below_threshold,\n      dustLimit: () =>\n        lang.formatString(\n          lang.cdp_create.below_dust_limit,\n          formatter(debtFloor)\n        ),\n      debtCeiling: () =>\n        lang.formatString(\n          lang.action_sidebar.generate_threshold,\n          formatter(collateralDebtAvailable)\n        )\n    }\n  );\n\n  useEffect(() => {\n    let e = { target: { value: generateAmount } };\n    onGenerateAmountChange(e);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [depositAmount]);\n\n  const calculatedDebtValue = debtValue.plus(\n    !generateAmount ? BigNumber(0) : BigNumber(generateAmount)\n  );\n\n  const calculatedCollateralizationRatio = vault.calculateCollateralizationRatio(\n    {\n      collateralValue: calculatedCollateralValue,\n      debtValue: calculatedDebtValue\n    }\n  );\n\n  const depositAndGenerate = () => {\n    const currency = getCurrency({ ilk: vaultType });\n    maker\n      .service('mcd:cdpManager')\n      .lockAndDraw(\n        vault.id,\n        vaultType,\n        currency(depositAmount),\n        USDFL(generateAmount)\n      );\n    reset();\n  };\n\n  const actionDisabled =\n    !depositAmount ||\n    !generateAmount ||\n    depositFailureMessage ||\n    generateFailureMessage;\n\n  return (\n    <Grid gridRowGap=\"m\">\n      <Grid gridRowGap=\"s\">\n        <Text.h4>{lang.action_sidebar.deposit_and_generate_title}</Text.h4>\n        <Text t=\"body\">\n          {lang.formatString(lang.action_sidebar.deposit_description, symbol)}\n        </Text>\n        <div className=\"input_border\">\n        <Input\n          style={{ color: getColor('whiteText') }}\n          type=\"number\"\n          min=\"0\"\n          value={depositAmount}\n          onChange={onDepositAmountChange}\n          placeholder={`0.00 ${symbol}`}\n          failureMessage={depositFailureMessage}\n          data-testid=\"deposit-input\"\n        />\n        </div>\n        <Text.p t=\"body\">{lang.action_sidebar.generate_description}</Text.p>\n        <div className=\"input_border\">\n        <Input\n          type=\"number\"\n          value={generateAmount}\n          min=\"0\"\n          onChange={onGenerateAmountChange}\n          placeholder=\"0.00 USDFL\"\n          failureMessage={generateFailureMessage}\n        />\n        </div>\n      </Grid>\n      <Grid gridTemplateColumns=\"1fr 1fr\" gridColumnGap=\"s\">\n        <Button className=\"btn\" disabled={actionDisabled} onClick={depositAndGenerate}>\n          {lang.actions.generate}\n        </Button>\n        <Button  className=\"btn\" variant=\"secondary-outline\" onClick={reset}>\n          {lang.cancel}\n        </Button>\n      </Grid>\n      <InfoContainer>\n        <Info\n          title={lang.action_sidebar.current_account_balance}\n          body={`${formatter(gemBalance, { precision: long })} ${symbol}`}\n        />\n        <Info\n          title={lang.formatString(\n            lang.action_sidebar.gem_usd_price_feed,\n            symbol\n          )}\n          body={`${formatter(collateralTypePrice)} USD/${symbol}`}\n        />\n        <Info\n          title={lang.action_sidebar.maximum_available_to_generate}\n          body={`${formatter(calculatedDaiAvailable, {\n            precision: long\n          })} USDFL`}\n        />\n        <Info\n          title={lang.action_sidebar.new_collateralization_ratio}\n          body={\n            <RatioDisplay\n              type={RatioDisplayTypes.TEXT}\n              ratio={formatter(calculatedCollateralizationRatio, {\n                infinity: collateralizationRatio\n              })}\n              ilkLiqRatio={formatter(liquidationRatio, { percentage: true })}\n              text={formatCollateralizationRatio(\n                calculatedCollateralizationRatio\n              )}\n            />\n          }\n        />\n      </InfoContainer>\n    </Grid>\n  );\n};\n\nexport default DepositAndGenerate;\n"]},"metadata":{},"sourceType":"module"}