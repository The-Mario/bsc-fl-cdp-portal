{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport BigNumber from 'bignumber.js';\nimport { utils as ethersUtils } from 'ethers';\nimport assert from 'assert';\nexport function numberToBytes32(num) {\n  var bn = ethersUtils.bigNumberify(num);\n  return ethersUtils.hexlify(ethersUtils.padZeros(bn, 32));\n}\nexport function bytes32ToNumber(bytes32) {\n  return ethersUtils.bigNumberify(bytes32).toNumber();\n}\nexport function stringToBytes32(text) {\n  var pad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var data = ethersUtils.toUtf8Bytes(text);\n\n  if (data.length > 32) {\n    throw new Error('too long');\n  }\n\n  if (pad) data = ethersUtils.padZeros(data, 32);\n  return ethersUtils.hexlify(data);\n}\nexport function stringToBytes(str) {\n  assert(!!str, 'argument is falsy');\n  assert(typeof str === 'string', 'argument is not a string');\n  return '0x' + Buffer.from(str).toString('hex');\n}\nexport function bytesToString(hex) {\n  return Buffer.from(hex.replace(/^0x/, ''), 'hex').toString().replace(/\\x00/g, ''); // eslint-disable-line no-control-regex\n}\nexport function padRight(string, chars, sign) {\n  return string + new Array(chars - string.length + 1).join(sign ? sign : '0');\n}\nexport function toHex(str) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$with0x = _ref.with0x,\n      with0x = _ref$with0x === void 0 ? true : _ref$with0x,\n      _ref$rightPadding = _ref.rightPadding,\n      rightPadding = _ref$rightPadding === void 0 ? 64 : _ref$rightPadding;\n\n  var result = '';\n\n  for (var i = 0; i < str.length; i++) {\n    result += str.charCodeAt(i).toString(16);\n  }\n\n  if (rightPadding > 0) result = padRight(result, rightPadding);\n  return with0x ? '0x' + result : result;\n}\nexport function fromWei(value) {\n  return BigNumber(value).shiftedBy(-18);\n}\nexport function fromRay(value) {\n  return BigNumber(value).shiftedBy(-27);\n}\nexport function fromRad(value) {\n  return BigNumber(value).shiftedBy(-45);\n}\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(numberToBytes32, \"numberToBytes32\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/utils/conversion.js\");\n  reactHotLoader.register(bytes32ToNumber, \"bytes32ToNumber\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/utils/conversion.js\");\n  reactHotLoader.register(stringToBytes32, \"stringToBytes32\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/utils/conversion.js\");\n  reactHotLoader.register(stringToBytes, \"stringToBytes\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/utils/conversion.js\");\n  reactHotLoader.register(bytesToString, \"bytesToString\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/utils/conversion.js\");\n  reactHotLoader.register(padRight, \"padRight\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/utils/conversion.js\");\n  reactHotLoader.register(toHex, \"toHex\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/utils/conversion.js\");\n  reactHotLoader.register(fromWei, \"fromWei\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/utils/conversion.js\");\n  reactHotLoader.register(fromRay, \"fromRay\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/utils/conversion.js\");\n  reactHotLoader.register(fromRad, \"fromRad\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/utils/conversion.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/utils/conversion.js"],"names":["BigNumber","utils","ethersUtils","assert","numberToBytes32","num","bn","bigNumberify","hexlify","padZeros","bytes32ToNumber","bytes32","toNumber","stringToBytes32","text","pad","data","toUtf8Bytes","length","Error","stringToBytes","str","Buffer","from","toString","bytesToString","hex","replace","padRight","string","chars","sign","Array","join","toHex","with0x","rightPadding","result","i","charCodeAt","fromWei","value","shiftedBy","fromRay","fromRad"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js';\nimport { utils as ethersUtils } from 'ethers';\nimport assert from 'assert';\n\nexport function numberToBytes32(num) {\n  const bn = ethersUtils.bigNumberify(num);\n  return ethersUtils.hexlify(ethersUtils.padZeros(bn, 32));\n}\n\nexport function bytes32ToNumber(bytes32) {\n  return ethersUtils.bigNumberify(bytes32).toNumber();\n}\n\nexport function stringToBytes32(text, pad = true) {\n  var data = ethersUtils.toUtf8Bytes(text);\n  if (data.length > 32) {\n    throw new Error('too long');\n  }\n  if (pad) data = ethersUtils.padZeros(data, 32);\n  return ethersUtils.hexlify(data);\n}\n\nexport function stringToBytes(str) {\n  assert(!!str, 'argument is falsy');\n  assert(typeof str === 'string', 'argument is not a string');\n  return '0x' + Buffer.from(str).toString('hex');\n}\n\nexport function bytesToString(hex) {\n  return Buffer.from(hex.replace(/^0x/, ''), 'hex')\n    .toString()\n    .replace(/\\x00/g, ''); // eslint-disable-line no-control-regex\n}\nexport function padRight(string, chars, sign) {\n  return string + new Array(chars - string.length + 1).join(sign ? sign : '0');\n}\n\nexport function toHex(str, { with0x = true, rightPadding = 64 } = {}) {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str.charCodeAt(i).toString(16);\n  }\n  if (rightPadding > 0) result = padRight(result, rightPadding);\n  return with0x ? '0x' + result : result;\n}\n\nexport function fromWei(value) {\n  return BigNumber(value).shiftedBy(-18);\n}\n\nexport function fromRay(value) {\n  return BigNumber(value).shiftedBy(-27);\n}\n\nexport function fromRad(value) {\n  return BigNumber(value).shiftedBy(-45);\n}\n"]},"metadata":{},"sourceType":"module"}