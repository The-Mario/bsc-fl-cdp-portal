{"ast":null,"code":"import _defineProperty from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/providers/ToggleProvider.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { createContext, useReducer } from 'react';\nvar ToggleStateContext = createContext({});\n\nfunction ToggleProvider(_ref) {\n  var children = _ref.children;\n\n  var _useReducer = useReducer(function (prevState, _ref2) {\n    var id = _ref2.id,\n        state = _ref2.state;\n    return _objectSpread({}, prevState, _defineProperty({}, id, !!state));\n  }, {}),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      toggleState = _useReducer2[0],\n      updateToggleState = _useReducer2[1];\n\n  return /*#__PURE__*/React.createElement(ToggleStateContext.Provider, {\n    value: {\n      toggleState: toggleState,\n      updateToggleState: updateToggleState\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, children);\n}\n\n__signature__(ToggleProvider, \"useReducer{[toggleState, updateToggleState]({})}\");\n\nexport { ToggleStateContext, ToggleProvider };\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(ToggleStateContext, \"ToggleStateContext\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/providers/ToggleProvider.js\");\n  reactHotLoader.register(ToggleProvider, \"ToggleProvider\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/providers/ToggleProvider.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/providers/ToggleProvider.js"],"names":["React","createContext","useReducer","ToggleStateContext","ToggleProvider","children","prevState","id","state","toggleState","updateToggleState"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AAEA,IAAMC,kBAAkB,GAAGF,aAAa,CAAC,EAAD,CAAxC;;AAEA,SAASG,cAAT,OAAsC;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AAAA,oBACKH,UAAU,CACjD,UAACI,SAAD;AAAA,QAAcC,EAAd,SAAcA,EAAd;AAAA,QAAkBC,KAAlB,SAAkBA,KAAlB;AAAA,6BAAoCF,SAApC,sBAAgDC,EAAhD,EAAqD,CAAC,CAACC,KAAvD;AAAA,GADiD,EAEjD,EAFiD,CADf;AAAA;AAAA,MAC7BC,WAD6B;AAAA,MAChBC,iBADgB;;AAMpC,sBACE,oBAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAE;AAAED,MAAAA,WAAW,EAAXA,WAAF;AAAeC,MAAAA,iBAAiB,EAAjBA;AAAf,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,QADH,CADF;AAKD;;cAXQD,c;;AAaT,SAASD,kBAAT,EAA6BC,cAA7B;;;;;;;;;;0BAfMD,kB;0BAEGC,c","sourcesContent":["import React, { createContext, useReducer } from 'react';\n\nconst ToggleStateContext = createContext({});\n\nfunction ToggleProvider({ children }) {\n  const [toggleState, updateToggleState] = useReducer(\n    (prevState, { id, state }) => ({ ...prevState, [id]: !!state }),\n    {}\n  );\n\n  return (\n    <ToggleStateContext.Provider value={{ toggleState, updateToggleState }}>\n      {children}\n    </ToggleStateContext.Provider>\n  );\n}\n\nexport { ToggleStateContext, ToggleProvider };\n"]},"metadata":{},"sourceType":"module"}