{"ast":null,"code":"import _regeneratorRuntime from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { PublicService } from '@makerdao/services-core';\nimport CdpType from './CdpType';\nimport { ServiceRoles } from './constants';\nimport assert from 'assert';\nimport * as math from './math';\nvar CDP_TYPE = ServiceRoles.CDP_TYPE,\n    SYSTEM_DATA = ServiceRoles.SYSTEM_DATA;\n\nvar CdpTypeService = /*#__PURE__*/function (_PublicService) {\n  _inherits(CdpTypeService, _PublicService);\n\n  var _super = _createSuper(CdpTypeService);\n\n  function CdpTypeService() {\n    var _this;\n\n    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : CDP_TYPE;\n\n    _classCallCheck(this, CdpTypeService);\n\n    _this = _super.call(this, name, [SYSTEM_DATA]);\n    _this.reset = _this.resetAllCdpTypes;\n    return _this;\n  }\n\n  _createClass(CdpTypeService, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this2 = this;\n\n      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.settings = settings;\n      this.cdpTypes = (settings.cdpTypes || []).map(function (cdpType) {\n        return new CdpType(_this2, cdpType, {\n          prefetch: settings.prefetch\n        });\n      });\n    }\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.settings.prefetch) {\n                  _context.next = 3;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.prefetchAllCdpTypes();\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function connect() {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: \"getCdpType\",\n    value: function getCdpType(currency, ilk) {\n      var types = this.cdpTypes.filter(function (t) {\n        return (!currency || t.currency.symbol === currency.symbol) && (!ilk || ilk === t.ilk);\n      });\n      if (types.length === 1) return types[0];\n      var label = [currency && \"currency \".concat(currency.symbol), ilk && \"ilk \".concat(ilk)].filter(function (x) {\n        return x;\n      }).join(', ');\n      assert(types.length <= 1, \"\".concat(label, \" matches more than one cdp type\"));\n      assert(types.length > 0, \"\".concat(label, \" matches no cdp type\"));\n    }\n  }, {\n    key: \"resetAllCdpTypes\",\n    value: function resetAllCdpTypes() {\n      this.cdpTypes.forEach(function (type) {\n        return type.reset();\n      });\n    }\n  }, {\n    key: \"prefetchAllCdpTypes\",\n    value: function () {\n      var _prefetchAllCdpTypes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Promise.all(this.cdpTypes.map(function (type) {\n                  return type.prefetch();\n                }));\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function prefetchAllCdpTypes() {\n        return _prefetchAllCdpTypes.apply(this, arguments);\n      }\n\n      return prefetchAllCdpTypes;\n    }() //--system-wide functions\n    //these functions should probably be moved to the system data service, but need to resolve circular dependency between cdpTypeService and SystemDataService first\n    //this should equal the total dai supply as long as we account for all cdpTypes/ilks\n\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }, {\n    key: \"totalDebtAllCdpTypes\",\n    get: function get() {\n      var debts = this.cdpTypes.map(function (ilk) {\n        return ilk.totalDebt;\n      });\n      return debts.reduce(function (a, b) {\n        return a.plus(b);\n      });\n    }\n  }, {\n    key: \"totalCollateralValueAllCdpTypes\",\n    get: function get() {\n      var collateralValues = this.cdpTypes.map(function (ilk) {\n        return ilk.totalCollateral.times(ilk.price);\n      });\n      return collateralValues.reduce(function (a, b) {\n        return a.plus(b);\n      });\n    }\n  }, {\n    key: \"totalCollateralizationRatioAllCdpTypes\",\n    get: function get() {\n      return math.collateralizationRatio(this.totalCollateralValueAllCdpTypes, this.totalDebtAllCdpTypes);\n    }\n  }]);\n\n  return CdpTypeService;\n}(PublicService);\n\nexport { CdpTypeService as default };\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(CDP_TYPE, \"CDP_TYPE\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/CdpTypeService.js\");\n  reactHotLoader.register(SYSTEM_DATA, \"SYSTEM_DATA\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/CdpTypeService.js\");\n  reactHotLoader.register(CdpTypeService, \"CdpTypeService\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/CdpTypeService.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/CdpTypeService.js"],"names":["PublicService","CdpType","ServiceRoles","assert","math","CDP_TYPE","SYSTEM_DATA","CdpTypeService","name","reset","resetAllCdpTypes","settings","cdpTypes","map","cdpType","prefetch","prefetchAllCdpTypes","currency","ilk","types","filter","t","symbol","length","label","x","join","forEach","type","Promise","all","debts","totalDebt","reduce","a","b","plus","collateralValues","totalCollateral","times","price","collateralizationRatio","totalCollateralValueAllCdpTypes","totalDebtAllCdpTypes"],"mappings":"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","sourcesContent":["import { PublicService } from '@makerdao/services-core';\nimport CdpType from './CdpType';\nimport { ServiceRoles } from './constants';\nimport assert from 'assert';\nimport * as math from './math';\nconst { CDP_TYPE, SYSTEM_DATA } = ServiceRoles;\n\nexport default class CdpTypeService extends PublicService {\n  constructor(name = CDP_TYPE) {\n    super(name, [SYSTEM_DATA]);\n    this.reset = this.resetAllCdpTypes;\n  }\n\n  initialize(settings = {}) {\n    this.settings = settings;\n    this.cdpTypes = (settings.cdpTypes || []).map(\n      cdpType => new CdpType(this, cdpType, { prefetch: settings.prefetch })\n    );\n  }\n\n  async connect() {\n    if (this.settings.prefetch) await this.prefetchAllCdpTypes();\n  }\n\n  getCdpType(currency, ilk) {\n    const types = this.cdpTypes.filter(\n      t =>\n        (!currency || t.currency.symbol === currency.symbol) &&\n        (!ilk || ilk === t.ilk)\n    );\n    if (types.length === 1) return types[0];\n\n    const label = [\n      currency && `currency ${currency.symbol}`,\n      ilk && `ilk ${ilk}`\n    ]\n      .filter(x => x)\n      .join(', ');\n\n    assert(types.length <= 1, `${label} matches more than one cdp type`);\n    assert(types.length > 0, `${label} matches no cdp type`);\n  }\n\n  resetAllCdpTypes() {\n    this.cdpTypes.forEach(type => type.reset());\n  }\n\n  async prefetchAllCdpTypes() {\n    await Promise.all(this.cdpTypes.map(type => type.prefetch()));\n  }\n\n  //--system-wide functions\n  //these functions should probably be moved to the system data service, but need to resolve circular dependency between cdpTypeService and SystemDataService first\n\n  //this should equal the total dai supply as long as we account for all cdpTypes/ilks\n  get totalDebtAllCdpTypes() {\n    const debts = this.cdpTypes.map(ilk => {\n      return ilk.totalDebt;\n    });\n    return debts.reduce((a, b) => a.plus(b));\n  }\n\n  get totalCollateralValueAllCdpTypes() {\n    const collateralValues = this.cdpTypes.map(ilk => {\n      return ilk.totalCollateral.times(ilk.price);\n    });\n    return collateralValues.reduce((a, b) => a.plus(b));\n  }\n\n  get totalCollateralizationRatioAllCdpTypes() {\n    return math.collateralizationRatio(\n      this.totalCollateralValueAllCdpTypes,\n      this.totalDebtAllCdpTypes\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}