{"ast":null,"code":"import _slicedToArray from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/Sidebars/Withdraw.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React from 'react';\nimport BigNumber from 'bignumber.js';\nimport { USDFL } from '../../libs/dai-plugin-mcd/src/index.js';\nimport { Text, Input, Grid, Button } from '@makerdao/ui-components-core';\nimport Info from './shared/Info';\nimport InfoContainer from './shared/InfoContainer';\nimport SetMax from 'components/SetMax';\nimport RatioDisplay, { RatioDisplayTypes } from 'components/RatioDisplay';\nimport useMaker from 'hooks/useMaker';\nimport useLanguage from 'hooks/useLanguage';\nimport useAnalytics from 'hooks/useAnalytics';\nimport useValidatedInput from 'hooks/useValidatedInput';\nimport { multiply } from 'utils/bignumber';\nimport { formatCollateralizationRatio, formatter } from 'utils/ui';\nimport { getCurrency } from 'utils/cdp';\nimport { decimalRules } from '../../styles/constants';\nimport { getColor } from '../../styles/theme';\nvar short = decimalRules.short;\n\nvar Withdraw = function Withdraw(_ref) {\n  var vault = _ref.vault,\n      reset = _ref.reset;\n\n  var _useAnalytics = useAnalytics('Withdraw', 'Sidebar'),\n      trackBtnClick = _useAnalytics.trackBtnClick;\n\n  var _useLanguage = useLanguage(),\n      lang = _useLanguage.lang;\n\n  var _useMaker = useMaker(),\n      maker = _useMaker.maker;\n\n  var vaultType = vault.vaultType,\n      liquidationRatio = vault.liquidationRatio,\n      collateralAvailableAmount = vault.collateralAvailableAmount,\n      collateralTypePrice = vault.collateralTypePrice,\n      collateralAmount = vault.collateralAmount,\n      collateralValue = vault.collateralValue,\n      collateralValueForAmount = vault.collateralValueForAmount,\n      collateralAmountByValue = vault.collateralAmountByValue,\n      debtAmount = vault.encumberedDebt;\n  BigNumber.set({\n    ROUNDING_MODE: BigNumber.ROUND_DOWN\n  });\n  collateralAvailableAmount = collateralAvailableAmount.toBigNumber();\n  collateralValue = collateralValue.toBigNumber();\n\n  function convertAmountToValue(amount) {\n    if (amount === 0) return BigNumber(0);\n    var r = collateralValueForAmount(BigNumber(amount));\n    if (r === undefined) return BigNumber(0);\n    return r;\n  }\n\n  function convertValueToAmount(value) {\n    if (value === 0) return BigNumber(0);\n    var r = collateralAmountByValue(BigNumber(value));\n    if (r === undefined) return BigNumber(0);\n    return r;\n  }\n\n  var symbol = collateralAmount === null || collateralAmount === void 0 ? void 0 : collateralAmount.symbol;\n  var collateralAvailableValue = convertAmountToValue(collateralAvailableAmount);\n\n  var _useValidatedInput = useValidatedInput('', {\n    maxFloat: collateralAvailableValue,\n    minFloat: 0,\n    isFloat: true\n  }, {\n    maxFloat: function maxFloat() {\n      return lang.action_sidebar.cdp_below_threshold;\n    }\n  }),\n      _useValidatedInput2 = _slicedToArray(_useValidatedInput, 4),\n      value = _useValidatedInput2[0],\n      setAmount = _useValidatedInput2[1],\n      onAmountChange = _useValidatedInput2[2],\n      amountErrors = _useValidatedInput2[3];\n\n  var valueToWithdraw = value || BigNumber(0);\n  var amountToWithdraw = convertValueToAmount(valueToWithdraw);\n\n  var setMax = function setMax() {\n    return setAmount(formatter(collateralAvailableValue));\n  };\n\n  var currency = getCurrency({\n    ilk: vaultType\n  });\n\n  var withdraw = function withdraw() {\n    var d = amountToWithdraw.dividedBy(collateralAvailableAmount).minus(BigNumber(1.0)).absoluteValue();\n    var val = d.lt(BigNumber(0.001)) ? collateralAvailableAmount : amountToWithdraw;\n    maker.service('mcd:cdpManager').wipeAndFree(vault.id, vaultType, USDFL(0), currency(val));\n    reset();\n  };\n\n  var valueDiff = multiply(amountToWithdraw, collateralTypePrice.toNumber());\n  var collateralizationRatio = vault.calculateCollateralizationRatio({\n    collateralValue: collateralValue.minus(valueDiff).gte(0) ? currency(collateralValue.minus(valueDiff)) : currency(0)\n  });\n  return /*#__PURE__*/React.createElement(Grid, {\n    gridRowGap: \"m\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    gridRowGap: \"s\",\n    className: \"input_des\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    style: {\n      fontSize: '20px',\n      color: getColor('whiteText')\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, lang.formatString(lang.action_sidebar.withdraw_title, symbol)), /*#__PURE__*/React.createElement(Text, {\n    style: {\n      fontSize: '16px',\n      color: getColor('greyText')\n    },\n    t: \"body\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, lang.formatString(lang.action_sidebar.withdraw_description, symbol)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input_border\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    style: {\n      color: getColor('whiteText')\n    },\n    type: \"number\",\n    placeholder: \"0.00 USD\",\n    value: value,\n    min: \"0\",\n    onChange: onAmountChange,\n    after: parseFloat(debtAmount) === 0 ? /*#__PURE__*/React.createElement(SetMax, {\n      style: {\n        color: getColor('greyText')\n      },\n      onClick: function onClick() {\n        setMax();\n        trackBtnClick('SetMax', {\n          collateralAvailableAmount: collateralAvailableAmount.toString(),\n          setMax: true\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }) : null,\n    failureMessage: amountErrors,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    gridTemplateColumns: \"1fr 1fr\",\n    gridColumnGap: \"s\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"btn\",\n    disabled: !value || amountErrors,\n    onClick: function onClick() {\n      trackBtnClick('Confirm', {\n        value: value,\n        fathom: {\n          id: \"\".concat(symbol, \"VaultWithdraw\"),\n          value: value\n        }\n      });\n      withdraw();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, lang.actions.withdraw), /*#__PURE__*/React.createElement(Button, {\n    className: \"btn\",\n    variant: \"secondary-outline\",\n    onClick: function onClick() {\n      trackBtnClick('Cancel');\n      reset();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, lang.cancel)), /*#__PURE__*/React.createElement(InfoContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Info, {\n    title: lang.action_sidebar.maximum_available_to_withdraw,\n    body: \"\".concat(formatter(collateralAvailableValue, {\n      precision: short\n    }), \" USD\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Info, {\n    title: lang.action_sidebar.new_collateralization_ratio,\n    body: /*#__PURE__*/React.createElement(RatioDisplay, {\n      type: RatioDisplayTypes.TEXT,\n      ratio: formatter(collateralizationRatio),\n      ilkLiqRatio: formatter(liquidationRatio, {\n        percentage: true\n      }),\n      text: formatCollateralizationRatio(collateralizationRatio),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  })));\n};\n\n__signature__(Withdraw, \"useAnalytics{{ trackBtnClick }}\\nuseLanguage{{ lang }}\\nuseMaker{{ maker }}\\nuseValidatedInput{[value, setAmount, onAmountChange, amountErrors]}\", function () {\n  return [useAnalytics, useLanguage, useMaker, useValidatedInput];\n});\n\nvar _default = Withdraw;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(short, \"short\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/Sidebars/Withdraw.js\");\n  reactHotLoader.register(Withdraw, \"Withdraw\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/Sidebars/Withdraw.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/Sidebars/Withdraw.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/Sidebars/Withdraw.js"],"names":["React","BigNumber","USDFL","Text","Input","Grid","Button","Info","InfoContainer","SetMax","RatioDisplay","RatioDisplayTypes","useMaker","useLanguage","useAnalytics","useValidatedInput","multiply","formatCollateralizationRatio","formatter","getCurrency","decimalRules","getColor","short","Withdraw","vault","reset","trackBtnClick","lang","maker","vaultType","liquidationRatio","collateralAvailableAmount","collateralTypePrice","collateralAmount","collateralValue","collateralValueForAmount","collateralAmountByValue","debtAmount","encumberedDebt","set","ROUNDING_MODE","ROUND_DOWN","toBigNumber","convertAmountToValue","amount","r","undefined","convertValueToAmount","value","symbol","collateralAvailableValue","maxFloat","minFloat","isFloat","action_sidebar","cdp_below_threshold","setAmount","onAmountChange","amountErrors","valueToWithdraw","amountToWithdraw","setMax","currency","ilk","withdraw","d","dividedBy","minus","absoluteValue","val","lt","service","wipeAndFree","id","valueDiff","toNumber","collateralizationRatio","calculateCollateralizationRatio","gte","fontSize","color","formatString","withdraw_title","withdraw_description","parseFloat","toString","fathom","actions","cancel","maximum_available_to_withdraw","precision","new_collateralization_ratio","TEXT","percentage"],"mappings":"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","sourcesContent":["import React from 'react';\nimport BigNumber from 'bignumber.js';\nimport { USDFL } from '../../libs/dai-plugin-mcd/src/index.js';\nimport { Text, Input, Grid, Button } from '@makerdao/ui-components-core';\nimport Info from './shared/Info';\nimport InfoContainer from './shared/InfoContainer';\nimport SetMax from 'components/SetMax';\nimport RatioDisplay, { RatioDisplayTypes } from 'components/RatioDisplay';\nimport useMaker from 'hooks/useMaker';\nimport useLanguage from 'hooks/useLanguage';\nimport useAnalytics from 'hooks/useAnalytics';\nimport useValidatedInput from 'hooks/useValidatedInput';\nimport { multiply } from 'utils/bignumber';\nimport { formatCollateralizationRatio, formatter } from 'utils/ui';\nimport { getCurrency } from 'utils/cdp';\nimport { decimalRules } from '../../styles/constants';\nimport { getColor } from '../../styles/theme';\nconst { short } = decimalRules;\n\nconst Withdraw = ({ vault, reset }) => {\n  const { trackBtnClick } = useAnalytics('Withdraw', 'Sidebar');\n  const { lang } = useLanguage();\n  const { maker } = useMaker();\n\n  let {\n    vaultType,\n    liquidationRatio,\n    collateralAvailableAmount,\n    collateralTypePrice,\n    collateralAmount,\n    collateralValue,\n    collateralValueForAmount,\n    collateralAmountByValue,\n    encumberedDebt: debtAmount\n  } = vault;\n  BigNumber.set({ ROUNDING_MODE: BigNumber.ROUND_DOWN });\n  collateralAvailableAmount = collateralAvailableAmount.toBigNumber();\n  collateralValue = collateralValue.toBigNumber();\n\n  function convertAmountToValue(amount) {\n    if (amount === 0) return BigNumber(0);\n    const r = collateralValueForAmount(BigNumber(amount));\n\n    if (r === undefined) return BigNumber(0);\n\n    return r;\n  }\n\n  function convertValueToAmount(value) {\n    if (value === 0) return BigNumber(0);\n    const r = collateralAmountByValue(BigNumber(value));\n\n    if (r === undefined) return BigNumber(0);\n    return r;\n  }\n\n  const symbol = collateralAmount?.symbol;\n\n  const collateralAvailableValue = convertAmountToValue(\n    collateralAvailableAmount\n  );\n\n  const [value, setAmount, onAmountChange, amountErrors] = useValidatedInput(\n    '',\n    {\n      maxFloat: collateralAvailableValue,\n      minFloat: 0,\n      isFloat: true\n    },\n    {\n      maxFloat: () => lang.action_sidebar.cdp_below_threshold\n    }\n  );\n\n  const valueToWithdraw = value || BigNumber(0);\n  const amountToWithdraw = convertValueToAmount(valueToWithdraw);\n\n  const setMax = () => setAmount(formatter(collateralAvailableValue));\n\n  const currency = getCurrency({ ilk: vaultType });\n\n  const withdraw = () => {\n    const d = amountToWithdraw\n      .dividedBy(collateralAvailableAmount)\n      .minus(BigNumber(1.0))\n      .absoluteValue();\n    const val = d.lt(BigNumber(0.001))\n      ? collateralAvailableAmount\n      : amountToWithdraw;\n    maker\n      .service('mcd:cdpManager')\n      .wipeAndFree(vault.id, vaultType, USDFL(0), currency(val));\n    reset();\n  };\n\n  const valueDiff = multiply(amountToWithdraw, collateralTypePrice.toNumber());\n\n  const collateralizationRatio = vault.calculateCollateralizationRatio({\n    collateralValue: collateralValue.minus(valueDiff).gte(0)\n      ? currency(collateralValue.minus(valueDiff))\n      : currency(0)\n  });\n\n  \n  return (\n    <Grid gridRowGap=\"m\">\n      <Grid gridRowGap=\"s\" className=\"input_des\">\n        <Text style={{ fontSize: '20px', color: getColor('whiteText') }}>\n          {lang.formatString(lang.action_sidebar.withdraw_title, symbol)}\n        </Text>\n        <Text\n          style={{ fontSize: '16px', color: getColor('greyText') }}\n          t=\"body\"\n        >\n          {lang.formatString(lang.action_sidebar.withdraw_description, symbol)}\n        </Text>\n        <div className=\"input_border\">\n          <Input\n            style={{ color: getColor('whiteText') }}\n            type=\"number\"\n            placeholder={`0.00 USD`}\n            value={value}\n            min=\"0\"\n            onChange={onAmountChange}\n            after={\n              parseFloat(debtAmount) === 0 ? (\n                <SetMax\n                  style={{ color: getColor('greyText') }}\n                  onClick={() => {\n                    setMax();\n                    trackBtnClick('SetMax', {\n                      collateralAvailableAmount: collateralAvailableAmount.toString(),\n                      setMax: true\n                    });\n                  }}\n                />\n              ) : null\n            }\n            failureMessage={amountErrors}\n          />\n        </div>\n      </Grid>\n      <Grid gridTemplateColumns=\"1fr 1fr\" gridColumnGap=\"s\">\n        <Button\n          className=\"btn\"\n          disabled={!value || amountErrors}\n          onClick={() => {\n            trackBtnClick('Confirm', {\n              value,\n              fathom: { id: `${symbol}VaultWithdraw`, value }\n            });\n            withdraw();\n          }}\n        >\n          {lang.actions.withdraw}\n        </Button>\n        <Button\n          className=\"btn\"\n          variant=\"secondary-outline\"\n          onClick={() => {\n            trackBtnClick('Cancel');\n            reset();\n          }}\n        >\n          {lang.cancel}\n        </Button>\n      </Grid>\n      <InfoContainer>\n        <Info\n          title={lang.action_sidebar.maximum_available_to_withdraw}\n          body={`${formatter(collateralAvailableValue, {\n            precision: short\n          })} USD`}\n        />\n        <Info\n          title={lang.action_sidebar.new_collateralization_ratio}\n          body={\n            <RatioDisplay\n              type={RatioDisplayTypes.TEXT}\n              ratio={formatter(collateralizationRatio)}\n              ilkLiqRatio={formatter(liquidationRatio, { percentage: true })}\n              text={formatCollateralizationRatio(collateralizationRatio)}\n            />\n          }\n        />\n      </InfoContainer>\n    </Grid>\n  );\n};\nexport default Withdraw;\n"]},"metadata":{},"sourceType":"module"}