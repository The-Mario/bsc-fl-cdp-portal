{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { greaterThan } from './bignumber';\nimport ilkList from '../references/ilkList';\nimport assert from 'assert';\nimport BigNumber from 'bignumber.js';\nexport function cdpParamsAreValid(_ref, userGemBalance, debtFloor, daiAvailable) {\n  var gemsToLock = _ref.gemsToLock,\n      daiToDraw = _ref.daiToDraw;\n  // must not open empty cdp or cdp with no dai value\n  if (!gemsToLock || !daiToDraw) return false; // we technically can do this, but TODO figure out if we should\n  // must lock collateral in order to draw dai\n\n  if (!!daiToDraw && !gemsToLock) return false; // must be positive\n\n  if (parseFloat(daiToDraw) < 0 || parseFloat(gemsToLock) < 0) return false; // must have enough tokens\n\n  if (greaterThan(gemsToLock, userGemBalance)) return false; // must open a cdp above the liquidation threshold\n\n  if (greaterThan(daiToDraw, daiAvailable)) return false; // must draw more dai than the dust limit\n\n  if (greaterThan(debtFloor, daiToDraw)) return false;\n  return true;\n}\nexport function getCurrency(cdp) {\n  var ilkName = cdp.ilk.name || cdp.ilk;\n  var ilk = ilkList.find(function (i) {\n    return i.key === ilkName;\n  });\n  assert(ilk && ilk.currency, \"could not find currency for \".concat(ilkName));\n  return ilk.currency;\n}\nexport function getMaxDaiAvailable(_ref2) {\n  var collateralDebtAvailable = _ref2.collateralDebtAvailable;\n  var collateralDebtAvailableBN = collateralDebtAvailable === null || collateralDebtAvailable === void 0 ? void 0 : collateralDebtAvailable.toBigNumber();\n  return (collateralDebtAvailableBN === null || collateralDebtAvailableBN === void 0 ? void 0 : collateralDebtAvailableBN.lt(0)) ? BigNumber(0) : collateralDebtAvailableBN;\n}\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(cdpParamsAreValid, \"cdpParamsAreValid\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/utils/cdp.js\");\n  reactHotLoader.register(getCurrency, \"getCurrency\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/utils/cdp.js\");\n  reactHotLoader.register(getMaxDaiAvailable, \"getMaxDaiAvailable\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/utils/cdp.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/utils/cdp.js"],"names":["greaterThan","ilkList","assert","BigNumber","cdpParamsAreValid","userGemBalance","debtFloor","daiAvailable","gemsToLock","daiToDraw","parseFloat","getCurrency","cdp","ilkName","ilk","name","find","i","key","currency","getMaxDaiAvailable","collateralDebtAvailable","collateralDebtAvailableBN","toBigNumber","lt"],"mappings":";;;;;;;;;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,OAAO,SAASC,iBAAT,OAELC,cAFK,EAGLC,SAHK,EAILC,YAJK,EAKL;AAAA,MAJEC,UAIF,QAJEA,UAIF;AAAA,MAJcC,SAId,QAJcA,SAId;AACA;AACA,MAAI,CAACD,UAAD,IAAe,CAACC,SAApB,EAA+B,OAAO,KAAP,CAF/B,CAE6C;AAC7C;;AACA,MAAI,CAAC,CAACA,SAAF,IAAe,CAACD,UAApB,EAAgC,OAAO,KAAP,CAJhC,CAKA;;AACA,MAAIE,UAAU,CAACD,SAAD,CAAV,GAAwB,CAAxB,IAA6BC,UAAU,CAACF,UAAD,CAAV,GAAyB,CAA1D,EAA6D,OAAO,KAAP,CAN7D,CAOA;;AACA,MAAIR,WAAW,CAACQ,UAAD,EAAaH,cAAb,CAAf,EAA6C,OAAO,KAAP,CAR7C,CASA;;AACA,MAAIL,WAAW,CAACS,SAAD,EAAYF,YAAZ,CAAf,EAA0C,OAAO,KAAP,CAV1C,CAWA;;AACA,MAAIP,WAAW,CAACM,SAAD,EAAYG,SAAZ,CAAf,EAAuC,OAAO,KAAP;AACvC,SAAO,IAAP;AACD;AAED,OAAO,SAASE,WAAT,CAAqBC,GAArB,EAA0B;AAC/B,MAAMC,OAAO,GAAGD,GAAG,CAACE,GAAJ,CAAQC,IAAR,IAAgBH,GAAG,CAACE,GAApC;AACA,MAAMA,GAAG,GAAGb,OAAO,CAACe,IAAR,CAAa,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACC,GAAF,KAAUL,OAAd;AAAA,GAAd,CAAZ;AACAX,EAAAA,MAAM,CAACY,GAAG,IAAIA,GAAG,CAACK,QAAZ,wCAAqDN,OAArD,EAAN;AACA,SAAOC,GAAG,CAACK,QAAX;AACD;AAED,OAAO,SAASC,kBAAT,QAAyD;AAAA,MAA3BC,uBAA2B,SAA3BA,uBAA2B;AAC9D,MAAMC,yBAAyB,GAAGD,uBAAH,aAAGA,uBAAH,uBAAGA,uBAAuB,CAAEE,WAAzB,EAAlC;AAEA,SAAO,CAAAD,yBAAyB,SAAzB,IAAAA,yBAAyB,WAAzB,YAAAA,yBAAyB,CAAEE,EAA3B,CAA8B,CAA9B,KACHrB,SAAS,CAAC,CAAD,CADN,GAEHmB,yBAFJ;AAGD;;;;;;;;;;0BAlCelB,iB;0BAqBAO,W;0BAOAS,kB","sourcesContent":["import { greaterThan } from './bignumber';\nimport ilkList from '../references/ilkList';\nimport assert from 'assert';\nimport BigNumber from 'bignumber.js';\n\nexport function cdpParamsAreValid(\n  { gemsToLock, daiToDraw },\n  userGemBalance,\n  debtFloor,\n  daiAvailable\n) {\n  // must not open empty cdp or cdp with no dai value\n  if (!gemsToLock || !daiToDraw) return false; // we technically can do this, but TODO figure out if we should\n  // must lock collateral in order to draw dai\n  if (!!daiToDraw && !gemsToLock) return false;\n  // must be positive\n  if (parseFloat(daiToDraw) < 0 || parseFloat(gemsToLock) < 0) return false;\n  // must have enough tokens\n  if (greaterThan(gemsToLock, userGemBalance)) return false;\n  // must open a cdp above the liquidation threshold\n  if (greaterThan(daiToDraw, daiAvailable)) return false;\n  // must draw more dai than the dust limit\n  if (greaterThan(debtFloor, daiToDraw)) return false;\n  return true;\n}\n\nexport function getCurrency(cdp) {\n  const ilkName = cdp.ilk.name || cdp.ilk;\n  const ilk = ilkList.find(i => i.key === ilkName);\n  assert(ilk && ilk.currency, `could not find currency for ${ilkName}`);\n  return ilk.currency;\n}\n\nexport function getMaxDaiAvailable({ collateralDebtAvailable }) {\n  const collateralDebtAvailableBN = collateralDebtAvailable?.toBigNumber();\n\n  return collateralDebtAvailableBN?.lt(0)\n    ? BigNumber(0)\n    : collateralDebtAvailableBN;\n}\n"]},"metadata":{},"sourceType":"module"}