{"ast":null,"code":"import _slicedToArray from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/Sidebars/Generate.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React from 'react';\nimport BigNumber from 'bignumber.js';\nimport { USDFL } from '../../libs/dai-plugin-mcd/src/index.js';\nimport { Text, Input, Grid, Button } from '@makerdao/ui-components-core';\nimport Info from './shared/Info';\nimport InfoContainer from './shared/InfoContainer';\nimport RatioDisplay, { RatioDisplayTypes } from 'components/RatioDisplay';\nimport useMaker from 'hooks/useMaker';\nimport useLanguage from 'hooks/useLanguage';\nimport useAnalytics from 'hooks/useAnalytics';\nimport useValidatedInput from 'hooks/useValidatedInput';\nimport { add, greaterThan } from 'utils/bignumber';\nimport { formatCollateralizationRatio, formatter } from 'utils/ui';\nimport { decimalRules } from '../../styles/constants';\nimport { getColor } from '../../styles/theme';\nvar short = decimalRules.short;\n\nvar Generate = function Generate(_ref) {\n  var _collateralDebtAvaila;\n\n  var vault = _ref.vault,\n      reset = _ref.reset;\n\n  var _useAnalytics = useAnalytics('Generate', 'Sidebar'),\n      trackBtnClick = _useAnalytics.trackBtnClick;\n\n  var _useLanguage = useLanguage(),\n      lang = _useLanguage.lang;\n\n  var _useMaker = useMaker(),\n      maker = _useMaker.maker;\n\n  var debtValue = vault.debtValue,\n      daiAvailable = vault.daiAvailable,\n      vaultType = vault.vaultType,\n      debtFloor = vault.debtFloor,\n      collateralAmount = vault.collateralAmount,\n      liquidationRatio = vault.liquidationRatio,\n      currentCollateralizationRatio = vault.collateralizationRatio,\n      collateralDebtAvailable = vault.collateralDebtAvailable;\n  BigNumber.set({\n    ROUNDING_MODE: BigNumber.ROUND_DOWN\n  });\n  debtValue = debtValue.toBigNumber().decimalPlaces(2);\n  collateralDebtAvailable = (_collateralDebtAvaila = collateralDebtAvailable) === null || _collateralDebtAvaila === void 0 ? void 0 : _collateralDebtAvaila.toBigNumber();\n  var symbol = collateralAmount === null || collateralAmount === void 0 ? void 0 : collateralAmount.symbol;\n\n  var dustLimitValidation = function dustLimitValidation(value) {\n    return greaterThan(debtFloor, add(value, debtValue));\n  };\n\n  var debtCeilingValidation = function debtCeilingValidation(value) {\n    return greaterThan(value, collateralDebtAvailable);\n  };\n\n  var _useValidatedInput = useValidatedInput('', {\n    maxFloat: formatter(daiAvailable),\n    minFloat: 0,\n    isFloat: true,\n    custom: {\n      dustLimit: dustLimitValidation,\n      debtCeiling: debtCeilingValidation\n    }\n  }, {\n    maxFloat: function maxFloat() {\n      return lang.action_sidebar.cdp_below_threshold;\n    },\n    dustLimit: function dustLimit() {\n      return lang.formatString(lang.cdp_create.below_dust_limit, formatter(debtFloor));\n    },\n    debtCeiling: function debtCeiling() {\n      return lang.formatString(lang.action_sidebar.generate_threshold, formatter(collateralDebtAvailable));\n    }\n  }),\n      _useValidatedInput2 = _slicedToArray(_useValidatedInput, 4),\n      amount = _useValidatedInput2[0],\n      onAmountChange = _useValidatedInput2[2],\n      failureMessage = _useValidatedInput2[3];\n\n  var amountToGenerate = amount && !BigNumber(amount).isNegative() ? BigNumber(amount) : BigNumber(0);\n\n  var generate = function generate() {\n    maker.service('mcd:cdpManager').draw(vault.id, vaultType, USDFL(amount));\n    reset();\n  };\n\n  var collateralizationRatio = vault.calculateCollateralizationRatio({\n    debtValue: vault === null || vault === void 0 ? void 0 : vault.debtValue.plus(amountToGenerate)\n  });\n  return /*#__PURE__*/React.createElement(Grid, {\n    gridRowGap: \"m\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    gridRowGap: \"s\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    style: {\n      fontSize: '20px',\n      color: getColor('whiteText')\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, lang.action_sidebar.generate_title), /*#__PURE__*/React.createElement(Text, {\n    style: {\n      fontSize: '16px',\n      color: getColor('greyText')\n    },\n    t: \"body\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, lang.action_sidebar.generate_description), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input_border\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    style: {\n      color: getColor('greyText'),\n      border: \"1px solid getColor('greyText')\"\n    },\n    type: \"number\",\n    value: amount,\n    min: \"0\",\n    onChange: onAmountChange,\n    placeholder: \"0.00 USDFL\",\n    failureMessage: failureMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    gridTemplateColumns: \"1fr 1fr\",\n    gridColumnGap: \"s\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"btn\",\n    disabled: !amount || failureMessage,\n    onClick: function onClick() {\n      trackBtnClick('Confirm', {\n        amount: amount,\n        fathom: {\n          id: \"\".concat(symbol, \"VaultGenerate\"),\n          amount: amount\n        }\n      });\n      generate();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, lang.actions.generate), /*#__PURE__*/React.createElement(Button, {\n    className: \"btn\",\n    variant: \"secondary-outline\",\n    onClick: function onClick() {\n      trackBtnClick('Cancel');\n      reset();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, lang.cancel)), /*#__PURE__*/React.createElement(InfoContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Info, {\n    title: lang.action_sidebar.maximum_available_to_generate,\n    body: \"\".concat(formatter(daiAvailable, {\n      precision: short\n    }), \" USDFL\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Info, {\n    title: lang.action_sidebar.new_collateralization_ratio,\n    body: /*#__PURE__*/React.createElement(RatioDisplay, {\n      type: RatioDisplayTypes.TEXT,\n      ratio: formatter(collateralizationRatio, {\n        infinity: currentCollateralizationRatio\n      }),\n      ilkLiqRatio: formatter(liquidationRatio, {\n        percentage: true\n      }),\n      text: formatCollateralizationRatio(collateralizationRatio),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  })));\n};\n\n__signature__(Generate, \"useAnalytics{{ trackBtnClick }}\\nuseLanguage{{ lang }}\\nuseMaker{{ maker }}\\nuseValidatedInput{[amount, , onAmountChange, failureMessage]}\", function () {\n  return [useAnalytics, useLanguage, useMaker, useValidatedInput];\n});\n\nvar _default = Generate;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(short, \"short\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/Sidebars/Generate.js\");\n  reactHotLoader.register(Generate, \"Generate\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/Sidebars/Generate.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/Sidebars/Generate.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/Sidebars/Generate.js"],"names":["React","BigNumber","USDFL","Text","Input","Grid","Button","Info","InfoContainer","RatioDisplay","RatioDisplayTypes","useMaker","useLanguage","useAnalytics","useValidatedInput","add","greaterThan","formatCollateralizationRatio","formatter","decimalRules","getColor","short","Generate","vault","reset","trackBtnClick","lang","maker","debtValue","daiAvailable","vaultType","debtFloor","collateralAmount","liquidationRatio","currentCollateralizationRatio","collateralizationRatio","collateralDebtAvailable","set","ROUNDING_MODE","ROUND_DOWN","toBigNumber","decimalPlaces","symbol","dustLimitValidation","value","debtCeilingValidation","maxFloat","minFloat","isFloat","custom","dustLimit","debtCeiling","action_sidebar","cdp_below_threshold","formatString","cdp_create","below_dust_limit","generate_threshold","amount","onAmountChange","failureMessage","amountToGenerate","isNegative","generate","service","draw","id","calculateCollateralizationRatio","plus","fontSize","color","generate_title","generate_description","border","fathom","actions","cancel","maximum_available_to_generate","precision","new_collateralization_ratio","TEXT","infinity","percentage"],"mappings":"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","sourcesContent":["import React from 'react';\nimport BigNumber from 'bignumber.js';\nimport { USDFL } from '../../libs/dai-plugin-mcd/src/index.js';\nimport { Text, Input, Grid, Button } from '@makerdao/ui-components-core';\nimport Info from './shared/Info';\nimport InfoContainer from './shared/InfoContainer';\nimport RatioDisplay, { RatioDisplayTypes } from 'components/RatioDisplay';\nimport useMaker from 'hooks/useMaker';\nimport useLanguage from 'hooks/useLanguage';\nimport useAnalytics from 'hooks/useAnalytics';\nimport useValidatedInput from 'hooks/useValidatedInput';\nimport { add, greaterThan } from 'utils/bignumber';\nimport { formatCollateralizationRatio, formatter } from 'utils/ui';\nimport { decimalRules } from '../../styles/constants';\nimport { getColor } from '../../styles/theme';\nconst { short } = decimalRules;\n\nconst Generate = ({ vault, reset }) => {\n  const { trackBtnClick } = useAnalytics('Generate', 'Sidebar');\n  const { lang } = useLanguage();\n  const { maker } = useMaker();\n\n  let {\n    debtValue,\n    daiAvailable,\n    vaultType,\n    debtFloor,\n    collateralAmount,\n    liquidationRatio,\n    collateralizationRatio: currentCollateralizationRatio,\n    collateralDebtAvailable\n  } = vault;\n  BigNumber.set({ ROUNDING_MODE: BigNumber.ROUND_DOWN });\n  debtValue = debtValue.toBigNumber().decimalPlaces(2);\n  collateralDebtAvailable = collateralDebtAvailable?.toBigNumber();\n\n  const symbol = collateralAmount?.symbol;\n\n  const dustLimitValidation = value =>\n    greaterThan(debtFloor, add(value, debtValue));\n\n  const debtCeilingValidation = value =>\n    greaterThan(value, collateralDebtAvailable);\n\n  const [amount, , onAmountChange, failureMessage] = useValidatedInput(\n    '',\n    {\n      maxFloat: formatter(daiAvailable),\n      minFloat: 0,\n      isFloat: true,\n      custom: {\n        dustLimit: dustLimitValidation,\n        debtCeiling: debtCeilingValidation\n      }\n    },\n    {\n      maxFloat: () => lang.action_sidebar.cdp_below_threshold,\n      dustLimit: () =>\n        lang.formatString(\n          lang.cdp_create.below_dust_limit,\n          formatter(debtFloor)\n        ),\n      debtCeiling: () =>\n        lang.formatString(\n          lang.action_sidebar.generate_threshold,\n          formatter(collateralDebtAvailable)\n        )\n    }\n  );\n\n  const amountToGenerate =\n    amount && !BigNumber(amount).isNegative()\n      ? BigNumber(amount)\n      : BigNumber(0);\n\n  const generate = () => {\n    maker.service('mcd:cdpManager').draw(vault.id, vaultType, USDFL(amount));\n    reset();\n  };\n\n  const collateralizationRatio = vault.calculateCollateralizationRatio({\n    debtValue: vault?.debtValue.plus(amountToGenerate)\n  });\n\n  return (\n    <Grid gridRowGap=\"m\">\n      <Grid gridRowGap=\"s\">\n        <Text style={{ fontSize: '20px', color: getColor('whiteText') }}>\n          {lang.action_sidebar.generate_title}\n        </Text>\n        <Text\n          style={{ fontSize: '16px', color: getColor('greyText') }}\n          t=\"body\"\n        >\n          {lang.action_sidebar.generate_description}\n        </Text>\n        <div className=\"input_border\">\n        <Input\n          style={{ color: getColor('greyText'), border: \"1px solid getColor('greyText')\" }}\n          type=\"number\"\n          value={amount}\n          min=\"0\"\n          onChange={onAmountChange}\n          placeholder=\"0.00 USDFL\"\n          failureMessage={failureMessage}\n        />\n        </div>\n      </Grid>\n      <Grid gridTemplateColumns=\"1fr 1fr\" gridColumnGap=\"s\">\n        <Button className=\"btn\"\n          disabled={!amount || failureMessage}\n          onClick={() => {\n            trackBtnClick('Confirm', {\n              amount,\n              fathom: { id: `${symbol}VaultGenerate`, amount }\n            });\n            generate();\n          }}\n        >\n          {lang.actions.generate}\n        </Button>\n        <Button className=\"btn\"\n          variant=\"secondary-outline\"\n          onClick={() => {\n            trackBtnClick('Cancel');\n            reset();\n          }}\n        >\n          {lang.cancel}\n        </Button>\n      </Grid>\n      <InfoContainer>\n        <Info\n          title={lang.action_sidebar.maximum_available_to_generate}\n          body={`${formatter(daiAvailable, { precision: short })} USDFL`}\n        />\n        <Info\n          title={lang.action_sidebar.new_collateralization_ratio}\n          body={\n            <RatioDisplay\n              type={RatioDisplayTypes.TEXT}\n              ratio={formatter(collateralizationRatio, {\n                infinity: currentCollateralizationRatio\n              })}\n              ilkLiqRatio={formatter(liquidationRatio, { percentage: true })}\n              text={formatCollateralizationRatio(collateralizationRatio)}\n            />\n          }\n        />\n      </InfoContainer>\n    </Grid>\n  );\n};\nexport default Generate;\n"]},"metadata":{},"sourceType":"module"}