{"ast":null,"code":"'use strict';\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getInterfaceLanguage = getInterfaceLanguage;\nexports.getBestMatchingLanguage = getBestMatchingLanguage;\nexports.validateTranslationKeys = validateTranslationKeys;\nexports.randomPseudo = randomPseudo;\n/**\n * Return the current interface language\n * If the navigator object is defined it returns the current navigator language\n * otherwise it falls back to 'en-US'\n * Works in browsers\n */\n\nfunction getInterfaceLanguage() {\n  var defaultLang = 'en-US';\n\n  if (typeof navigator === 'undefined') {\n    return defaultLang;\n  }\n\n  var nav = navigator; // eslint-disable-line no-undef\n\n  if (nav) {\n    if (nav.language) {\n      return nav.language;\n    }\n\n    if (!!nav.languages && !!nav.languages[0]) {\n      return nav.languages[0];\n    }\n\n    if (nav.userLanguage) {\n      return nav.userLanguage;\n    }\n\n    if (nav.browserLanguage) {\n      return nav.browserLanguage;\n    }\n  }\n\n  return defaultLang;\n}\n/**\n * Get the best match based on the language passed and the available languages\n * @param {*} language\n * @param {*} props\n */\n\n\nfunction getBestMatchingLanguage(language, props) {\n  // If an object with the passed language key exists return it\n  if (props[language]) return language; // if the string is composed try to find a match with only the first language identifiers (en-US --> en)\n\n  var idx = language.indexOf('-');\n  var auxLang = idx >= 0 ? language.substring(0, idx) : language;\n  return props[auxLang] ? auxLang : Object.keys(props)[0];\n}\n/**\n * Check that the keys used in the provided strings object don't collide with existing property\n * already defined in the LocalizedStrings object\n * @param {*} translationKeys\n */\n\n\nfunction validateTranslationKeys(translationKeys) {\n  var reservedNames = ['_interfaceLanguage', '_language', '_defaultLanguage', '_defaultLanguageFirstLevelKeys', '_props'];\n  translationKeys.forEach(function (key) {\n    if (reservedNames.indexOf(key) !== -1) {\n      throw new Error(key + ' cannot be used as a key. It is a reserved word.');\n    }\n  });\n}\n/**\n * Get a random pseudo string back after specified a length\n * @param {Number} len - How many characters to get back\n */\n\n\nfunction randomPseudo(len) {\n  var text = '';\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  for (var i = 0; i < len; i += 1) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n\n  return text;\n}\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(getInterfaceLanguage, \"getInterfaceLanguage\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/localized-strings/lib/utils.js\");\n  reactHotLoader.register(getBestMatchingLanguage, \"getBestMatchingLanguage\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/localized-strings/lib/utils.js\");\n  reactHotLoader.register(validateTranslationKeys, \"validateTranslationKeys\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/localized-strings/lib/utils.js\");\n  reactHotLoader.register(randomPseudo, \"randomPseudo\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/localized-strings/lib/utils.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"script"}