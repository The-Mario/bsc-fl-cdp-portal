{"ast":null,"code":"import _classCallCheck from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _applyDecoratedDescriptor from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _regeneratorRuntime from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _dec, _dec2, _dec3, _class;\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { castAsCurrency, stringToBytes } from './utils';\nimport tracksTransactions, { tracksTransactionsWithOptions } from './utils/tracksTransactions';\nimport { ServiceRoles } from './constants';\nimport assert from 'assert';\nimport { USDFL } from './index';\nimport * as math from './math';\nvar ManagedCdp = (_dec = tracksTransactionsWithOptions({\n  numArguments: 3\n}), _dec2 = tracksTransactionsWithOptions({\n  numArguments: 3\n}), _dec3 = tracksTransactionsWithOptions({\n  numArguments: 1\n}), (_class = /*#__PURE__*/function () {\n  function ManagedCdp(id, ilk, cdpManager) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n      prefetch: true\n    };\n\n    _classCallCheck(this, ManagedCdp);\n\n    assert(typeof id === 'number', 'ID must be a number');\n    this.id = id;\n    assert(ilk && typeof ilk === 'string', 'Must specify ilk');\n    this.ilk = ilk;\n    this._cdpManager = cdpManager;\n    this.type = cdpManager.get(ServiceRoles.CDP_TYPE).getCdpType(null, ilk);\n    this.currency = this.type.currency;\n    this.cache = {};\n    if (options.prefetch) this.prefetch();\n  }\n\n  _createClass(ManagedCdp, [{\n    key: \"getOwner\",\n    value: function getOwner() {\n      return this._cdpManager.getOwner(this.id);\n    }\n  }, {\n    key: \"getUrn\",\n    value: function getUrn() {\n      return this._cdpManager.getUrn(this.id);\n    } // TODO: after these operations complete, update the cache. once that's done,\n    // update ManagedCdp.spec to use expectValues instead of\n    // expectValuesAfterReset in more places\n\n  }, {\n    key: \"lockCollateral\",\n    value: function lockCollateral(amount) {\n      amount = castAsCurrency(amount, this.currency);\n      return this._cdpManager.lock(this.id, this.ilk, amount, null);\n    }\n  }, {\n    key: \"drawDai\",\n    value: function drawDai(amount, _ref2) {\n      var promise = _ref2.promise;\n      return this._cdpManager.draw(this.id, this.ilk, amount, {\n        promise: promise\n      });\n    }\n  }, {\n    key: \"lockAndDraw\",\n    value: function lockAndDraw() {\n      var lockAmount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.currency(0);\n      var drawAmount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : USDFL(0);\n\n      var _ref3 = arguments.length > 2 ? arguments[2] : undefined,\n          promise = _ref3.promise;\n\n      assert(lockAmount && drawAmount, 'amounts must be defined');\n      lockAmount = castAsCurrency(lockAmount, this.currency);\n      drawAmount = castAsCurrency(drawAmount, USDFL);\n      return this._cdpManager.lockAndDraw(this.id, this.ilk, lockAmount, drawAmount, {\n        promise: promise\n      });\n    }\n  }, {\n    key: \"wipeDai\",\n    value: function wipeDai(amount) {\n      amount = castAsCurrency(amount, USDFL);\n      return this._cdpManager.wipe(this.id, amount, null);\n    }\n  }, {\n    key: \"unsafeWipe\",\n    value: function unsafeWipe(amount) {\n      amount = castAsCurrency(amount, USDFL);\n      return this._cdpManager.unsafeWipe(this.id, amount);\n    }\n  }, {\n    key: \"wipeAll\",\n    value: function wipeAll() {\n      return this._cdpManager.wipeAll(this.id, null);\n    }\n  }, {\n    key: \"unsafeWipeAll\",\n    value: function unsafeWipeAll() {\n      return this._cdpManager.unsafeWipeAll(this.id);\n    }\n  }, {\n    key: \"freeCollateral\",\n    value: function freeCollateral(amount) {\n      return this.wipeAndFree(undefined, amount);\n    }\n  }, {\n    key: \"give\",\n    value: function give(address) {\n      return this._cdpManager.give(this.id, address);\n    }\n  }, {\n    key: \"giveToProxy\",\n    value: function giveToProxy(address) {\n      return this._cdpManager.giveToProxy(this.id, address);\n    }\n  }, {\n    key: \"wipeAndFree\",\n    value: function wipeAndFree() {\n      var wipeAmount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : USDFL(0);\n      var freeAmount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.currency(0);\n\n      var _ref4 = arguments.length > 2 ? arguments[2] : undefined,\n          promise = _ref4.promise;\n\n      assert(wipeAmount && freeAmount, 'amounts must be defined');\n      wipeAmount = castAsCurrency(wipeAmount, USDFL);\n      freeAmount = castAsCurrency(freeAmount, this.currency);\n      return this._cdpManager.wipeAndFree(this.id, this.ilk, wipeAmount, freeAmount, {\n        promise: promise\n      });\n    }\n  }, {\n    key: \"wipeAllAndFree\",\n    value: function wipeAllAndFree() {\n      var freeAmount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.currency(0);\n\n      var _ref5 = arguments.length > 1 ? arguments[1] : undefined,\n          promise = _ref5.promise;\n\n      assert(freeAmount, 'free amount must be defined');\n      freeAmount = castAsCurrency(freeAmount, this.currency);\n      return this._cdpManager.wipeAllAndFree(this.id, this.ilk, freeAmount, {\n        promise: promise\n      });\n    }\n  }, {\n    key: \"_getUrnInfo\",\n    value: function _getUrnInfo() {\n      var _this = this;\n\n      if (!this._urnInfoPromise) {\n        this._urnInfoPromise = this._cdpManager.getUrn(this.id).then(function (urn) {\n          return _this._cdpManager.vat.urns(stringToBytes(_this.ilk), urn);\n        });\n      }\n\n      return this._urnInfoPromise.then(function (value) {\n        _this.cache.urnInfo = value;\n        return value;\n      });\n    }\n  }, {\n    key: \"_getCached\",\n    value: function _getCached(name) {\n      assert(this.cache[name], \"\".concat(name, \" is not cached\"));\n      return this.cache[name];\n    }\n  }, {\n    key: \"prefetch\",\n    value: function prefetch() {\n      // TODO allow passing in a multicall instance to use that instead of making\n      // separate calls\n      return Promise.all([this._getUrnInfo(), this.type.prefetch()]);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._urnInfoPromise = null;\n      this.cache = {};\n      this.type.reset();\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }, {\n    key: \"collateralAmount\",\n    get: function get() {\n      return math.collateralAmount(this.currency, this._getCached('urnInfo').ink);\n    }\n  }, {\n    key: \"collateralValue\",\n    get: function get() {\n      return math.collateralValue(this.collateralAmount, this.type.price);\n    }\n  }, {\n    key: \"debtValue\",\n    get: function get() {\n      return math.debtValue(this._getCached('urnInfo').art, this.type._getCached('vatInfo').rate);\n    }\n  }, {\n    key: \"collateralizationRatio\",\n    get: function get() {\n      return math.collateralizationRatio(this.collateralValue, this.debtValue);\n    }\n  }, {\n    key: \"liquidationPrice\",\n    get: function get() {\n      return math.liquidationPrice(this.collateralAmount, this.debtValue, this.type.liquidationRatio);\n    }\n  }, {\n    key: \"isSafe\",\n    get: function get() {\n      return this.type.price.gte(this.liquidationPrice);\n    }\n  }, {\n    key: \"minSafeCollateralAmount\",\n    get: function get() {\n      return math.minSafeCollateralAmount(this.debtValue, this.type.liquidationRatio, this.type.price);\n    }\n  }, {\n    key: \"collateralAvailable\",\n    get: function get() {\n      return this.collateralAmount.minus(this.minSafeCollateralAmount);\n    }\n  }, {\n    key: \"daiAvailable\",\n    get: function get() {\n      return math.daiAvailable(this.collateralValue, this.debtValue, this.type.liquidationRatio);\n    }\n  }]);\n\n  return ManagedCdp;\n}(), (_applyDecoratedDescriptor(_class.prototype, \"drawDai\", [tracksTransactions], Object.getOwnPropertyDescriptor(_class.prototype, \"drawDai\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"lockAndDraw\", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, \"lockAndDraw\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"wipeAndFree\", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, \"wipeAndFree\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"wipeAllAndFree\", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, \"wipeAllAndFree\"), _class.prototype)), _class));\nexport { ManagedCdp as default };\n\nManagedCdp.create = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(createTxo, ilk, cdpManager) {\n    var id, cdp;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            id = cdpManager.getNewCdpId(createTxo);\n            cdp = new ManagedCdp(id, ilk, cdpManager);\n            _context.next = 4;\n            return cdp.prefetch();\n\n          case 4:\n            return _context.abrupt(\"return\", cdp);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(ManagedCdp, \"ManagedCdp\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/ManagedCdp.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/ManagedCdp.js"],"names":["castAsCurrency","stringToBytes","tracksTransactions","tracksTransactionsWithOptions","ServiceRoles","assert","USDFL","math","ManagedCdp","numArguments","id","ilk","cdpManager","options","prefetch","_cdpManager","type","get","CDP_TYPE","getCdpType","currency","cache","getOwner","getUrn","amount","lock","promise","draw","lockAmount","drawAmount","lockAndDraw","wipe","unsafeWipe","wipeAll","unsafeWipeAll","wipeAndFree","undefined","address","give","giveToProxy","wipeAmount","freeAmount","wipeAllAndFree","_urnInfoPromise","then","urn","vat","urns","value","urnInfo","name","Promise","all","_getUrnInfo","reset","collateralAmount","_getCached","ink","collateralValue","price","debtValue","art","rate","collateralizationRatio","liquidationPrice","liquidationRatio","gte","minSafeCollateralAmount","minus","daiAvailable","create","createTxo","getNewCdpId","cdp"],"mappings":"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","sourcesContent":["import { castAsCurrency, stringToBytes } from './utils';\nimport tracksTransactions, {\n  tracksTransactionsWithOptions\n} from './utils/tracksTransactions';\nimport { ServiceRoles } from './constants';\nimport assert from 'assert';\nimport { USDFL } from './index';\nimport * as math from './math';\n\nexport default class ManagedCdp {\n  constructor(id, ilk, cdpManager, options = { prefetch: true }) {\n    assert(typeof id === 'number', 'ID must be a number');\n    this.id = id;\n    assert(ilk && typeof ilk === 'string', 'Must specify ilk');\n    this.ilk = ilk;\n    this._cdpManager = cdpManager;\n    this.type = cdpManager.get(ServiceRoles.CDP_TYPE).getCdpType(null, ilk);\n    this.currency = this.type.currency;\n    this.cache = {};\n    if (options.prefetch) this.prefetch();\n  }\n\n  get collateralAmount() {\n    return math.collateralAmount(this.currency, this._getCached('urnInfo').ink);\n  }\n\n  get collateralValue() {\n    return math.collateralValue(this.collateralAmount, this.type.price);\n  }\n\n  get debtValue() {\n    return math.debtValue(\n      this._getCached('urnInfo').art,\n      this.type._getCached('vatInfo').rate\n    );\n  }\n\n  get collateralizationRatio() {\n    return math.collateralizationRatio(this.collateralValue, this.debtValue);\n  }\n\n  get liquidationPrice() {\n    return math.liquidationPrice(\n      this.collateralAmount,\n      this.debtValue,\n      this.type.liquidationRatio\n    );\n  }\n\n  get isSafe() {\n    return this.type.price.gte(this.liquidationPrice);\n  }\n\n  get minSafeCollateralAmount() {\n    return math.minSafeCollateralAmount(\n      this.debtValue,\n      this.type.liquidationRatio,\n      this.type.price\n    );\n  }\n\n  get collateralAvailable() {\n    return this.collateralAmount.minus(this.minSafeCollateralAmount);\n  }\n\n  get daiAvailable() {\n    return math.daiAvailable(\n      this.collateralValue,\n      this.debtValue,\n      this.type.liquidationRatio\n    );\n  }\n\n  getOwner() {\n    return this._cdpManager.getOwner(this.id);\n  }\n\n  getUrn() {\n    return this._cdpManager.getUrn(this.id);\n  }\n\n  // TODO: after these operations complete, update the cache. once that's done,\n  // update ManagedCdp.spec to use expectValues instead of\n  // expectValuesAfterReset in more places\n  lockCollateral(amount) {\n    amount = castAsCurrency(amount, this.currency);\n    return this._cdpManager.lock(this.id, this.ilk, amount, null);\n  }\n\n  @tracksTransactions\n  drawDai(amount, { promise }) {\n    return this._cdpManager.draw(this.id, this.ilk, amount, { promise });\n  }\n\n  @tracksTransactionsWithOptions({ numArguments: 3 })\n  lockAndDraw(lockAmount = this.currency(0), drawAmount = USDFL(0), { promise }) {\n    assert(lockAmount && drawAmount, 'amounts must be defined');\n    lockAmount = castAsCurrency(lockAmount, this.currency);\n    drawAmount = castAsCurrency(drawAmount, USDFL);\n    return this._cdpManager.lockAndDraw(\n      this.id,\n      this.ilk,\n      lockAmount,\n      drawAmount,\n      { promise }\n    );\n  }\n\n  wipeDai(amount) {\n    amount = castAsCurrency(amount, USDFL);\n    return this._cdpManager.wipe(this.id, amount, null);\n  }\n\n  unsafeWipe(amount) {\n    amount = castAsCurrency(amount, USDFL);\n    return this._cdpManager.unsafeWipe(this.id, amount);\n  }\n\n  wipeAll() {\n    return this._cdpManager.wipeAll(this.id, null);\n  }\n\n  unsafeWipeAll() {\n    return this._cdpManager.unsafeWipeAll(this.id);\n  }\n\n  freeCollateral(amount) {\n    return this.wipeAndFree(undefined, amount);\n  }\n\n  give(address) {\n    return this._cdpManager.give(this.id, address);\n  }\n\n  giveToProxy(address) {\n    return this._cdpManager.giveToProxy(this.id, address);\n  }\n\n  @tracksTransactionsWithOptions({ numArguments: 3 })\n  wipeAndFree(wipeAmount = USDFL(0), freeAmount = this.currency(0), { promise }) {\n    assert(wipeAmount && freeAmount, 'amounts must be defined');\n    wipeAmount = castAsCurrency(wipeAmount, USDFL);\n    freeAmount = castAsCurrency(freeAmount, this.currency);\n    return this._cdpManager.wipeAndFree(\n      this.id,\n      this.ilk,\n      wipeAmount,\n      freeAmount,\n      { promise }\n    );\n  }\n\n  @tracksTransactionsWithOptions({ numArguments: 1 })\n  wipeAllAndFree(freeAmount = this.currency(0), { promise }) {\n    assert(freeAmount, 'free amount must be defined');\n    freeAmount = castAsCurrency(freeAmount, this.currency);\n    return this._cdpManager.wipeAllAndFree(this.id, this.ilk, freeAmount, {\n      promise\n    });\n  }\n\n  _getUrnInfo() {\n    if (!this._urnInfoPromise) {\n      this._urnInfoPromise = this._cdpManager\n        .getUrn(this.id)\n        .then(urn => this._cdpManager.vat.urns(stringToBytes(this.ilk), urn));\n    }\n    return this._urnInfoPromise.then(value => {\n      this.cache.urnInfo = value;\n      return value;\n    });\n  }\n\n  _getCached(name) {\n    assert(this.cache[name], `${name} is not cached`);\n    return this.cache[name];\n  }\n\n  prefetch() {\n    // TODO allow passing in a multicall instance to use that instead of making\n    // separate calls\n    return Promise.all([this._getUrnInfo(), this.type.prefetch()]);\n  }\n\n  reset() {\n    this._urnInfoPromise = null;\n    this.cache = {};\n    this.type.reset();\n  }\n}\n\nManagedCdp.create = async function(createTxo, ilk, cdpManager) {\n  const id = cdpManager.getNewCdpId(createTxo);\n  const cdp = new ManagedCdp(id, ilk, cdpManager);\n  await cdp.prefetch();\n  return cdp;\n};\n"]},"metadata":{},"sourceType":"module"}