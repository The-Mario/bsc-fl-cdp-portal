{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"Invalid address for getCdps: \", \"\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { USER_VAULT_IDS, USER_VAULT_ADDRESSES, USER_VAULT_TYPES } from './_constants';\nimport { validateAddress } from './_validators';\nimport { bytesToString } from '../utils';\nexport var getCdps = {\n  generate: function generate(vaultManagerAddress, proxyAddress) {\n    var descending = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return {\n      id: \"GET_CDPS.getCdps\".concat(descending ? 'Desc' : 'Asc', \"(\").concat(proxyAddress, \")\"),\n      contract: 'GET_CDPS',\n      call: [\"getCdps\".concat(descending ? 'Desc' : 'Asc', \"(address,address)(uint256[],address[],bytes32[])\"), vaultManagerAddress, proxyAddress]\n    };\n  },\n  validate: {\n    args: function args(_, address) {\n      return validateAddress(_templateObject(), 'address')(address);\n    }\n  },\n  returns: [[USER_VAULT_IDS, function (v) {\n    return v.map(function (n) {\n      return n.toNumber();\n    });\n  }], [USER_VAULT_ADDRESSES], [USER_VAULT_TYPES, function (v) {\n    return v.map(bytesToString);\n  }]]\n};\nvar _default = {\n  getCdps: getCdps\n};\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(getCdps, \"getCdps\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/schemas/getCdps.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/schemas/getCdps.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/schemas/getCdps.js"],"names":["USER_VAULT_IDS","USER_VAULT_ADDRESSES","USER_VAULT_TYPES","validateAddress","bytesToString","getCdps","generate","vaultManagerAddress","proxyAddress","descending","id","contract","call","validate","args","_","address","returns","v","map","n","toNumber"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,SACEA,cADF,EAEEC,oBAFF,EAGEC,gBAHF,QAIO,cAJP;AAKA,SAASC,eAAT,QAAgC,eAAhC;AACA,SAASC,aAAT,QAA8B,UAA9B;AAEA,OAAO,IAAMC,OAAO,GAAG;AACrBC,EAAAA,QAAQ,EAAE,kBAACC,mBAAD,EAAsBC,YAAtB;AAAA,QAAoCC,UAApC,uEAAiD,IAAjD;AAAA,WAA2D;AACnEC,MAAAA,EAAE,4BAAqBD,UAAU,GAAG,MAAH,GAAY,KAA3C,cAAoDD,YAApD,MADiE;AAEnEG,MAAAA,QAAQ,EAAE,UAFyD;AAGnEC,MAAAA,IAAI,EAAE,kBAEFH,UAAU,GAAG,MAAH,GAAY,KAFpB,uDAIJF,mBAJI,EAKJC,YALI;AAH6D,KAA3D;AAAA,GADW;AAYrBK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAE,cAACC,CAAD,EAAIC,OAAJ;AAAA,aACJb,eAAe,oBAAgC,SAAhC,CAAf,CAA2Da,OAA3D,CADI;AAAA;AADE,GAZW;AAgBrBC,EAAAA,OAAO,EAAE,CACP,CAACjB,cAAD,EAAiB,UAAAkB,CAAC;AAAA,WAAIA,CAAC,CAACC,GAAF,CAAM,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACC,QAAF,EAAJ;AAAA,KAAP,CAAJ;AAAA,GAAlB,CADO,EAEP,CAACpB,oBAAD,CAFO,EAGP,CAACC,gBAAD,EAAmB,UAAAgB,CAAC;AAAA,WAAIA,CAAC,CAACC,GAAF,CAAMf,aAAN,CAAJ;AAAA,GAApB,CAHO;AAhBY,CAAhB;eAuBQ;AACbC,EAAAA,OAAO,EAAPA;AADa,C;AAAf;;;;;;;;;;0BAvBaA,O","sourcesContent":["import {\n  USER_VAULT_IDS,\n  USER_VAULT_ADDRESSES,\n  USER_VAULT_TYPES\n} from './_constants';\nimport { validateAddress } from './_validators';\nimport { bytesToString } from '../utils';\n\nexport const getCdps = {\n  generate: (vaultManagerAddress, proxyAddress, descending = true) => ({\n    id: `GET_CDPS.getCdps${descending ? 'Desc' : 'Asc'}(${proxyAddress})`,\n    contract: 'GET_CDPS',\n    call: [\n      `getCdps${\n        descending ? 'Desc' : 'Asc'\n      }(address,address)(uint256[],address[],bytes32[])`,\n      vaultManagerAddress,\n      proxyAddress\n    ]\n  }),\n  validate: {\n    args: (_, address) =>\n      validateAddress`Invalid address for getCdps: ${'address'}`(address)\n  },\n  returns: [\n    [USER_VAULT_IDS, v => v.map(n => n.toNumber())],\n    [USER_VAULT_ADDRESSES],\n    [USER_VAULT_TYPES, v => v.map(bytesToString)]\n  ]\n};\n\nexport default {\n  getCdps\n};\n"]},"metadata":{},"sourceType":"module"}