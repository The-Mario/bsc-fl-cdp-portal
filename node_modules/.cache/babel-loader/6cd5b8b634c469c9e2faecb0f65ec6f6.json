{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport merge from 'lodash/merge';\nimport { standardizeConfig } from '@makerdao/services-core';\nexport function mergeServiceConfig(role, sink, source, resolver) {\n  sink = standardizeConfig(role, sink, resolver);\n  source = standardizeConfig(role, source);\n  if (sink[0] === false || source[0] === false) return source;\n  return [typeof source[0] != 'boolean' ? source[0] : sink[0], merge({}, sink[1], source[1])];\n}\nexport function getSettings(config) {\n  if (config instanceof Array) return config[1];\n  return config;\n}\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(mergeServiceConfig, \"mergeServiceConfig\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/config/index.js\");\n  reactHotLoader.register(getSettings, \"getSettings\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/config/index.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/config/index.js"],"names":["merge","standardizeConfig","mergeServiceConfig","role","sink","source","resolver","getSettings","config","Array"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,cAAlB;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AAEA,OAAO,SAASC,kBAAT,CAA4BC,IAA5B,EAAkCC,IAAlC,EAAwCC,MAAxC,EAAgDC,QAAhD,EAA0D;AAC/DF,EAAAA,IAAI,GAAGH,iBAAiB,CAACE,IAAD,EAAOC,IAAP,EAAaE,QAAb,CAAxB;AACAD,EAAAA,MAAM,GAAGJ,iBAAiB,CAACE,IAAD,EAAOE,MAAP,CAA1B;AACA,MAAID,IAAI,CAAC,CAAD,CAAJ,KAAY,KAAZ,IAAqBC,MAAM,CAAC,CAAD,CAAN,KAAc,KAAvC,EAA8C,OAAOA,MAAP;AAE9C,SAAO,CACL,OAAOA,MAAM,CAAC,CAAD,CAAb,IAAoB,SAApB,GAAgCA,MAAM,CAAC,CAAD,CAAtC,GAA4CD,IAAI,CAAC,CAAD,CAD3C,EAELJ,KAAK,CAAC,EAAD,EAAKI,IAAI,CAAC,CAAD,CAAT,EAAcC,MAAM,CAAC,CAAD,CAApB,CAFA,CAAP;AAID;AAED,OAAO,SAASE,WAAT,CAAqBC,MAArB,EAA6B;AAClC,MAAIA,MAAM,YAAYC,KAAtB,EAA6B,OAAOD,MAAM,CAAC,CAAD,CAAb;AAC7B,SAAOA,MAAP;AACD;;;;;;;;;;0BAdeN,kB;0BAWAK,W","sourcesContent":["import merge from 'lodash/merge';\nimport { standardizeConfig } from '@makerdao/services-core';\n\nexport function mergeServiceConfig(role, sink, source, resolver) {\n  sink = standardizeConfig(role, sink, resolver);\n  source = standardizeConfig(role, source);\n  if (sink[0] === false || source[0] === false) return source;\n\n  return [\n    typeof source[0] != 'boolean' ? source[0] : sink[0],\n    merge({}, sink[1], source[1])\n  ];\n}\n\nexport function getSettings(config) {\n  if (config instanceof Array) return config[1];\n  return config;\n}\n"]},"metadata":{},"sourceType":"module"}