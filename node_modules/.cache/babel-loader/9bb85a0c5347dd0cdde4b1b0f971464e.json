{"ast":null,"code":"import _regeneratorRuntime from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { PrivateService } from '@makerdao/services-core';\nimport { promisify, getNetworkName } from '../utils';\nimport Web3ServiceList from '../utils/Web3ServiceList';\nimport Web3 from 'web3';\nimport makeSigner from './web3/ShimEthersSigner';\nimport last from 'lodash/last';\nimport assert from 'assert';\nimport debug from 'debug';\nvar log = debug('dai:Web3Service');\n\nvar Web3Service = /*#__PURE__*/function (_PrivateService) {\n  _inherits(Web3Service, _PrivateService);\n\n  var _super = _createSuper(Web3Service);\n\n  function Web3Service() {\n    var _this;\n\n    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'web3';\n\n    _classCallCheck(this, Web3Service);\n\n    _this = _super.call(this, name, ['accounts', 'timer', 'cache', 'event']);\n    _this._blockListeners = {};\n    _this._info = {};\n    Web3ServiceList.push(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Web3Service, [{\n    key: \"currentAddress\",\n    value: function currentAddress() {\n      return this.get('accounts').currentAddress();\n    }\n  }, {\n    key: \"getEthersSigner\",\n    value: function getEthersSigner() {\n      if (!this._ethersSigner) this._ethersSigner = makeSigner(this);\n      return this._ethersSigner;\n    }\n  }, {\n    key: \"web3Provider\",\n    value: function web3Provider() {\n      return this._web3.currentProvider;\n    }\n  }, {\n    key: \"transactionSettings\",\n    value: function transactionSettings() {\n      return this._transactionSettings;\n    }\n  }, {\n    key: \"confirmedBlockCount\",\n    value: function confirmedBlockCount() {\n      return this._confirmedBlockCount;\n    }\n  }, {\n    key: \"web3Contract\",\n    value: function web3Contract(abi, address) {\n      return new this._web3.eth.Contract(abi, address);\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize(settings) {\n      var _this2 = this;\n\n      log('initializing...');\n      this._defaultEmitter = this.get('event');\n      this._web3 = new Web3();\n\n      this._web3.setProvider(this.get('accounts').getProvider());\n\n      Object.assign(this, ['estimateGas', 'getAccounts', 'getBalance', 'getBlock', 'getPastLogs', 'getStorageAt', 'getTransaction', 'getTransactionReceipt', 'subscribe'].reduce(function (acc, method) {\n        acc[method] = function () {\n          var _this2$_web3$eth;\n\n          return (_this2$_web3$eth = _this2._web3.eth)[method].apply(_this2$_web3$eth, arguments);\n        };\n\n        return acc;\n      }, {}));\n      this.eth = new Proxy(this, {\n        get: function get(target, key) {\n          if (typeof key === 'string') console.warn(\"use .\".concat(key, \" instead of .eth.\").concat(key));\n          return target[key];\n        }\n      });\n      this.manager().onDisconnected(function () {\n        return _this2._stopListeningForNewBlocks();\n      });\n\n      this._defaultEmitter.emit('web3/INITIALIZED', {\n        provider: settings.provider\n      });\n\n      this._transactionSettings = settings.transactionSettings;\n      this._confirmedBlockCount = settings.confirmedBlockCount || 5;\n      this._pollingInterval = settings.pollingInterval || 4000;\n    }\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                log('connecting...');\n                _context.t0 = parseInt;\n                _context.next = 4;\n                return promisify(this._web3.eth.net.getId)();\n\n              case 4:\n                _context.t1 = _context.sent;\n                this._networkId = (0, _context.t0)(_context.t1);\n                _context.next = 8;\n                return this._web3.eth.getBlockNumber();\n\n              case 8:\n                this._currentBlock = _context.sent;\n\n                this._updateBlockNumber(this._currentBlock);\n\n                this._listenForNewBlocks();\n\n                this.onNewBlock(this.get('event').ping);\n\n                this._defaultEmitter.emit('web3/CONNECTED', _objectSpread({}, this._info));\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function connect() {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: \"authenticate\",\n    value: function () {\n      var _authenticate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                log('authenticating...');\n\n                this._defaultEmitter.emit('web3/AUTHENTICATED', {\n                  account: this.currentAddress()\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function authenticate() {\n        return _authenticate.apply(this, arguments);\n      }\n\n      return authenticate;\n    }()\n    /*\n      sendTransaction in web3 1.0 behaves differently from its counterpart in\n      0.2x.x. it doesn't resolve until the transaction has a receipt, and throws an\n      error if the receipt indicates that the transaction was reverted.\n      the setup below emulates the old behavior, because TransactionObject still\n      expects it. if there is an error due to the transaction being reverted, it\n      will be ignored, because the promise will have already resolved.\n       this can (and should) be refactored when we drop support for HTTP providers.\n       https://github.com/ethereum/wiki/wiki/JavaScript-API#web3ethsendtransaction\n      https://web3js.readthedocs.io/en/1.0/web3-eth.html#sendtransaction\n    */\n\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction() {\n      var _this3 = this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return new Promise(function (resolve, reject) {\n        var _this3$_web3$eth;\n\n        (_this3$_web3$eth = _this3._web3.eth).sendTransaction.apply(_this3$_web3$eth, args).on('transactionHash', resolve).on('error', reject);\n      });\n    }\n  }, {\n    key: \"networkId\",\n    value: function networkId() {\n      console.warn('.networkId() is deprecated; use .network instead');\n      return this.network;\n    }\n  }, {\n    key: \"blockNumber\",\n    value: function blockNumber() {\n      return this._currentBlock;\n    }\n  }, {\n    key: \"onNewBlock\",\n    value: function onNewBlock(callback) {\n      if (!this._blockListeners['*']) {\n        this._blockListeners['*'] = [];\n      }\n\n      this._blockListeners['*'].push(callback);\n    }\n  }, {\n    key: \"waitForBlockNumber\",\n    value: function () {\n      var _waitForBlockNumber = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(blockNumber) {\n        var _this4 = this;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(blockNumber < this._currentBlock)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                console.error('Attempted to wait for past block ' + blockNumber);\n                return _context3.abrupt(\"return\");\n\n              case 3:\n                if (!(blockNumber === this._currentBlock)) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", Promise.resolve(blockNumber));\n\n              case 5:\n                if (!this._blockListeners[blockNumber]) {\n                  this._blockListeners[blockNumber] = [];\n                }\n\n                return _context3.abrupt(\"return\", new Promise(function (resolve) {\n                  _this4._blockListeners[blockNumber].push(resolve);\n                }));\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function waitForBlockNumber(_x) {\n        return _waitForBlockNumber.apply(this, arguments);\n      }\n\n      return waitForBlockNumber;\n    }()\n  }, {\n    key: \"_listenForNewBlocks\",\n    value: function _listenForNewBlocks() {\n      var _this5 = this;\n\n      if (this.networkName !== 'test') {\n        log('Using newBlockHeaders subscription for block detection');\n        this._newBlocksSubscription = this.subscribe('newBlockHeaders').on('data', function (_ref) {\n          var blockNumber = _ref.number;\n          if (!_this5._currentBlock) _this5._currentBlock = blockNumber - 1;\n\n          for (var i = _this5._currentBlock + 1; i <= blockNumber; i++) {\n            _this5._updateBlockNumber(i);\n          }\n        });\n      } else {\n        log('Using manual getBlockNumber polling for block detection');\n\n        var updateBlocks = /*#__PURE__*/function () {\n          var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n            var blockNumber, i;\n            return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return _this5._web3.eth.getBlockNumber();\n\n                  case 2:\n                    blockNumber = _context4.sent;\n                    if (!_this5._currentBlock) _this5._currentBlock = blockNumber - 1;\n\n                    for (i = _this5._currentBlock + 1; i <= blockNumber; i++) {\n                      _this5._updateBlockNumber(i);\n                    }\n\n                  case 5:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4);\n          }));\n\n          return function updateBlocks() {\n            return _ref2.apply(this, arguments);\n          };\n        }();\n\n        this._updateBlocksInterval = setInterval(updateBlocks, this._pollingInterval);\n      }\n    }\n  }, {\n    key: \"_updateBlockNumber\",\n    value: function _updateBlockNumber(blockNumber) {\n      log(\"Latest block: \".concat(blockNumber));\n      this._currentBlock = blockNumber;\n\n      if (this._blockListeners[blockNumber]) {\n        this._blockListeners[blockNumber].forEach(function (c) {\n          return c(blockNumber);\n        });\n\n        this._blockListeners[blockNumber] = undefined;\n      }\n\n      if (this._blockListeners['*']) {\n        this._blockListeners['*'].forEach(function (c) {\n          return c(blockNumber);\n        });\n      }\n    }\n  }, {\n    key: \"_stopListeningForNewBlocks\",\n    value: function _stopListeningForNewBlocks() {\n      if (this._newBlocksSubscription) {\n        this._newBlocksSubscription.unsubscribe(function (err) {\n          if (err) throw err;\n        });\n      } else if (this._updateBlocksInterval) {\n        clearInterval(this._updateBlocksInterval);\n      }\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }, {\n    key: \"network\",\n    get: function get() {\n      assert(this._networkId, 'Cannot resolve network ID. Are you connected?');\n      return this._networkId;\n    }\n  }, {\n    key: \"networkName\",\n    get: function get() {\n      return getNetworkName(this.network);\n    }\n  }, {\n    key: \"rpcUrl\",\n    get: function get() {\n      var provider = last(this._web3.currentProvider._providers);\n      return provider.rpcUrl || provider._url || null;\n    }\n  }]);\n\n  return Web3Service;\n}(PrivateService);\n\nexport { Web3Service as default };\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(log, \"log\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/eth/Web3Service.js\");\n  reactHotLoader.register(Web3Service, \"Web3Service\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/eth/Web3Service.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/eth/Web3Service.js"],"names":["PrivateService","promisify","getNetworkName","Web3ServiceList","Web3","makeSigner","last","assert","debug","log","Web3Service","name","_blockListeners","_info","push","get","currentAddress","_ethersSigner","_web3","currentProvider","_transactionSettings","_confirmedBlockCount","abi","address","eth","Contract","settings","_defaultEmitter","setProvider","getProvider","Object","assign","reduce","acc","method","Proxy","target","key","console","warn","manager","onDisconnected","_stopListeningForNewBlocks","emit","provider","transactionSettings","confirmedBlockCount","_pollingInterval","pollingInterval","parseInt","net","getId","_networkId","getBlockNumber","_currentBlock","_updateBlockNumber","_listenForNewBlocks","onNewBlock","ping","account","args","Promise","resolve","reject","sendTransaction","on","network","callback","blockNumber","error","networkName","_newBlocksSubscription","subscribe","number","i","updateBlocks","_updateBlocksInterval","setInterval","forEach","c","undefined","unsubscribe","err","clearInterval","_providers","rpcUrl","_url"],"mappings":"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","sourcesContent":["import { PrivateService } from '@makerdao/services-core';\nimport { promisify, getNetworkName } from '../utils';\nimport Web3ServiceList from '../utils/Web3ServiceList';\nimport Web3 from 'web3';\nimport makeSigner from './web3/ShimEthersSigner';\nimport last from 'lodash/last';\nimport assert from 'assert';\nimport debug from 'debug';\nconst log = debug('dai:Web3Service');\n\nexport default class Web3Service extends PrivateService {\n  constructor(name = 'web3') {\n    super(name, ['accounts', 'timer', 'cache', 'event']);\n\n    this._blockListeners = {};\n    this._info = {};\n    Web3ServiceList.push(this);\n  }\n\n  currentAddress() {\n    return this.get('accounts').currentAddress();\n  }\n\n  getEthersSigner() {\n    if (!this._ethersSigner) this._ethersSigner = makeSigner(this);\n    return this._ethersSigner;\n  }\n\n  web3Provider() {\n    return this._web3.currentProvider;\n  }\n\n  transactionSettings() {\n    return this._transactionSettings;\n  }\n\n  confirmedBlockCount() {\n    return this._confirmedBlockCount;\n  }\n\n  web3Contract(abi, address) {\n    return new this._web3.eth.Contract(abi, address);\n  }\n\n  initialize(settings) {\n    log('initializing...');\n    this._defaultEmitter = this.get('event');\n\n    this._web3 = new Web3();\n    this._web3.setProvider(this.get('accounts').getProvider());\n\n    Object.assign(\n      this,\n      [\n        'estimateGas',\n        'getAccounts',\n        'getBalance',\n        'getBlock',\n        'getPastLogs',\n        'getStorageAt',\n        'getTransaction',\n        'getTransactionReceipt',\n        'subscribe'\n      ].reduce((acc, method) => {\n        acc[method] = (...args) => this._web3.eth[method](...args);\n        return acc;\n      }, {})\n    );\n\n    this.eth = new Proxy(this, {\n      get(target, key) {\n        if (typeof key === 'string')\n          console.warn(`use .${key} instead of .eth.${key}`);\n        return target[key];\n      }\n    });\n\n    this.manager().onDisconnected(() => this._stopListeningForNewBlocks());\n    this._defaultEmitter.emit('web3/INITIALIZED', {\n      provider: settings.provider\n    });\n    this._transactionSettings = settings.transactionSettings;\n    this._confirmedBlockCount = settings.confirmedBlockCount || 5;\n    this._pollingInterval = settings.pollingInterval || 4000;\n  }\n\n  async connect() {\n    log('connecting...');\n\n    this._networkId = parseInt(await promisify(this._web3.eth.net.getId)());\n    this._currentBlock = await this._web3.eth.getBlockNumber();\n    this._updateBlockNumber(this._currentBlock);\n    this._listenForNewBlocks();\n\n    this.onNewBlock(this.get('event').ping);\n    this._defaultEmitter.emit('web3/CONNECTED', {\n      ...this._info\n    });\n  }\n\n  async authenticate() {\n    log('authenticating...');\n\n    this._defaultEmitter.emit('web3/AUTHENTICATED', {\n      account: this.currentAddress()\n    });\n  }\n\n  /*\n    sendTransaction in web3 1.0 behaves differently from its counterpart in\n    0.2x.x. it doesn't resolve until the transaction has a receipt, and throws an\n    error if the receipt indicates that the transaction was reverted.\n    the setup below emulates the old behavior, because TransactionObject still\n    expects it. if there is an error due to the transaction being reverted, it\n    will be ignored, because the promise will have already resolved.\n\n    this can (and should) be refactored when we drop support for HTTP providers.\n\n    https://github.com/ethereum/wiki/wiki/JavaScript-API#web3ethsendtransaction\n    https://web3js.readthedocs.io/en/1.0/web3-eth.html#sendtransaction\n  */\n  sendTransaction(...args) {\n    return new Promise((resolve, reject) => {\n      this._web3.eth\n        .sendTransaction(...args)\n        .on('transactionHash', resolve)\n        .on('error', reject);\n    });\n  }\n\n  networkId() {\n    console.warn('.networkId() is deprecated; use .network instead');\n    return this.network;\n  }\n\n  get network() {\n    assert(this._networkId, 'Cannot resolve network ID. Are you connected?');\n    return this._networkId;\n  }\n\n  get networkName() {\n    return getNetworkName(this.network);\n  }\n\n  get rpcUrl() {\n    const provider = last(this._web3.currentProvider._providers);\n    return provider.rpcUrl || provider._url || null;\n  }\n\n  blockNumber() {\n    return this._currentBlock;\n  }\n\n  onNewBlock(callback) {\n    if (!this._blockListeners['*']) {\n      this._blockListeners['*'] = [];\n    }\n\n    this._blockListeners['*'].push(callback);\n  }\n\n  async waitForBlockNumber(blockNumber) {\n    if (blockNumber < this._currentBlock) {\n      console.error('Attempted to wait for past block ' + blockNumber);\n      return;\n    }\n\n    if (blockNumber === this._currentBlock) {\n      return Promise.resolve(blockNumber);\n    }\n\n    if (!this._blockListeners[blockNumber]) {\n      this._blockListeners[blockNumber] = [];\n    }\n\n    return new Promise(resolve => {\n      this._blockListeners[blockNumber].push(resolve);\n    });\n  }\n\n  _listenForNewBlocks() {\n    if (this.networkName !== 'test') {\n      log('Using newBlockHeaders subscription for block detection');\n      this._newBlocksSubscription = this.subscribe('newBlockHeaders').on(\n        'data',\n        ({ number: blockNumber }) => {\n          if (!this._currentBlock) this._currentBlock = blockNumber - 1;\n          for (let i = this._currentBlock + 1; i <= blockNumber; i++) {\n            this._updateBlockNumber(i);\n          }\n        }\n      );\n    } else {\n      log('Using manual getBlockNumber polling for block detection');\n      const updateBlocks = async () => {\n        const blockNumber = await this._web3.eth.getBlockNumber();\n        if (!this._currentBlock) this._currentBlock = blockNumber - 1;\n        for (let i = this._currentBlock + 1; i <= blockNumber; i++) {\n          this._updateBlockNumber(i);\n        }\n      };\n      this._updateBlocksInterval = setInterval(\n        updateBlocks,\n        this._pollingInterval\n      );\n    }\n  }\n\n  _updateBlockNumber(blockNumber) {\n    log(`Latest block: ${blockNumber}`);\n\n    this._currentBlock = blockNumber;\n    if (this._blockListeners[blockNumber]) {\n      this._blockListeners[blockNumber].forEach(c => c(blockNumber));\n      this._blockListeners[blockNumber] = undefined;\n    }\n\n    if (this._blockListeners['*']) {\n      this._blockListeners['*'].forEach(c => c(blockNumber));\n    }\n  }\n\n  _stopListeningForNewBlocks() {\n    if (this._newBlocksSubscription) {\n      this._newBlocksSubscription.unsubscribe(err => {\n        if (err) throw err;\n      });\n    } else if (this._updateBlocksInterval) {\n      clearInterval(this._updateBlocksInterval);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}