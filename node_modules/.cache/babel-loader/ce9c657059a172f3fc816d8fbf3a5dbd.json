{"ast":null,"code":"import _slicedToArray from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { createMemoizedPoll, createPayloadFetcher } from './helpers';\nimport EventEmitterObj from 'eventemitter2';\nvar EventEmitter2 = EventEmitterObj.EventEmitter2;\n\nvar EventEmitter = /*#__PURE__*/function () {\n  function EventEmitter(disposeSelf) {\n    _classCallCheck(this, EventEmitter);\n\n    this._emitter = new EventEmitter2({\n      wildcard: true,\n      delimiter: '/'\n    });\n    this._polls = [];\n    this._block = null;\n    this._sequenceNum = 1;\n    this._disposeSelf = disposeSelf;\n    this.emit = this.emit.bind(this);\n  }\n\n  _createClass(EventEmitter, [{\n    key: \"emit\",\n    value: function emit(event) {\n      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var block = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._getBlock();\n      // if nobody's listening for this event, don't actually emit it\n      if (this._emitter.listeners(event).length === 0) return;\n      var eventObj = {\n        payload: payload,\n        block: block,\n        type: event,\n        sequence: this._sequenceNum\n      };\n      this._sequenceNum++;\n\n      this._emitter.emit(event, eventObj);\n    }\n  }, {\n    key: \"on\",\n    value: function on(event, listener) {\n      var _this = this;\n\n      this._emitter.on(event, listener); // start polling for state changes if the associated event now has a listener\n\n\n      this._polls.forEach(function (poll) {\n        return _this._emitter.listeners(poll.type()).length > 0 && poll.heat();\n      });\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(event, listener) {\n      var _this2 = this;\n\n      this._emitter.removeListener(event, listener); // stop polling for state changes if the associated event no longer has a listener\n\n\n      this._polls.forEach(function (poll) {\n        return _this2._emitter.listeners(poll.type()).length === 0 && poll.cool();\n      });\n    }\n  }, {\n    key: \"registerPollEvents\",\n    value: function registerPollEvents(eventPayloadMap) {\n      for (var _i = 0, _Object$entries = Object.entries(eventPayloadMap); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            eventType = _Object$entries$_i[0],\n            payloadGetterMap = _Object$entries$_i[1];\n\n        var payloadFetcher = createPayloadFetcher(payloadGetterMap);\n        var memoizedPoll = createMemoizedPoll({\n          type: eventType,\n          emit: this.emit,\n          getState: payloadFetcher\n        });\n\n        this._polls.push(memoizedPoll);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"ping\",\n    value: function ping(block) {\n      this._setBlock(block);\n\n      this._polls.forEach(function (poll) {\n        return poll.ping();\n      });\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.emit = function () {};\n\n      this.on = function () {};\n\n      this._disposeSelf();\n    }\n  }, {\n    key: \"_setBlock\",\n    value: function _setBlock(block) {\n      if (block !== undefined) this._block = block;\n    }\n  }, {\n    key: \"_getBlock\",\n    value: function _getBlock() {\n      return this._block;\n    } // For testing\n\n  }, {\n    key: \"_startPolls\",\n    value: function _startPolls() {\n      this._polls.forEach(function (poll) {\n        return poll.heat();\n      });\n    }\n  }, {\n    key: \"_stopPolls\",\n    value: function _stopPolls() {\n      this._polls.forEach(function (poll) {\n        return poll.cool();\n      });\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return EventEmitter;\n}();\n\nexport { EventEmitter as default };\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(EventEmitter2, \"EventEmitter2\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/utils/events/EventEmitter.js\");\n  reactHotLoader.register(EventEmitter, \"EventEmitter\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/utils/events/EventEmitter.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/utils/events/EventEmitter.js"],"names":["createMemoizedPoll","createPayloadFetcher","EventEmitterObj","EventEmitter2","EventEmitter","disposeSelf","_emitter","wildcard","delimiter","_polls","_block","_sequenceNum","_disposeSelf","emit","bind","event","payload","block","_getBlock","listeners","length","eventObj","type","sequence","listener","on","forEach","poll","heat","removeListener","cool","eventPayloadMap","Object","entries","eventType","payloadGetterMap","payloadFetcher","memoizedPoll","getState","push","_setBlock","ping","undefined"],"mappings":"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","sourcesContent":["import { createMemoizedPoll, createPayloadFetcher } from './helpers';\nimport EventEmitterObj from 'eventemitter2';\nconst { EventEmitter2 } = EventEmitterObj;\n\nexport default class EventEmitter {\n  constructor(disposeSelf) {\n    this._emitter = new EventEmitter2({\n      wildcard: true,\n      delimiter: '/'\n    });\n    this._polls = [];\n    this._block = null;\n    this._sequenceNum = 1;\n    this._disposeSelf = disposeSelf;\n    this.emit = this.emit.bind(this);\n  }\n\n  emit(event, payload = {}, block = this._getBlock()) {\n    // if nobody's listening for this event, don't actually emit it\n    if (this._emitter.listeners(event).length === 0) return;\n    const eventObj = {\n      payload,\n      block,\n      type: event,\n      sequence: this._sequenceNum\n    };\n    this._sequenceNum++;\n    this._emitter.emit(event, eventObj);\n  }\n\n  on(event, listener) {\n    this._emitter.on(event, listener);\n    // start polling for state changes if the associated event now has a listener\n    this._polls.forEach(\n      poll => this._emitter.listeners(poll.type()).length > 0 && poll.heat()\n    );\n  }\n\n  removeListener(event, listener) {\n    this._emitter.removeListener(event, listener);\n    // stop polling for state changes if the associated event no longer has a listener\n    this._polls.forEach(\n      poll => this._emitter.listeners(poll.type()).length === 0 && poll.cool()\n    );\n  }\n\n  registerPollEvents(eventPayloadMap) {\n    for (const [eventType, payloadGetterMap] of Object.entries(\n      eventPayloadMap\n    )) {\n      const payloadFetcher = createPayloadFetcher(payloadGetterMap);\n      const memoizedPoll = createMemoizedPoll({\n        type: eventType,\n        emit: this.emit,\n        getState: payloadFetcher\n      });\n      this._polls.push(memoizedPoll);\n    }\n    return this;\n  }\n\n  ping(block) {\n    this._setBlock(block);\n    this._polls.forEach(poll => poll.ping());\n  }\n\n  dispose() {\n    this.emit = () => {};\n    this.on = () => {};\n    this._disposeSelf();\n  }\n\n  _setBlock(block) {\n    if (block !== undefined) this._block = block;\n  }\n\n  _getBlock() {\n    return this._block;\n  }\n\n  // For testing\n\n  _startPolls() {\n    this._polls.forEach(poll => poll.heat());\n  }\n\n  _stopPolls() {\n    this._polls.forEach(poll => poll.cool());\n  }\n}\n"]},"metadata":{},"sourceType":"module"}