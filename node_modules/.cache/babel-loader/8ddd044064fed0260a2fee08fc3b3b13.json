{"ast":null,"code":"import _objectSpread from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _createForOfIteratorHelper from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { PrivateService } from '@makerdao/services-core';\nimport tokens from '../../contracts/tokens';\nimport contracts from '../../contracts/contracts';\nimport networks from '../../contracts/networks';\nimport Erc20Token from './tokens/Erc20Token';\nimport EtherToken from './tokens/EtherToken';\nimport WethToken from './tokens/WethToken';\nimport PethToken from './tokens/PethToken';\nimport ERC20TokenAbi from '../../contracts/abis/ERC20.json';\nimport assert from 'assert';\n\nvar EthereumTokenService = /*#__PURE__*/function (_PrivateService) {\n  _inherits(EthereumTokenService, _PrivateService);\n\n  var _super = _createSuper(EthereumTokenService);\n\n  function EthereumTokenService() {\n    var _this;\n\n    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'token';\n\n    _classCallCheck(this, EthereumTokenService);\n\n    _this = _super.call(this, name, ['smartContract', 'web3', 'gas', 'transactionManager']);\n    _this._tokens = tokens;\n    _this._addedTokens = {};\n    return _this;\n  }\n\n  _createClass(EthereumTokenService, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (settings.erc20) {\n        var _iterator = _createForOfIteratorHelper(settings.erc20),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var token = _step.value;\n            var symbol = token.symbol || token.currency.symbol;\n            this._tokens[symbol] = symbol;\n            this._addedTokens[symbol] = [token];\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      this._addressOverrides = settings.addressOverrides || {};\n    }\n  }, {\n    key: \"getTokens\",\n    value: function getTokens() {\n      return Object.keys(this._tokens);\n    } // FIXME should be caching/memoizing here\n\n  }, {\n    key: \"getToken\",\n    value: function getToken(symbol, version) {\n      // support passing in Currency constructors\n      if (symbol.symbol) symbol = symbol.symbol;\n      assert(symbol, 'Symbol is blank');\n      assert(this.getTokens().indexOf(symbol) >= 0, \"Symbol \\\"\".concat(symbol, \"\\\" is not recognized\"));\n\n      if (symbol === tokens.ETH) {\n        return new EtherToken(this.get('web3'), this.get('gas'), this.get('transactionManager'));\n      }\n\n      var _this$_getTokenInfo = this._getTokenInfo(symbol, version),\n          address = _this$_getTokenInfo.address,\n          decimals = _this$_getTokenInfo.decimals,\n          abi = _this$_getTokenInfo.abi,\n          currency = _this$_getTokenInfo.currency;\n\n      var scs = this.get('smartContract');\n      var contract = scs.getContractByAddressAndAbi(address, abi || ERC20TokenAbi);\n\n      if (symbol === tokens.WETH) {\n        return new WethToken(contract, this.get('web3'), decimals);\n      }\n\n      if (symbol === tokens.PETH) {\n        if (decimals !== 18) {\n          throw new Error('PethToken code hardcodes 18 decimal places.');\n        }\n\n        var tub = scs.getContract(contracts.SAI_TUB);\n        return new PethToken(contract, this.get('web3'), tub);\n      }\n\n      return new Erc20Token(contract, this.get('web3'), decimals || 18, symbol, currency);\n    }\n  }, {\n    key: \"_getTokenInfo\",\n    value: function _getTokenInfo(symbol, version) {\n      var _this$get = this.get('web3'),\n          network = _this$get.network,\n          networkName = _this$get.networkName;\n\n      var tokenInfoList = this._addedTokens[symbol] || this._getNetworkMapping(network)[symbol];\n\n      assert(tokenInfoList, \"Cannot find token info for \\\"\".concat(symbol, \"\\\"\"));\n      var tokenInfo = version ? tokenInfoList[version - 1] : tokenInfoList[tokenInfoList.length - 1];\n      if (this._addressOverrides[symbol]) tokenInfo.address = this._addressOverrides[symbol];\n      if (typeof tokenInfo.address === 'string') return tokenInfo;\n      return _objectSpread({}, tokenInfo, {\n        address: tokenInfo.address[networkName === 'test' ? 'testnet' : networkName]\n      });\n    }\n  }, {\n    key: \"_getNetworkMapping\",\n    value: function _getNetworkMapping(networkId) {\n      var mapping = networks.filter(function (m) {\n        return m.networkId === networkId;\n      });\n\n      if (mapping.length < 1) {\n        throw new Error('networkId not found');\n      }\n\n      return mapping[0].contracts;\n    }\n  }, {\n    key: \"_selectTokenVersions\",\n    value: function _selectTokenVersions(mapping) {\n      var tokenArray = [];\n\n      for (var token in tokens) {\n        if (token === 'ETH') {\n          tokenArray['ETH'] = [1];\n        }\n\n        if (token in mapping) {\n          (function () {\n            var versionArray = [];\n            mapping[token].forEach(function (e) {\n              versionArray.push(e.version);\n            });\n            tokenArray[token] = versionArray;\n          })();\n        }\n      }\n\n      return tokenArray;\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return EthereumTokenService;\n}(PrivateService);\n\nexport { EthereumTokenService as default };\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(EthereumTokenService, \"EthereumTokenService\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/eth/EthereumTokenService.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/eth/EthereumTokenService.js"],"names":["PrivateService","tokens","contracts","networks","Erc20Token","EtherToken","WethToken","PethToken","ERC20TokenAbi","assert","EthereumTokenService","name","_tokens","_addedTokens","settings","erc20","token","symbol","currency","_addressOverrides","addressOverrides","Object","keys","version","getTokens","indexOf","ETH","get","_getTokenInfo","address","decimals","abi","scs","contract","getContractByAddressAndAbi","WETH","PETH","Error","tub","getContract","SAI_TUB","network","networkName","tokenInfoList","_getNetworkMapping","tokenInfo","length","networkId","mapping","filter","m","tokenArray","versionArray","forEach","e","push"],"mappings":"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","sourcesContent":["import { PrivateService } from '@makerdao/services-core';\nimport tokens from '../../contracts/tokens';\nimport contracts from '../../contracts/contracts';\nimport networks from '../../contracts/networks';\nimport Erc20Token from './tokens/Erc20Token';\nimport EtherToken from './tokens/EtherToken';\nimport WethToken from './tokens/WethToken';\nimport PethToken from './tokens/PethToken';\nimport ERC20TokenAbi from '../../contracts/abis/ERC20.json';\nimport assert from 'assert';\n\nexport default class EthereumTokenService extends PrivateService {\n  constructor(name = 'token') {\n    super(name, ['smartContract', 'web3', 'gas', 'transactionManager']);\n    this._tokens = tokens;\n    this._addedTokens = {};\n  }\n\n  initialize(settings = {}) {\n    if (settings.erc20) {\n      for (const token of settings.erc20) {\n        const symbol = token.symbol || token.currency.symbol;\n        this._tokens[symbol] = symbol;\n        this._addedTokens[symbol] = [token];\n      }\n    }\n\n    this._addressOverrides = settings.addressOverrides || {};\n  }\n\n  getTokens() {\n    return Object.keys(this._tokens);\n  }\n\n  // FIXME should be caching/memoizing here\n  getToken(symbol, version) {\n    // support passing in Currency constructors\n    if (symbol.symbol) symbol = symbol.symbol;\n\n    assert(symbol, 'Symbol is blank');\n    assert(\n      this.getTokens().indexOf(symbol) >= 0,\n      `Symbol \"${symbol}\" is not recognized`\n    );\n\n    if (symbol === tokens.ETH) {\n      return new EtherToken(\n        this.get('web3'),\n        this.get('gas'),\n        this.get('transactionManager')\n      );\n    }\n\n    const { address, decimals, abi, currency } = this._getTokenInfo(\n      symbol,\n      version\n    );\n\n    const scs = this.get('smartContract');\n    const contract = scs.getContractByAddressAndAbi(\n      address,\n      abi || ERC20TokenAbi\n    );\n\n    if (symbol === tokens.WETH) {\n      return new WethToken(contract, this.get('web3'), decimals);\n    }\n\n    if (symbol === tokens.PETH) {\n      if (decimals !== 18) {\n        throw new Error('PethToken code hardcodes 18 decimal places.');\n      }\n      const tub = scs.getContract(contracts.SAI_TUB);\n      return new PethToken(contract, this.get('web3'), tub);\n    }\n\n    return new Erc20Token(\n      contract,\n      this.get('web3'),\n      decimals || 18,\n      symbol,\n      currency\n    );\n  }\n\n  _getTokenInfo(symbol, version) {\n    let { network, networkName } = this.get('web3');\n    const tokenInfoList =\n      this._addedTokens[symbol] || this._getNetworkMapping(network)[symbol];\n\n    assert(tokenInfoList, `Cannot find token info for \"${symbol}\"`);\n\n    const tokenInfo = version\n      ? tokenInfoList[version - 1]\n      : tokenInfoList[tokenInfoList.length - 1];\n\n    if (this._addressOverrides[symbol])\n      tokenInfo.address = this._addressOverrides[symbol];\n\n    if (typeof tokenInfo.address === 'string') return tokenInfo;\n\n    return {\n      ...tokenInfo,\n      address:\n        tokenInfo.address[networkName === 'test' ? 'testnet' : networkName]\n    };\n  }\n\n  _getNetworkMapping(networkId) {\n    const mapping = networks.filter(m => m.networkId === networkId);\n\n    if (mapping.length < 1) {\n      throw new Error('networkId not found');\n    }\n\n    return mapping[0].contracts;\n  }\n\n  _selectTokenVersions(mapping) {\n    const tokenArray = [];\n\n    for (let token in tokens) {\n      if (token === 'ETH') {\n        tokenArray['ETH'] = [1];\n      }\n\n      if (token in mapping) {\n        let versionArray = [];\n        mapping[token].forEach(e => {\n          versionArray.push(e.version);\n        });\n        tokenArray[token] = versionArray;\n      }\n    }\n\n    return tokenArray;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}