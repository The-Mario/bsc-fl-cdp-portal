{"ast":null,"code":"'use strict';\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Backoff = require('backoff');\n\nvar EventEmitter = require('events');\n\nvar inherits = require('util').inherits;\n\nvar WebSocket = global.WebSocket || require('ws');\n\nvar Subprovider = require('./subprovider');\n\nvar createPayload = require('../util/create-payload');\n\nvar WebsocketSubprovider = function (_Subprovider) {\n  _inherits(WebsocketSubprovider, _Subprovider);\n\n  function WebsocketSubprovider(_ref) {\n    var rpcUrl = _ref.rpcUrl,\n        debug = _ref.debug;\n\n    _classCallCheck(this, WebsocketSubprovider); // inherit from EventEmitter\n\n\n    var _this = _possibleConstructorReturn(this, (WebsocketSubprovider.__proto__ || Object.getPrototypeOf(WebsocketSubprovider)).call(this));\n\n    EventEmitter.call(_this);\n    Object.defineProperties(_this, {\n      _backoff: {\n        value: Backoff.exponential({\n          randomisationFactor: 0.2,\n          maxDelay: 5000\n        })\n      },\n      _connectTime: {\n        value: null,\n        writable: true\n      },\n      _log: {\n        value: debug ? function () {\n          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return console.info.apply(console, ['[WSProvider]'].concat(args));\n        } : function () {}\n      },\n      _pendingRequests: {\n        value: new Map()\n      },\n      _socket: {\n        value: null,\n        writable: true\n      },\n      _unhandledRequests: {\n        value: []\n      },\n      _url: {\n        value: rpcUrl\n      }\n    });\n    _this._handleSocketClose = _this._handleSocketClose.bind(_this);\n    _this._handleSocketMessage = _this._handleSocketMessage.bind(_this);\n    _this._handleSocketOpen = _this._handleSocketOpen.bind(_this); // Called when a backoff timeout has finished. Time to try reconnecting.\n\n    _this._backoff.on('ready', function () {\n      _this._openSocket();\n    });\n\n    _this._openSocket();\n\n    return _this;\n  }\n\n  _createClass(WebsocketSubprovider, [{\n    key: 'handleRequest',\n    value: function handleRequest(payload, next, end) {\n      if (!this._socket || this._socket.readyState !== WebSocket.OPEN) {\n        this._unhandledRequests.push(Array.from(arguments));\n\n        this._log('Socket not open. Request queued.');\n\n        return;\n      }\n\n      this._pendingRequests.set(payload.id, [payload, end]);\n\n      var newPayload = createPayload(payload);\n      delete newPayload.origin;\n\n      this._socket.send(JSON.stringify(newPayload));\n\n      this._log('Sent: ' + newPayload.method + ' #' + newPayload.id);\n    }\n  }, {\n    key: '_handleSocketClose',\n    value: function _handleSocketClose(_ref2) {\n      var reason = _ref2.reason,\n          code = _ref2.code;\n\n      this._log('Socket closed, code ' + code + ' (' + (reason || 'no reason') + ')'); // If the socket has been open for longer than 5 seconds, reset the backoff\n\n\n      if (this._connectTime && Date.now() - this._connectTime > 5000) {\n        this._backoff.reset();\n      }\n\n      this._socket.removeEventListener('close', this._handleSocketClose);\n\n      this._socket.removeEventListener('message', this._handleSocketMessage);\n\n      this._socket.removeEventListener('open', this._handleSocketOpen);\n\n      this._socket = null;\n\n      this._backoff.backoff();\n    }\n  }, {\n    key: '_handleSocketMessage',\n    value: function _handleSocketMessage(message) {\n      var payload = void 0;\n\n      try {\n        payload = JSON.parse(message.data);\n      } catch (e) {\n        this._log('Received a message that is not valid JSON:', payload);\n\n        return;\n      } // check if server-sent notification\n\n\n      if (payload.id === undefined) {\n        return this.emit('data', null, payload);\n      } // ignore if missing\n\n\n      if (!this._pendingRequests.has(payload.id)) {\n        return;\n      } // retrieve payload + arguments\n\n\n      var _pendingRequests$get = this._pendingRequests.get(payload.id),\n          _pendingRequests$get2 = _slicedToArray(_pendingRequests$get, 2),\n          originalReq = _pendingRequests$get2[0],\n          end = _pendingRequests$get2[1];\n\n      this._pendingRequests.delete(payload.id);\n\n      this._log('Received: ' + originalReq.method + ' #' + payload.id); // forward response\n\n\n      if (payload.error) {\n        return end(new Error(payload.error.message));\n      }\n\n      end(null, payload.result);\n    }\n  }, {\n    key: '_handleSocketOpen',\n    value: function _handleSocketOpen() {\n      var _this2 = this;\n\n      this._log('Socket open.');\n\n      this._connectTime = Date.now(); // Any pending requests need to be resent because our session was lost\n      // and will not get responses for them in our new session.\n\n      this._pendingRequests.forEach(function (value) {\n        return _this2._unhandledRequests.push(value);\n      });\n\n      this._pendingRequests.clear();\n\n      var unhandledRequests = this._unhandledRequests.splice(0, this._unhandledRequests.length);\n\n      unhandledRequests.forEach(function (request) {\n        _this2.handleRequest.apply(_this2, request);\n      });\n    }\n  }, {\n    key: '_openSocket',\n    value: function _openSocket() {\n      this._log('Opening socket...');\n\n      this._socket = new WebSocket(this._url);\n\n      this._socket.addEventListener('close', this._handleSocketClose);\n\n      this._socket.addEventListener('message', this._handleSocketMessage);\n\n      this._socket.addEventListener('open', this._handleSocketOpen);\n    }\n  }]);\n\n  return WebsocketSubprovider;\n}(Subprovider); // multiple inheritance\n\n\nObject.assign(WebsocketSubprovider.prototype, EventEmitter.prototype);\nmodule.exports = WebsocketSubprovider;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_slicedToArray, \"_slicedToArray\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/web3-provider-engine/dist/es5/subproviders/websocket.js\");\n  reactHotLoader.register(_createClass, \"_createClass\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/web3-provider-engine/dist/es5/subproviders/websocket.js\");\n  reactHotLoader.register(_classCallCheck, \"_classCallCheck\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/web3-provider-engine/dist/es5/subproviders/websocket.js\");\n  reactHotLoader.register(_possibleConstructorReturn, \"_possibleConstructorReturn\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/web3-provider-engine/dist/es5/subproviders/websocket.js\");\n  reactHotLoader.register(_inherits, \"_inherits\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/web3-provider-engine/dist/es5/subproviders/websocket.js\");\n  reactHotLoader.register(inherits, \"inherits\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/web3-provider-engine/dist/es5/subproviders/websocket.js\");\n  reactHotLoader.register(WebSocket, \"WebSocket\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/web3-provider-engine/dist/es5/subproviders/websocket.js\");\n  reactHotLoader.register(WebsocketSubprovider, \"WebsocketSubprovider\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/web3-provider-engine/dist/es5/subproviders/websocket.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"script"}