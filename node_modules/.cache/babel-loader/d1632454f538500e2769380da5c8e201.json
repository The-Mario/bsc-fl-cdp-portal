{"ast":null,"code":"import _regeneratorRuntime from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _createForOfIteratorHelper from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport isEqual from 'lodash/isEqual'; //////////////////////////////\n/////  Polling Helpers  //////\n//////////////////////////////\n\nexport function createPayloadFetcher(payloadGetterMap) {\n  return function () {\n    return Promise.all(Object.entries(payloadGetterMap).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          getter = _ref2[1];\n\n      return getter().then(function (state) {\n        return [key, state];\n      });\n    })).then(function (states) {\n      var payload = {};\n\n      var _iterator = _createForOfIteratorHelper(states),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              key = _step$value[0],\n              state = _step$value[1];\n\n          payload[key] = state;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return payload;\n    });\n  };\n}\nexport function createMemoizedPoll(_ref3) {\n  var _type = _ref3.type,\n      getState = _ref3.getState,\n      emit = _ref3.emit,\n      _ref3$curr = _ref3.curr,\n      curr = _ref3$curr === void 0 ? {} : _ref3$curr,\n      _ref3$live = _ref3.live,\n      _live = _ref3$live === void 0 ? false : _ref3$live;\n\n  return {\n    ping: function ping() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var next, msg;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (_live) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                _context.prev = 2;\n                _context.next = 5;\n                return getState();\n\n              case 5:\n                next = _context.sent;\n\n                if (!isEqual(curr, next)) {\n                  emit(_type, next);\n                  curr = next;\n                }\n\n                _context.next = 13;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n                msg = \"Failed to get latest \".concat(_type, \" state. Message -> \").concat(_context.t0);\n                emit('error', msg);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 9]]);\n      }))();\n    },\n    heat: function heat() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var msg;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!_live) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                _context2.prev = 2;\n                _context2.next = 5;\n                return getState();\n\n              case 5:\n                curr = _context2.sent;\n                _live = true;\n                _context2.next = 13;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](2);\n                msg = \"Failed to get initial \".concat(_type, \" state. Message -> \").concat(_context2.t0);\n                emit('error', msg);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[2, 9]]);\n      }))();\n    },\n    cool: function cool() {\n      if (!_live) return;\n      _live = false;\n    },\n    type: function type() {\n      return _type;\n    },\n    live: function live() {\n      return _live;\n    }\n  };\n}\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(createPayloadFetcher, \"createPayloadFetcher\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/utils/events/helpers.js\");\n  reactHotLoader.register(createMemoizedPoll, \"createMemoizedPoll\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/utils/events/helpers.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/utils/events/helpers.js"],"names":["isEqual","createPayloadFetcher","payloadGetterMap","Promise","all","Object","entries","map","key","getter","then","state","states","payload","createMemoizedPoll","type","getState","emit","curr","live","ping","next","msg","heat","cool"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,OAAP,MAAoB,gBAApB,C,CAEA;AACA;AACA;;AAEA,OAAO,SAASC,oBAAT,CAA8BC,gBAA9B,EAAgD;AACrD,SAAO,YAAM;AACX,WAAOC,OAAO,CAACC,GAAR,CACLC,MAAM,CAACC,OAAP,CAAeJ,gBAAf,EAAiCK,GAAjC,CAAqC;AAAA;AAAA,UAAEC,GAAF;AAAA,UAAOC,MAAP;;AAAA,aACnCA,MAAM,GAAGC,IAAT,CAAc,UAAAC,KAAK;AAAA,eAAI,CAACH,GAAD,EAAMG,KAAN,CAAJ;AAAA,OAAnB,CADmC;AAAA,KAArC,CADK,EAILD,IAJK,CAIA,UAAAE,MAAM,EAAI;AACf,UAAMC,OAAO,GAAG,EAAhB;;AADe,iDAEYD,MAFZ;AAAA;;AAAA;AAEf,4DAAmC;AAAA;AAAA,cAAvBJ,GAAuB;AAAA,cAAlBG,KAAkB;;AACjCE,UAAAA,OAAO,CAACL,GAAD,CAAP,GAAeG,KAAf;AACD;AAJc;AAAA;AAAA;AAAA;AAAA;;AAKf,aAAOE,OAAP;AACD,KAVM,CAAP;AAWD,GAZD;AAaD;AAED,OAAO,SAASC,kBAAT,QAMJ;AAAA,MALDC,KAKC,SALDA,IAKC;AAAA,MAJDC,QAIC,SAJDA,QAIC;AAAA,MAHDC,IAGC,SAHDA,IAGC;AAAA,yBAFDC,IAEC;AAAA,MAFDA,IAEC,2BAFM,EAEN;AAAA,yBADDC,IACC;AAAA,MADDA,KACC,2BADM,KACN;;AACD,SAAO;AACCC,IAAAA,IADD,kBACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACND,KADM;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA,uBAGUH,QAAQ,EAHlB;;AAAA;AAGHK,gBAAAA,IAHG;;AAIT,oBAAI,CAACrB,OAAO,CAACkB,IAAD,EAAOG,IAAP,CAAZ,EAA0B;AACxBJ,kBAAAA,IAAI,CAACF,KAAD,EAAOM,IAAP,CAAJ;AACAH,kBAAAA,IAAI,GAAGG,IAAP;AACD;;AAPQ;AAAA;;AAAA;AAAA;AAAA;AASHC,gBAAAA,GATG,kCAS2BP,KAT3B;AAUTE,gBAAAA,IAAI,CAAC,OAAD,EAAUK,GAAV,CAAJ;;AAVS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYZ,KAbI;AAcCC,IAAAA,IAdD,kBAcQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACPJ,KADO;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA,uBAGIH,QAAQ,EAHZ;;AAAA;AAGTE,gBAAAA,IAHS;AAITC,gBAAAA,KAAI,GAAG,IAAP;AAJS;AAAA;;AAAA;AAAA;AAAA;AAMHG,gBAAAA,GANG,mCAM4BP,KAN5B;AAOTE,gBAAAA,IAAI,CAAC,OAAD,EAAUK,GAAV,CAAJ;;AAPS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASZ,KAvBI;AAwBLE,IAAAA,IAxBK,kBAwBE;AACL,UAAI,CAACL,KAAL,EAAW;AACXA,MAAAA,KAAI,GAAG,KAAP;AACD,KA3BI;AA4BLJ,IAAAA,IA5BK,kBA4BE;AACL,aAAOA,KAAP;AACD,KA9BI;AA+BLI,IAAAA,IA/BK,kBA+BE;AACL,aAAOA,KAAP;AACD;AAjCI,GAAP;AAmCD;;;;;;;;;;0BA1DelB,oB;0BAgBAa,kB","sourcesContent":["import isEqual from 'lodash/isEqual';\n\n//////////////////////////////\n/////  Polling Helpers  //////\n//////////////////////////////\n\nexport function createPayloadFetcher(payloadGetterMap) {\n  return () => {\n    return Promise.all(\n      Object.entries(payloadGetterMap).map(([key, getter]) =>\n        getter().then(state => [key, state])\n      )\n    ).then(states => {\n      const payload = {};\n      for (const [key, state] of states) {\n        payload[key] = state;\n      }\n      return payload;\n    });\n  };\n}\n\nexport function createMemoizedPoll({\n  type,\n  getState,\n  emit,\n  curr = {},\n  live = false\n}) {\n  return {\n    async ping() {\n      if (!live) return;\n      try {\n        const next = await getState();\n        if (!isEqual(curr, next)) {\n          emit(type, next);\n          curr = next;\n        }\n      } catch (err) {\n        const msg = `Failed to get latest ${type} state. Message -> ${err}`;\n        emit('error', msg);\n      }\n    },\n    async heat() {\n      if (live) return;\n      try {\n        curr = await getState();\n        live = true;\n      } catch (err) {\n        const msg = `Failed to get initial ${type} state. Message -> ${err}`;\n        emit('error', msg);\n      }\n    },\n    cool() {\n      if (!live) return;\n      live = false;\n    },\n    type() {\n      return type;\n    },\n    live() {\n      return live;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}