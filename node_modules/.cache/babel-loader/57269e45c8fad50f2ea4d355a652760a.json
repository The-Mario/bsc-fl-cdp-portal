{"ast":null,"code":"import _regeneratorRuntime from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { useEffect, useState } from 'react';\nimport useMaker from 'hooks/useMaker';\nimport debug from 'debug';\nvar log = debug('maker:useDsrEventHistory');\nexport default function useDsrEventHistory(address) {\n  var _useMaker = useMaker(),\n      maker = _useMaker.maker,\n      txLastUpdate = _useMaker.txLastUpdate;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      events = _useState2[0],\n      setEvents = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var isCancelled = false;\n  useEffect(function () {\n    if (!maker || !address) return;\n\n    function getHistory() {\n      return _getHistory.apply(this, arguments);\n    }\n\n    function _getHistory() {\n      _getHistory = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var events;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setEvents(null);\n                setIsLoading(true);\n                log(\"Getting DSR event history for address \".concat(address, \"...\"));\n                _context.next = 5;\n                return maker.service('mcd:savings').getEventHistory(address);\n\n              case 5:\n                events = _context.sent;\n\n                if (!isCancelled) {\n                  _context.next = 8;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 8:\n                log('Got DSR events for address ' + address, events);\n                setEvents(events);\n                setIsLoading(false);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _getHistory.apply(this, arguments);\n    }\n\n    getHistory(); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n    return function () {\n      return isCancelled = true;\n    };\n  }, [maker, address, txLastUpdate === null || txLastUpdate === void 0 ? void 0 : txLastUpdate.save]);\n  return {\n    events: events,\n    isLoading: isLoading\n  };\n}\n\n__signature__(useDsrEventHistory, \"useMaker{{ maker, txLastUpdate }}\\nuseState{[events, setEvents](null)}\\nuseState{[isLoading, setIsLoading](true)}\\nuseEffect{}\", function () {\n  return [useMaker];\n});\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(log, \"log\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useDsrEventHistory.js\");\n  reactHotLoader.register(useDsrEventHistory, \"useDsrEventHistory\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useDsrEventHistory.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useDsrEventHistory.js"],"names":["useEffect","useState","useMaker","debug","log","useDsrEventHistory","address","maker","txLastUpdate","events","setEvents","isLoading","setIsLoading","isCancelled","getHistory","service","getEventHistory","save"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,IAAMC,GAAG,GAAGD,KAAK,CAAC,0BAAD,CAAjB;AAEA,eAAe,SAASE,kBAAT,CAA4BC,OAA5B,EAAqC;AAAA,kBAClBJ,QAAQ,EADU;AAAA,MAC1CK,KAD0C,aAC1CA,KAD0C;AAAA,MACnCC,YADmC,aACnCA,YADmC;;AAAA,kBAEtBP,QAAQ,CAAC,IAAD,CAFc;AAAA;AAAA,MAE3CQ,MAF2C;AAAA,MAEnCC,SAFmC;;AAAA,mBAGhBT,QAAQ,CAAC,IAAD,CAHQ;AAAA;AAAA,MAG3CU,SAH2C;AAAA,MAGhCC,YAHgC;;AAKlD,MAAIC,WAAW,GAAG,KAAlB;AACAb,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACO,KAAD,IAAU,CAACD,OAAf,EAAwB;;AADV,aAECQ,UAFD;AAAA;AAAA;;AAAA;AAAA,6EAEd;AAAA;AAAA;AAAA;AAAA;AAAA;AACEJ,gBAAAA,SAAS,CAAC,IAAD,CAAT;AACAE,gBAAAA,YAAY,CAAC,IAAD,CAAZ;AACAR,gBAAAA,GAAG,iDAA0CE,OAA1C,SAAH;AAHF;AAAA,uBAIuBC,KAAK,CACvBQ,OADkB,CACV,aADU,EAElBC,eAFkB,CAEFV,OAFE,CAJvB;;AAAA;AAIQG,gBAAAA,MAJR;;AAAA,qBAOMI,WAPN;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAQET,gBAAAA,GAAG,CAAC,gCAAgCE,OAAjC,EAA0CG,MAA1C,CAAH;AACAC,gBAAAA,SAAS,CAACD,MAAD,CAAT;AACAG,gBAAAA,YAAY,CAAC,KAAD,CAAZ;;AAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFc;AAAA;AAAA;;AAcdE,IAAAA,UAAU,GAdI,CAed;;AACA,WAAO;AAAA,aAAOD,WAAW,GAAG,IAArB;AAAA,KAAP;AACD,GAjBQ,EAiBN,CAACN,KAAD,EAAQD,OAAR,EAAiBE,YAAjB,aAAiBA,YAAjB,uBAAiBA,YAAY,CAAES,IAA/B,CAjBM,CAAT;AAmBA,SAAO;AAAER,IAAAA,MAAM,EAANA,MAAF;AAAUE,IAAAA,SAAS,EAATA;AAAV,GAAP;AACD;;cA1BuBN,kB;UACUH,Q;;;;;;;;;;;;0BAH5BE,G;0BAEkBC,kB","sourcesContent":["import { useEffect, useState } from 'react';\nimport useMaker from 'hooks/useMaker';\nimport debug from 'debug';\nconst log = debug('maker:useDsrEventHistory');\n\nexport default function useDsrEventHistory(address) {\n  const { maker, txLastUpdate } = useMaker();\n  const [events, setEvents] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  let isCancelled = false;\n  useEffect(() => {\n    if (!maker || !address) return;\n    async function getHistory() {\n      setEvents(null);\n      setIsLoading(true);\n      log(`Getting DSR event history for address ${address}...`);\n      const events = await maker\n        .service('mcd:savings')\n        .getEventHistory(address);\n      if (isCancelled) return;\n      log('Got DSR events for address ' + address, events);\n      setEvents(events);\n      setIsLoading(false);\n    }\n    getHistory();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    return () => (isCancelled = true);\n  }, [maker, address, txLastUpdate?.save]);\n\n  return { events, isLoading };\n}\n"]},"metadata":{},"sourceType":"module"}