{"ast":null,"code":"import _objectWithoutProperties from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _styled from \"styled-components\";\nvar _jsxFileName = \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/LoadingToggle.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React from 'react';\nimport { Grid, Text, Loader, Toggle } from '@makerdao/ui-components-core';\nimport { getColor } from 'styles/theme';\n\nvar _StyledToggle = _styled(Toggle).withConfig({\n  displayName: \"LoadingToggle___StyledToggle\",\n  componentId: \"sc-1uxe04y-0\"\n})(function (p) {\n  return {\n    opacity: p._css\n  };\n});\n\nfunction LoadingToggle(_ref) {\n  var defaultText = _ref.defaultText,\n      loadingText = _ref.loadingText,\n      completeText = _ref.completeText,\n      isLoading = _ref.isLoading,\n      isComplete = _ref.isComplete,\n      onToggle = _ref.onToggle,\n      disabled = _ref.disabled,\n      trackBtnClick = _ref.trackBtnClick,\n      props = _objectWithoutProperties(_ref, [\"defaultText\", \"loadingText\", \"completeText\", \"isLoading\", \"isComplete\", \"onToggle\", \"disabled\", \"trackBtnClick\"]);\n\n  var text = isLoading ? loadingText : isComplete ? completeText : defaultText;\n  return /*#__PURE__*/React.createElement(Grid, Object.assign({\n    alignItems: \"center\",\n    gridTemplateColumns: \"auto 1fr auto\"\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Text, {\n    t: \"body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, text), isLoading && /*#__PURE__*/React.createElement(Loader, {\n    display: \"inline-block\",\n    size: \"1.8rem\",\n    color: getColor('spinner'),\n    mr: \"xs\",\n    justifySelf: \"end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(_StyledToggle, {\n    active: isComplete || isLoading,\n    onClick: function onClick() {\n      if (trackBtnClick) trackBtnClick('Allowance');\n      onToggle();\n    },\n    justifySelf: \"end\",\n    disabled: disabled,\n    _css: disabled ? 0.4 : 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar _default = LoadingToggle;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(LoadingToggle, \"LoadingToggle\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/LoadingToggle.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/LoadingToggle.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/components/LoadingToggle.js"],"names":["React","Grid","Text","Loader","Toggle","getColor","opacity","LoadingToggle","defaultText","loadingText","completeText","isLoading","isComplete","onToggle","disabled","trackBtnClick","props","text"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,MAA7B,QAA2C,8BAA3C;AACA,SAASC,QAAT,QAAyB,cAAzB;;;;;;SA+Ba;AAAEC,IAAAA,OAAF;AAAA,G;;;AA7Bb,SAASC,aAAT,OAUG;AAAA,MATDC,WASC,QATDA,WASC;AAAA,MARDC,WAQC,QARDA,WAQC;AAAA,MAPDC,YAOC,QAPDA,YAOC;AAAA,MANDC,SAMC,QANDA,SAMC;AAAA,MALDC,UAKC,QALDA,UAKC;AAAA,MAJDC,QAIC,QAJDA,QAIC;AAAA,MAHDC,QAGC,QAHDA,QAGC;AAAA,MAFDC,aAEC,QAFDA,aAEC;AAAA,MADEC,KACF;;AACD,MAAMC,IAAI,GAAGN,SAAS,GAClBF,WADkB,GAElBG,UAAU,GACVF,YADU,GAEVF,WAJJ;AAKA,sBACE,oBAAC,IAAD;AAAM,IAAA,UAAU,EAAC,QAAjB;AAA0B,IAAA,mBAAmB,EAAC;AAA9C,KAAkEQ,KAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE,oBAAC,IAAD;AAAM,IAAA,CAAC,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgBC,IAAhB,CADF,EAEGN,SAAS,iBACR,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,cADV;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,KAAK,EAAEN,QAAQ,CAAC,SAAD,CAHjB;AAIE,IAAA,EAAE,EAAC,IAJL;AAKE,IAAA,WAAW,EAAC,KALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,eAWE;AAEE,IAAA,MAAM,EAAEO,UAAU,IAAID,SAFxB;AAGE,IAAA,OAAO,EAAE,mBAAM;AACb,UAAII,aAAJ,EAAmBA,aAAa,CAAC,WAAD,CAAb;AACnBF,MAAAA,QAAQ;AACT,KANH;AAOE,IAAA,WAAW,EAAC,KAPd;AAQE,IAAA,QAAQ,EAAEC,QARZ;AAAA,UACkBA,QAAQ,GAAG,GAAH,GAAS,CADnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CADF;AAwBD;;eAEcP,a;AAAf;;;;;;;;;;0BA1CSA,a","sourcesContent":["import React from 'react';\nimport { Grid, Text, Loader, Toggle } from '@makerdao/ui-components-core';\nimport { getColor } from 'styles/theme';\n\nfunction LoadingToggle({\n  defaultText,\n  loadingText,\n  completeText,\n  isLoading,\n  isComplete,\n  onToggle,\n  disabled,\n  trackBtnClick,\n  ...props\n}) {\n  const text = isLoading\n    ? loadingText\n    : isComplete\n    ? completeText\n    : defaultText;\n  return (\n    <Grid alignItems=\"center\" gridTemplateColumns=\"auto 1fr auto\" {...props}>\n      <Text t=\"body\">{text}</Text>\n      {isLoading && (\n        <Loader\n          display=\"inline-block\"\n          size=\"1.8rem\"\n          color={getColor('spinner')}\n          mr=\"xs\"\n          justifySelf=\"end\"\n        />\n      )}\n      <Toggle\n        css={{ opacity: disabled ? 0.4 : 1 }}\n        active={isComplete || isLoading}\n        onClick={() => {\n          if (trackBtnClick) trackBtnClick('Allowance');\n          onToggle();\n        }}\n        justifySelf=\"end\"\n        disabled={disabled}\n      />\n    </Grid>\n  );\n}\n\nexport default LoadingToggle;\n"]},"metadata":{},"sourceType":"module"}