{"ast":null,"code":"import _regeneratorRuntime from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { useReducer, useCallback } from 'react';\nimport useMaker from 'hooks/useMaker';\nimport useModal from 'hooks/useModal';\nimport { AccountTypes } from 'utils/constants';\nimport { addTokenBalances } from 'utils/ethereum';\nvar TREZOR_PATH = \"44'/60'/0'/0/0\";\n\nvar computeAddressBalances = function computeAddressBalances(addresses) {\n  return Promise.all(addresses.map(function (address) {\n    return addTokenBalances({\n      address: address\n    });\n  }));\n};\n\nvar initialState = {\n  fetching: false,\n  accounts: [],\n  chooseCallbacks: {},\n  totalNumFetches: 0\n};\n\nvar reducer = function reducer(state, action) {\n  var type = action.type,\n      payload = action.payload;\n\n  switch (type) {\n    case 'connect-start':\n      return initialState;\n\n    case 'fetch-start':\n      return _objectSpread({}, state, {\n        fetching: true\n      });\n\n    case 'connect-success':\n      return _objectSpread({}, state, {\n        fetching: false\n      });\n\n    case 'fetch-success':\n      {\n        var totalNumFetches = state.totalNumFetches + 1;\n        return _objectSpread({}, state, {\n          totalNumFetches: totalNumFetches,\n          fetching: false,\n          accounts: [].concat(_toConsumableArray(state.accounts), _toConsumableArray(payload.accounts)),\n          chooseCallbacks: _objectSpread({}, state.chooseCallbacks, _defineProperty({}, totalNumFetches - 1, payload.chooseCallback))\n        });\n      }\n\n    case 'error':\n      return _objectSpread({}, state, {\n        fetching: false\n      });\n\n    default:\n      throw new Error(\"Unexpected action with type '\".concat(type, \"'\"));\n  }\n};\n\nvar DEFAULT_ACCOUNTS_LENGTH = 25; // Helper hook to show trezor connection modals. Only for use in this app.\n\nexport function useTrezor(_ref) {\n  var onAccountChosen = _ref.onAccountChosen;\n\n  var _useModal = useModal(),\n      show = _useModal.show;\n\n  var connectTrezorWallet = useCallback(function () {\n    show({\n      modalType: 'hardwareaccountselect',\n      modalProps: {\n        type: AccountTypes.TREZOR,\n        path: TREZOR_PATH,\n        confirmAddress: function confirmAddress(address) {\n          onAccountChosen({\n            address: address\n          }, AccountTypes.TREZOR);\n        }\n      }\n    });\n  }, [show, onAccountChosen]);\n  return {\n    connectTrezorWallet: connectTrezorWallet\n  };\n} // Helper hook to show dcent connection modals. Only for use in this app.\n\n__signature__(useTrezor, \"useModal{{ show }}\\nuseCallback{connectTrezorWallet}\", function () {\n  return [useModal];\n});\n\nexport function useDcent(_ref2) {\n  var onAccountChosen = _ref2.onAccountChosen;\n\n  var _useModal2 = useModal(),\n      show = _useModal2.show;\n\n  var connectDcentWallet = useCallback(function () {\n    show({\n      modalType: 'hardwareaccountselect',\n      modalProps: {\n        type: AccountTypes.DCENT,\n        confirmAddress: function confirmAddress(address) {\n          onAccountChosen({\n            address: address\n          }, AccountTypes.DCENT);\n        }\n      }\n    });\n  }, [show, onAccountChosen]);\n  return {\n    connectDcentWallet: connectDcentWallet\n  };\n} // Helper hook to show ledger connection modals. Only for use in this app.\n\n__signature__(useDcent, \"useModal{{ show }}\\nuseCallback{connectDcentWallet}\", function () {\n  return [useModal];\n});\n\nexport function useLedger(_ref3) {\n  var onAccountChosen = _ref3.onAccountChosen;\n\n  var _useModal3 = useModal(),\n      show = _useModal3.show;\n\n  var accountSelection = useCallback(function (path) {\n    show({\n      modalType: 'hardwareaccountselect',\n      modalProps: {\n        type: AccountTypes.LEDGER,\n        path: path,\n        confirmAddress: function confirmAddress(address) {\n          onAccountChosen({\n            address: address\n          }, AccountTypes.LEDGER);\n        }\n      }\n    });\n  }, [show, onAccountChosen]);\n  var connectLedgerWallet = useCallback(function () {\n    show({\n      modalType: 'ledgertype',\n      modalProps: {\n        onPathSelect: accountSelection\n      }\n    });\n  }, [accountSelection, show]);\n  return {\n    connectLedgerWallet: connectLedgerWallet\n  };\n}\n\n__signature__(useLedger, \"useModal{{ show }}\\nuseCallback{accountSelection}\\nuseCallback{connectLedgerWallet}\", function () {\n  return [useModal];\n});\n\nfunction useHardwareWallet(_ref4) {\n  var type = _ref4.type,\n      path = _ref4.path,\n      _ref4$accountsLength = _ref4.accountsLength,\n      accountsLength = _ref4$accountsLength === void 0 ? DEFAULT_ACCOUNTS_LENGTH : _ref4$accountsLength;\n\n  var _useMaker = useMaker(),\n      maker = _useMaker.maker;\n\n  var _useReducer = useReducer(reducer, initialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var connect = useCallback(function () {\n    dispatch({\n      type: 'connect-start'\n    });\n    return maker.addAccount({\n      type: type,\n      path: path,\n      accountsOffset: 0,\n      accountsLength: accountsLength,\n      choose: function () {\n        var _choose = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(addresses, chooseCallback) {\n          var accounts;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return computeAddressBalances(addresses);\n\n                case 2:\n                  accounts = _context.sent;\n                  dispatch({\n                    type: 'connect-success'\n                  });\n                  dispatch({\n                    type: 'fetch-success',\n                    payload: {\n                      chooseCallback: chooseCallback,\n                      accounts: accounts,\n                      offset: 0\n                    }\n                  });\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function choose(_x, _x2) {\n          return _choose.apply(this, arguments);\n        }\n\n        return choose;\n      }()\n    });\n  }, [accountsLength, maker, path, type]);\n  var fetchMore = useCallback(function () {\n    return new Promise(function (resolve, reject) {\n      dispatch({\n        type: 'fetch-start'\n      });\n      maker.addAccount({\n        type: type,\n        path: path,\n        accountsOffset: state.accounts.length,\n        accountsLength: accountsLength,\n        choose: function () {\n          var _choose2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(addresses, chooseCallback) {\n            var accounts;\n            return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.next = 2;\n                    return computeAddressBalances(addresses);\n\n                  case 2:\n                    accounts = _context2.sent;\n                    dispatch({\n                      type: 'fetch-success',\n                      payload: {\n                        accounts: accounts,\n                        offset: state.accounts.length,\n                        chooseCallback: chooseCallback\n                      }\n                    });\n                    resolve(accounts);\n\n                  case 5:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee2);\n          }));\n\n          function choose(_x3, _x4) {\n            return _choose2.apply(this, arguments);\n          }\n\n          return choose;\n        }()\n      }).catch(function (err) {\n        dispatch({\n          type: 'error'\n        });\n        reject(err);\n      });\n    });\n  }, [accountsLength, maker, path, type, state.accounts.length]);\n\n  function pickAccount(address, page, numAccountsPerFetch, numAccountsPerPage) {\n    var fetchNumber = Math.floor(page * numAccountsPerPage / numAccountsPerFetch);\n\n    for (var i = 0; i < state.totalNumFetches; i++) {\n      //error out unused callbacks\n      if (i !== fetchNumber) state.chooseCallbacks[i]('error');\n    }\n\n    state.chooseCallbacks[fetchNumber](null, address);\n  }\n\n  return {\n    fetchMore: fetchMore,\n    connect: connect,\n    fetching: state.fetching,\n    accounts: state.accounts,\n    pickAccount: pickAccount\n  };\n}\n\n__signature__(useHardwareWallet, \"useMaker{{ maker }}\\nuseReducer{[state, dispatch](initialState)}\\nuseCallback{connect}\\nuseCallback{fetchMore}\", function () {\n  return [useMaker];\n});\n\nvar _default = useHardwareWallet;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(TREZOR_PATH, \"TREZOR_PATH\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useHardwareWallet.js\");\n  reactHotLoader.register(computeAddressBalances, \"computeAddressBalances\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useHardwareWallet.js\");\n  reactHotLoader.register(initialState, \"initialState\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useHardwareWallet.js\");\n  reactHotLoader.register(reducer, \"reducer\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useHardwareWallet.js\");\n  reactHotLoader.register(DEFAULT_ACCOUNTS_LENGTH, \"DEFAULT_ACCOUNTS_LENGTH\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useHardwareWallet.js\");\n  reactHotLoader.register(useTrezor, \"useTrezor\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useHardwareWallet.js\");\n  reactHotLoader.register(useDcent, \"useDcent\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useHardwareWallet.js\");\n  reactHotLoader.register(useLedger, \"useLedger\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useHardwareWallet.js\");\n  reactHotLoader.register(useHardwareWallet, \"useHardwareWallet\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useHardwareWallet.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useHardwareWallet.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useHardwareWallet.js"],"names":["useReducer","useCallback","useMaker","useModal","AccountTypes","addTokenBalances","TREZOR_PATH","computeAddressBalances","addresses","Promise","all","map","address","initialState","fetching","accounts","chooseCallbacks","totalNumFetches","reducer","state","action","type","payload","chooseCallback","Error","DEFAULT_ACCOUNTS_LENGTH","useTrezor","onAccountChosen","show","connectTrezorWallet","modalType","modalProps","TREZOR","path","confirmAddress","useDcent","connectDcentWallet","DCENT","useLedger","accountSelection","LEDGER","connectLedgerWallet","onPathSelect","useHardwareWallet","accountsLength","maker","dispatch","connect","addAccount","accountsOffset","choose","offset","fetchMore","resolve","reject","length","catch","err","pickAccount","page","numAccountsPerFetch","numAccountsPerPage","fetchNumber","Math","floor","i"],"mappings":"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","sourcesContent":["import { useReducer, useCallback } from 'react';\nimport useMaker from 'hooks/useMaker';\nimport useModal from 'hooks/useModal';\nimport { AccountTypes } from 'utils/constants';\nimport { addTokenBalances } from 'utils/ethereum';\n\nconst TREZOR_PATH = \"44'/60'/0'/0/0\";\n\nconst computeAddressBalances = addresses =>\n  Promise.all(\n    addresses.map(address =>\n      addTokenBalances({\n        address\n      })\n    )\n  );\n\nconst initialState = {\n  fetching: false,\n  accounts: [],\n  chooseCallbacks: {},\n  totalNumFetches: 0\n};\n\nconst reducer = (state, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case 'connect-start':\n      return initialState;\n    case 'fetch-start':\n      return { ...state, fetching: true };\n    case 'connect-success':\n      return { ...state, fetching: false };\n    case 'fetch-success': {\n      const totalNumFetches = state.totalNumFetches + 1;\n      return {\n        ...state,\n        totalNumFetches,\n        fetching: false,\n        accounts: [...state.accounts, ...payload.accounts],\n        chooseCallbacks: {\n          ...state.chooseCallbacks,\n          [totalNumFetches - 1]: payload.chooseCallback\n        }\n      };\n    }\n    case 'error':\n      return {\n        ...state,\n        fetching: false\n      };\n    default:\n      throw new Error(`Unexpected action with type '${type}'`);\n  }\n};\n\nconst DEFAULT_ACCOUNTS_LENGTH = 25;\n\n// Helper hook to show trezor connection modals. Only for use in this app.\nexport function useTrezor({ onAccountChosen }) {\n  const { show } = useModal();\n\n  const connectTrezorWallet = useCallback(() => {\n    show({\n      modalType: 'hardwareaccountselect',\n      modalProps: {\n        type: AccountTypes.TREZOR,\n        path: TREZOR_PATH,\n        confirmAddress: address => {\n          onAccountChosen({ address }, AccountTypes.TREZOR);\n        }\n      }\n    });\n  }, [show, onAccountChosen]);\n\n  return { connectTrezorWallet };\n}\n\n// Helper hook to show dcent connection modals. Only for use in this app.\nexport function useDcent({ onAccountChosen }) {\n  const { show } = useModal();\n\n  const connectDcentWallet = useCallback(() => {\n    show({\n      modalType: 'hardwareaccountselect',\n      modalProps: {\n        type: AccountTypes.DCENT,\n        confirmAddress: address => {\n          onAccountChosen({ address }, AccountTypes.DCENT);\n        }\n      }\n    });\n  }, [show, onAccountChosen]);\n\n  return { connectDcentWallet };\n}\n\n// Helper hook to show ledger connection modals. Only for use in this app.\nexport function useLedger({ onAccountChosen }) {\n  const { show } = useModal();\n  const accountSelection = useCallback(\n    path => {\n      show({\n        modalType: 'hardwareaccountselect',\n        modalProps: {\n          type: AccountTypes.LEDGER,\n          path,\n          confirmAddress: address => {\n            onAccountChosen({ address }, AccountTypes.LEDGER);\n          }\n        }\n      });\n    },\n    [show, onAccountChosen]\n  );\n\n  const connectLedgerWallet = useCallback(() => {\n    show({\n      modalType: 'ledgertype',\n      modalProps: {\n        onPathSelect: accountSelection\n      }\n    });\n  }, [accountSelection, show]);\n\n  return { connectLedgerWallet };\n}\n\nfunction useHardwareWallet({\n  type,\n  path,\n  accountsLength = DEFAULT_ACCOUNTS_LENGTH\n}) {\n  const { maker } = useMaker();\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const connect = useCallback(() => {\n    dispatch({ type: 'connect-start' });\n    return maker.addAccount({\n      type,\n      path,\n      accountsOffset: 0,\n      accountsLength,\n      choose: async (addresses, chooseCallback) => {\n        const accounts = await computeAddressBalances(addresses);\n        dispatch({ type: 'connect-success' });\n        dispatch({\n          type: 'fetch-success',\n          payload: { chooseCallback, accounts, offset: 0 }\n        });\n      }\n    });\n  }, [accountsLength, maker, path, type]);\n\n  const fetchMore = useCallback(() => {\n    return new Promise((resolve, reject) => {\n      dispatch({ type: 'fetch-start' });\n      maker\n        .addAccount({\n          type,\n          path,\n          accountsOffset: state.accounts.length,\n          accountsLength,\n          choose: async (addresses, chooseCallback) => {\n            const accounts = await computeAddressBalances(addresses);\n            dispatch({\n              type: 'fetch-success',\n              payload: {\n                accounts,\n                offset: state.accounts.length,\n                chooseCallback\n              }\n            });\n            resolve(accounts);\n          }\n        })\n        .catch(err => {\n          dispatch({ type: 'error' });\n          reject(err);\n        });\n    });\n  }, [accountsLength, maker, path, type, state.accounts.length]);\n\n  function pickAccount(address, page, numAccountsPerFetch, numAccountsPerPage) {\n    const fetchNumber = Math.floor(\n      (page * numAccountsPerPage) / numAccountsPerFetch\n    );\n    for (let i = 0; i < state.totalNumFetches; i++) {\n      //error out unused callbacks\n      if (i !== fetchNumber) state.chooseCallbacks[i]('error');\n    }\n    state.chooseCallbacks[fetchNumber](null, address);\n  }\n\n  return {\n    fetchMore,\n    connect,\n    fetching: state.fetching,\n    accounts: state.accounts,\n    pickAccount\n  };\n}\n\nexport default useHardwareWallet;\n"]},"metadata":{},"sourceType":"module"}