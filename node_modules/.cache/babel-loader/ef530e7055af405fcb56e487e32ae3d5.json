{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nexport var wallets = {\n  IMTOKEN: 'imtoken',\n  ALPHA: 'alphawallet',\n  METAMASK: 'metamask',\n  TRUST: 'trust',\n  COINBASE: 'coinbase',\n  CIPHER: 'cipher',\n  MIST: 'mist',\n  PARITY: 'parity',\n  INFURA: 'infura',\n  LOCALHOST: 'localhost',\n  OTHER: 'other'\n};\nexport function getWebClientProviderName() {\n  if (window.imToken) return wallets.IMTOKEN;\n  if (!window.web3 || typeof window.web3.currentProvider === 'undefined') return '';\n  if (window.web3.currentProvider.isAlphaWallet) return wallets.ALPHA;\n  if (window.web3.currentProvider.isMetaMask) return wallets.METAMASK;\n  if (window.web3.currentProvider.isTrust) return wallets.TRUST;\n  if (typeof window.SOFA !== 'undefined') return wallets.COINBASE;\n  if (typeof window.__CIPHER__ !== 'undefined') return wallets.CIPHER;\n  if (window.web3.currentProvider.constructor.name === 'EthereumProvider') return wallets.MIST;\n  if (window.web3.currentProvider.constructor.name === 'Web3FrameProvider') return wallets.PARITY;\n  if (window.web3.currentProvider.host && window.web3.currentProvider.host.indexOf('infura') !== -1) return wallets.INFURA;\n  if (window.web3.currentProvider.host && window.web3.currentProvider.host.indexOf('localhost') !== -1) return wallets.LOCALHOST;\n  return wallets.OTHER;\n}\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(wallets, \"wallets\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/utils/web3.js\");\n  reactHotLoader.register(getWebClientProviderName, \"getWebClientProviderName\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/utils/web3.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/utils/web3.js"],"names":["wallets","IMTOKEN","ALPHA","METAMASK","TRUST","COINBASE","CIPHER","MIST","PARITY","INFURA","LOCALHOST","OTHER","getWebClientProviderName","window","imToken","web3","currentProvider","isAlphaWallet","isMetaMask","isTrust","SOFA","__CIPHER__","constructor","name","host","indexOf"],"mappings":";;;;;;;;;AAAA,OAAO,IAAMA,OAAO,GAAG;AACrBC,EAAAA,OAAO,EAAE,SADY;AAErBC,EAAAA,KAAK,EAAE,aAFc;AAGrBC,EAAAA,QAAQ,EAAE,UAHW;AAIrBC,EAAAA,KAAK,EAAE,OAJc;AAKrBC,EAAAA,QAAQ,EAAE,UALW;AAMrBC,EAAAA,MAAM,EAAE,QANa;AAOrBC,EAAAA,IAAI,EAAE,MAPe;AAQrBC,EAAAA,MAAM,EAAE,QARa;AASrBC,EAAAA,MAAM,EAAE,QATa;AAUrBC,EAAAA,SAAS,EAAE,WAVU;AAWrBC,EAAAA,KAAK,EAAE;AAXc,CAAhB;AAcP,OAAO,SAASC,wBAAT,GAAoC;AACzC,MAAIC,MAAM,CAACC,OAAX,EAAoB,OAAOd,OAAO,CAACC,OAAf;AAEpB,MAAI,CAACY,MAAM,CAACE,IAAR,IAAgB,OAAOF,MAAM,CAACE,IAAP,CAAYC,eAAnB,KAAuC,WAA3D,EACE,OAAO,EAAP;AAEF,MAAIH,MAAM,CAACE,IAAP,CAAYC,eAAZ,CAA4BC,aAAhC,EAA+C,OAAOjB,OAAO,CAACE,KAAf;AAE/C,MAAIW,MAAM,CAACE,IAAP,CAAYC,eAAZ,CAA4BE,UAAhC,EAA4C,OAAOlB,OAAO,CAACG,QAAf;AAE5C,MAAIU,MAAM,CAACE,IAAP,CAAYC,eAAZ,CAA4BG,OAAhC,EAAyC,OAAOnB,OAAO,CAACI,KAAf;AAEzC,MAAI,OAAOS,MAAM,CAACO,IAAd,KAAuB,WAA3B,EAAwC,OAAOpB,OAAO,CAACK,QAAf;AAExC,MAAI,OAAOQ,MAAM,CAACQ,UAAd,KAA6B,WAAjC,EAA8C,OAAOrB,OAAO,CAACM,MAAf;AAE9C,MAAIO,MAAM,CAACE,IAAP,CAAYC,eAAZ,CAA4BM,WAA5B,CAAwCC,IAAxC,KAAiD,kBAArD,EACE,OAAOvB,OAAO,CAACO,IAAf;AAEF,MAAIM,MAAM,CAACE,IAAP,CAAYC,eAAZ,CAA4BM,WAA5B,CAAwCC,IAAxC,KAAiD,mBAArD,EACE,OAAOvB,OAAO,CAACQ,MAAf;AAEF,MACEK,MAAM,CAACE,IAAP,CAAYC,eAAZ,CAA4BQ,IAA5B,IACAX,MAAM,CAACE,IAAP,CAAYC,eAAZ,CAA4BQ,IAA5B,CAAiCC,OAAjC,CAAyC,QAAzC,MAAuD,CAAC,CAF1D,EAIE,OAAOzB,OAAO,CAACS,MAAf;AAEF,MACEI,MAAM,CAACE,IAAP,CAAYC,eAAZ,CAA4BQ,IAA5B,IACAX,MAAM,CAACE,IAAP,CAAYC,eAAZ,CAA4BQ,IAA5B,CAAiCC,OAAjC,CAAyC,WAAzC,MAA0D,CAAC,CAF7D,EAIE,OAAOzB,OAAO,CAACU,SAAf;AAEF,SAAOV,OAAO,CAACW,KAAf;AACD;;;;;;;;;;0BAjDYX,O;0BAcGY,wB","sourcesContent":["export const wallets = {\n  IMTOKEN: 'imtoken',\n  ALPHA: 'alphawallet',\n  METAMASK: 'metamask',\n  TRUST: 'trust',\n  COINBASE: 'coinbase',\n  CIPHER: 'cipher',\n  MIST: 'mist',\n  PARITY: 'parity',\n  INFURA: 'infura',\n  LOCALHOST: 'localhost',\n  OTHER: 'other'\n};\n\nexport function getWebClientProviderName() {\n  if (window.imToken) return wallets.IMTOKEN;\n\n  if (!window.web3 || typeof window.web3.currentProvider === 'undefined')\n    return '';\n\n  if (window.web3.currentProvider.isAlphaWallet) return wallets.ALPHA;\n\n  if (window.web3.currentProvider.isMetaMask) return wallets.METAMASK;\n\n  if (window.web3.currentProvider.isTrust) return wallets.TRUST;\n\n  if (typeof window.SOFA !== 'undefined') return wallets.COINBASE;\n\n  if (typeof window.__CIPHER__ !== 'undefined') return wallets.CIPHER;\n\n  if (window.web3.currentProvider.constructor.name === 'EthereumProvider')\n    return wallets.MIST;\n\n  if (window.web3.currentProvider.constructor.name === 'Web3FrameProvider')\n    return wallets.PARITY;\n\n  if (\n    window.web3.currentProvider.host &&\n    window.web3.currentProvider.host.indexOf('infura') !== -1\n  )\n    return wallets.INFURA;\n\n  if (\n    window.web3.currentProvider.host &&\n    window.web3.currentProvider.host.indexOf('localhost') !== -1\n  )\n    return wallets.LOCALHOST;\n\n  return wallets.OTHER;\n}\n"]},"metadata":{},"sourceType":"module"}