{"ast":null,"code":"'use strict';\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nvar ethUtil = require('ethereumjs-util');\n\nvar assert = require('./assert.js');\n\nmodule.exports = {\n  bufferToQuantityHex: bufferToQuantityHex,\n  intToQuantityHex: intToQuantityHex,\n  quantityHexToInt: quantityHexToInt\n  /*\n   * As per https://github.com/ethereum/wiki/wiki/JSON-RPC#hex-value-encoding\n   * Quantities should be represented by the most compact hex representation possible\n   * This means that no leading zeroes are allowed. There helpers make it easy\n   * to convert to and from integers and their compact hex representation\n   */\n\n};\n\nfunction bufferToQuantityHex(buffer) {\n  buffer = ethUtil.toBuffer(buffer);\n  var hex = buffer.toString('hex');\n  var trimmed = ethUtil.unpad(hex);\n  return ethUtil.addHexPrefix(trimmed);\n}\n\nfunction intToQuantityHex(n) {\n  assert(typeof n === 'number' && n === Math.floor(n), 'intToQuantityHex arg must be an integer');\n  var nHex = ethUtil.toBuffer(n).toString('hex');\n\n  if (nHex[0] === '0') {\n    nHex = nHex.substring(1);\n  }\n\n  return ethUtil.addHexPrefix(nHex);\n}\n\nfunction quantityHexToInt(prefixedQuantityHex) {\n  assert(typeof prefixedQuantityHex === 'string', 'arg to quantityHexToInt must be a string');\n  var quantityHex = ethUtil.stripHexPrefix(prefixedQuantityHex);\n  var isEven = quantityHex.length % 2 === 0;\n\n  if (!isEven) {\n    quantityHex = '0' + quantityHex;\n  }\n\n  var buf = new Buffer(quantityHex, 'hex');\n  return ethUtil.bufferToInt(buf);\n}\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(bufferToQuantityHex, \"bufferToQuantityHex\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/web3-provider-engine/dist/es5/util/rpc-hex-encoding.js\");\n  reactHotLoader.register(intToQuantityHex, \"intToQuantityHex\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/web3-provider-engine/dist/es5/util/rpc-hex-encoding.js\");\n  reactHotLoader.register(quantityHexToInt, \"quantityHexToInt\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/web3-provider-engine/dist/es5/util/rpc-hex-encoding.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":null,"metadata":{},"sourceType":"script"}