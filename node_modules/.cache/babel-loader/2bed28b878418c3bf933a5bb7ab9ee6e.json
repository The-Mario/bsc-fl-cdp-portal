{"ast":null,"code":"import _regeneratorRuntime from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport assert from 'assert';\nimport { ServiceRoles } from './constants';\nimport { stringToBytes } from './utils';\nimport { USDFL, ETH, WETH } from './index';\nimport * as math from './math';\n\nvar CdpType = /*#__PURE__*/function () {\n  function CdpType(cdpTypeService, _ref) {\n    var currency = _ref.currency,\n        ilk = _ref.ilk,\n        decimals = _ref.decimals;\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      prefetch: true\n    };\n\n    _classCallCheck(this, CdpType);\n\n    assert(currency && ilk, 'currency and ilk are required');\n    this._cdpTypeService = cdpTypeService;\n    this._systemData = cdpTypeService.get(ServiceRoles.SYSTEM_DATA);\n    this._web3Service = this._systemData.get('smartContract').get('web3');\n    this.currency = currency;\n    this.decimals = decimals || 18;\n    this.ilk = ilk;\n    this._ilkBytes = stringToBytes(this.ilk);\n    this.cache = {};\n    if (options.prefetch) this.prefetch();\n  }\n\n  _createClass(CdpType, [{\n    key: \"ilkInfo\",\n    value: function () {\n      var _ilkInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var contract,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                contract = _args.length > 0 && _args[0] !== undefined ? _args[0] : 'vat';\n                return _context.abrupt(\"return\", this._systemData[contract].ilks(this._ilkBytes));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function ilkInfo() {\n        return _ilkInfo.apply(this, arguments);\n      }\n\n      return ilkInfo;\n    }()\n  }, {\n    key: \"prefetch\",\n    value: function () {\n      var _prefetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this = this;\n\n        var adapterAddress, _ref2, symbol;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // TODO allow passing in a multicall instance to use that instead of making\n                // separate calls\n                if (!this._prefetchPromise) {\n                  adapterAddress = this._systemData.adapterAddress(this.ilk);\n                  _ref2 = this.currency === ETH ? WETH : this.currency, symbol = _ref2.symbol;\n                  this._prefetchPromise = Promise.all([this._systemData.get('token').getToken(symbol).balanceOf(adapterAddress).then(function (x) {\n                    return _this.cache.adapterBalance = x;\n                  }), this.ilkInfo().then(function (x) {\n                    return _this.cache.vatInfo = x;\n                  }), this.ilkInfo('cat').then(function (x) {\n                    return _this.cache.catInfo = x;\n                  }), this.ilkInfo('jug').then(function (x) {\n                    return _this.cache.jugInfo = x;\n                  }), this.ilkInfo('spot').then(function (x) {\n                    return _this.cache.spotInfo = x;\n                  }), this._systemData.spot.par().then(function (x) {\n                    return _this.cache.par = x;\n                  })]);\n                }\n\n                return _context2.abrupt(\"return\", this._prefetchPromise);\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function prefetch() {\n        return _prefetch.apply(this, arguments);\n      }\n\n      return prefetch;\n    }()\n  }, {\n    key: \"reset\",\n    value: function () {\n      var _reset = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this._prefetchPromise = null;\n                this.cache = {};\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function reset() {\n        return _reset.apply(this, arguments);\n      }\n\n      return reset;\n    }()\n  }, {\n    key: \"_getCached\",\n    value: function _getCached(name) {\n      assert(this.cache[name], \"\".concat(name, \" is not cached\"));\n      return this.cache[name];\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }, {\n    key: \"totalCollateral\",\n    get: function get() {\n      return this.currency(this._getCached('adapterBalance'));\n    }\n  }, {\n    key: \"totalDebt\",\n    get: function get() {\n      var _this$_getCached = this._getCached('vatInfo'),\n          Art = _this$_getCached.Art,\n          rate = _this$_getCached.rate;\n\n      return USDFL.wei(Art).times(rate).shiftedBy(-27);\n    }\n  }, {\n    key: \"debtCeiling\",\n    get: function get() {\n      return math.debtCeiling(this._getCached('vatInfo').line);\n    }\n  }, {\n    key: \"liquidationRatio\",\n    get: function get() {\n      return math.liquidationRatio(this._getCached('spotInfo').mat);\n    }\n  }, {\n    key: \"price\",\n    get: function get() {\n      return math.price(this.currency, this._getCached('par'), this._getCached('vatInfo').spot, this.liquidationRatio);\n    }\n  }, {\n    key: \"liquidationPenalty\",\n    get: function get() {\n      return math.liquidationPenalty(this._getCached('catInfo').chop);\n    }\n  }, {\n    key: \"annualStabilityFee\",\n    get: function get() {\n      return math.annualStabilityFee(this._getCached('jugInfo').duty);\n    }\n  }, {\n    key: \"_pipAddress\",\n    get: function get() {\n      var contract = 'PIP_' + this.currency.symbol;\n      return this._systemData.get('smartContract').getContractAddress(contract);\n    }\n  }]);\n\n  return CdpType;\n}();\n\nexport { CdpType as default };\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(CdpType, \"CdpType\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/CdpType.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/CdpType.js"],"names":["assert","ServiceRoles","stringToBytes","USDFL","ETH","WETH","math","CdpType","cdpTypeService","currency","ilk","decimals","options","prefetch","_cdpTypeService","_systemData","get","SYSTEM_DATA","_web3Service","_ilkBytes","cache","contract","ilks","_prefetchPromise","adapterAddress","symbol","Promise","all","getToken","balanceOf","then","x","adapterBalance","ilkInfo","vatInfo","catInfo","jugInfo","spotInfo","spot","par","name","_getCached","Art","rate","wei","times","shiftedBy","debtCeiling","line","liquidationRatio","mat","price","liquidationPenalty","chop","annualStabilityFee","duty","getContractAddress"],"mappings":"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","sourcesContent":["import assert from 'assert';\nimport { ServiceRoles } from './constants';\nimport { stringToBytes } from './utils';\nimport { USDFL, ETH, WETH } from './index';\nimport * as math from './math';\n\nexport default class CdpType {\n  constructor(\n    cdpTypeService,\n    { currency, ilk, decimals },\n    options = { prefetch: true }\n  ) {\n    assert(currency && ilk, 'currency and ilk are required');\n    this._cdpTypeService = cdpTypeService;\n    this._systemData = cdpTypeService.get(ServiceRoles.SYSTEM_DATA);\n    this._web3Service = this._systemData.get('smartContract').get('web3');\n    this.currency = currency;\n    this.decimals = decimals || 18;\n    this.ilk = ilk;\n    this._ilkBytes = stringToBytes(this.ilk);\n    this.cache = {};\n    if (options.prefetch) this.prefetch();\n  }\n\n  get totalCollateral() {\n    return this.currency(this._getCached('adapterBalance'));\n  }\n\n  get totalDebt() {\n    const { Art, rate } = this._getCached('vatInfo');\n    return USDFL.wei(Art)\n      .times(rate)\n      .shiftedBy(-27);\n  }\n\n  get debtCeiling() {\n    return math.debtCeiling(this._getCached('vatInfo').line);\n  }\n\n  get liquidationRatio() {\n    return math.liquidationRatio(this._getCached('spotInfo').mat);\n  }\n\n  get price() {\n    return math.price(\n      this.currency,\n      this._getCached('par'),\n      this._getCached('vatInfo').spot,\n      this.liquidationRatio\n    );\n  }\n\n  get liquidationPenalty() {\n    return math.liquidationPenalty(this._getCached('catInfo').chop);\n  }\n\n  get annualStabilityFee() {\n    return math.annualStabilityFee(this._getCached('jugInfo').duty);\n  }\n\n  async ilkInfo(contract = 'vat') {\n    return this._systemData[contract].ilks(this._ilkBytes);\n  }\n\n  get _pipAddress() {\n    const contract = 'PIP_' + this.currency.symbol;\n    return this._systemData.get('smartContract').getContractAddress(contract);\n  }\n\n  async prefetch() {\n    // TODO allow passing in a multicall instance to use that instead of making\n    // separate calls\n    if (!this._prefetchPromise) {\n      const adapterAddress = this._systemData.adapterAddress(this.ilk);\n      const { symbol } = this.currency === ETH ? WETH : this.currency;\n\n      this._prefetchPromise = Promise.all([\n        this._systemData\n          .get('token')\n          .getToken(symbol)\n          .balanceOf(adapterAddress)\n          .then(x => (this.cache.adapterBalance = x)),\n        this.ilkInfo().then(x => (this.cache.vatInfo = x)),\n        this.ilkInfo('cat').then(x => (this.cache.catInfo = x)),\n        this.ilkInfo('jug').then(x => (this.cache.jugInfo = x)),\n        this.ilkInfo('spot').then(x => (this.cache.spotInfo = x)),\n        this._systemData.spot.par().then(x => (this.cache.par = x))\n      ]);\n    }\n    return this._prefetchPromise;\n  }\n\n  async reset() {\n    this._prefetchPromise = null;\n    this.cache = {};\n  }\n\n  _getCached(name) {\n    assert(this.cache[name], `${name} is not cached`);\n    return this.cache[name];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}