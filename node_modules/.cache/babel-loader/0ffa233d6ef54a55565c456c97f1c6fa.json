{"ast":null,"code":"import _regeneratorRuntime from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport assert from 'assert';\nimport fetch from 'isomorphic-fetch';\nexport function getQueryResponse(_x, _x2, _x3) {\n  return _getQueryResponse.apply(this, arguments);\n}\n\nfunction _getQueryResponse() {\n  _getQueryResponse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(serverUrl, query, variables) {\n    var resp, _yield$resp$json, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(serverUrl, {\n              method: 'POST',\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                query: query,\n                variables: variables\n              })\n            });\n\n          case 2:\n            resp = _context.sent;\n            _context.next = 5;\n            return resp.json();\n\n          case 5:\n            _yield$resp$json = _context.sent;\n            data = _yield$resp$json.data;\n            assert(data, \"error fetching data from \".concat(serverUrl));\n            return _context.abrupt(\"return\", data);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getQueryResponse.apply(this, arguments);\n}\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(getQueryResponse, \"getQueryResponse\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/QueryApi.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/QueryApi.js"],"names":["assert","fetch","getQueryResponse","serverUrl","query","variables","method","headers","Accept","body","JSON","stringify","resp","json","data"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,gBAAsBC,gBAAtB;AAAA;AAAA;;;+EAAO,iBAAgCC,SAAhC,EAA2CC,KAA3C,EAAkDC,SAAlD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcJ,KAAK,CAACE,SAAD,EAAY;AAClCG,cAAAA,MAAM,EAAE,MAD0B;AAElCC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,MAAM,EAAE,kBADD;AAEP,gCAAgB;AAFT,eAFyB;AAMlCC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBP,gBAAAA,KAAK,EAALA,KADmB;AAEnBC,gBAAAA,SAAS,EAATA;AAFmB,eAAf;AAN4B,aAAZ,CADnB;;AAAA;AACCO,YAAAA,IADD;AAAA;AAAA,mBAakBA,IAAI,CAACC,IAAL,EAblB;;AAAA;AAAA;AAaGC,YAAAA,IAbH,oBAaGA,IAbH;AAcLd,YAAAA,MAAM,CAACc,IAAD,qCAAmCX,SAAnC,EAAN;AAdK,6CAeEW,IAfF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;;;;;;;;;;0BAAeZ,gB","sourcesContent":["import assert from 'assert';\nimport fetch from 'isomorphic-fetch';\n\nexport async function getQueryResponse(serverUrl, query, variables) {\n  const resp = await fetch(serverUrl, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  });\n\n  const { data } = await resp.json();\n  assert(data, `error fetching data from ${serverUrl}`);\n  return data;\n}\n"]},"metadata":{},"sourceType":"module"}