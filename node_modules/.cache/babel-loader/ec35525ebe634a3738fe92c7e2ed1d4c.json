{"ast":null,"code":"(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nexport var tag = function tag(strings) {\n  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    keys[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      values[_key2] = arguments[_key2];\n    }\n\n    var dict = values[values.length - 1] || {};\n    var result = [strings[0]];\n    keys.forEach(function (key, i) {\n      return result.push(Number.isInteger(key) ? values[key] : dict[key], strings[i + 1]);\n    });\n    return result.join('');\n  };\n};\nexport var validateAddress = function validateAddress() {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  return function (address) {\n    return (!/^0x[0-9a-fA-F]{40}$/.test(address) || address === '0x0000000000000000000000000000000000000000') && tag.apply(void 0, args)({\n      address: address === null ? '(null)' : address\n    });\n  };\n};\nexport var validateVaultId = function validateVaultId(id) {\n  return !/^\\d+$/.test(id) && \"Invalid vault id: must be a positive integer. Received \".concat(id);\n};\nexport var validateVaultTypeResult = function validateVaultTypeResult(vaultType) {\n  return !vaultType && 'Vault does not exist';\n};\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(tag, \"tag\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/schemas/_validators.js\");\n  reactHotLoader.register(validateAddress, \"validateAddress\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/schemas/_validators.js\");\n  reactHotLoader.register(validateVaultId, \"validateVaultId\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/schemas/_validators.js\");\n  reactHotLoader.register(validateVaultTypeResult, \"validateVaultTypeResult\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/schemas/_validators.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai-plugin-mcd/src/schemas/_validators.js"],"names":["tag","strings","keys","values","dict","length","result","forEach","key","i","push","Number","isInteger","join","validateAddress","args","address","test","validateVaultId","id","validateVaultTypeResult","vaultType"],"mappings":";;;;;;;;;AAAA,OAAO,IAAMA,GAAG,GAAG,SAANA,GAAM,CAACC,OAAD;AAAA,oCAAaC,IAAb;AAAaA,IAAAA,IAAb;AAAA;;AAAA,SAAsB,YAAe;AAAA,uCAAXC,MAAW;AAAXA,MAAAA,MAAW;AAAA;;AACtD,QAAMC,IAAI,GAAGD,MAAM,CAACA,MAAM,CAACE,MAAP,GAAgB,CAAjB,CAAN,IAA6B,EAA1C;AACA,QAAMC,MAAM,GAAG,CAACL,OAAO,CAAC,CAAD,CAAR,CAAf;AACAC,IAAAA,IAAI,CAACK,OAAL,CAAa,UAACC,GAAD,EAAMC,CAAN;AAAA,aACXH,MAAM,CAACI,IAAP,CAAYC,MAAM,CAACC,SAAP,CAAiBJ,GAAjB,IAAwBL,MAAM,CAACK,GAAD,CAA9B,GAAsCJ,IAAI,CAACI,GAAD,CAAtD,EAA6DP,OAAO,CAACQ,CAAC,GAAG,CAAL,CAApE,CADW;AAAA,KAAb;AAGA,WAAOH,MAAM,CAACO,IAAP,CAAY,EAAZ,CAAP;AACD,GAPkB;AAAA,CAAZ;AASP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,qCAAIC,IAAJ;AAAIA,IAAAA,IAAJ;AAAA;;AAAA,SAAa,UAAAC,OAAO;AAAA,WACjD,CAAC,CAAC,sBAAsBC,IAAtB,CAA2BD,OAA3B,CAAD,IACCA,OAAO,KAAK,4CADd,KAEAhB,GAAG,MAAH,SAAOe,IAAP,EAAa;AAAEC,MAAAA,OAAO,EAAEA,OAAO,KAAK,IAAZ,GAAmB,QAAnB,GAA8BA;AAAzC,KAAb,CAHiD;AAAA,GAApB;AAAA,CAAxB;AAKP,OAAO,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,EAAE;AAAA,SAC/B,CAAC,QAAQF,IAAR,CAAaE,EAAb,CAAD,qEAC0DA,EAD1D,CAD+B;AAAA,CAA1B;AAIP,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAC,SAAS;AAAA,SAC9C,CAACA,SAAD,IAAc,sBADgC;AAAA,CAAzC;;;;;;;;;;0BAlBMrB,G;0BASAc,e;0BAKAI,e;0BAIAE,uB","sourcesContent":["export const tag = (strings, ...keys) => (...values) => {\n  const dict = values[values.length - 1] || {};\n  const result = [strings[0]];\n  keys.forEach((key, i) =>\n    result.push(Number.isInteger(key) ? values[key] : dict[key], strings[i + 1])\n  );\n  return result.join('');\n};\n\nexport const validateAddress = (...args) => address =>\n  (!/^0x[0-9a-fA-F]{40}$/.test(address) ||\n    address === '0x0000000000000000000000000000000000000000') &&\n  tag(...args)({ address: address === null ? '(null)' : address });\n\nexport const validateVaultId = id =>\n  !/^\\d+$/.test(id) &&\n  `Invalid vault id: must be a positive integer. Received ${id}`;\n\nexport const validateVaultTypeResult = vaultType =>\n  !vaultType && 'Vault does not exist';\n"]},"metadata":{},"sourceType":"module"}