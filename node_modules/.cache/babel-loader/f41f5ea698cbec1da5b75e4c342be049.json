{"ast":null,"code":"import _regeneratorRuntime from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { useState } from 'react';\nimport useMaker from 'hooks/useMaker';\nimport useActionState from 'hooks/useActionState';\nimport { watch } from 'hooks/useObservable';\nimport BigNumber from 'bignumber.js';\nexport default function useTokenAllowance(tokenSymbol) {\n  var _useMaker = useMaker(),\n      maker = _useMaker.maker,\n      account = _useMaker.account;\n\n  var proxyAddress = watch.proxyAddress(account === null || account === void 0 ? void 0 : account.address);\n  var allowance = watch.tokenAllowance(account === null || account === void 0 ? void 0 : account.address, proxyAddress || undefined, tokenSymbol);\n  var hasFetchedAllowance = proxyAddress === null || allowance !== undefined;\n  var hasAllowance = tokenSymbol === 'ETH' || allowance !== undefined && allowance !== null && !allowance.eq(0);\n\n  var hasSufficientAllowance = function hasSufficientAllowance(value) {\n    return BigNumber(value).isLessThanOrEqualTo(allowance);\n  };\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      startedWithoutAllowance = _useState2[0],\n      setStartedWithoutAllowance = _useState2[1];\n\n  var _useActionState = useActionState( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var token, txPromise;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            token = maker.getToken(tokenSymbol);\n            txPromise = token.approveUnlimited(proxyAddress);\n            setStartedWithoutAllowance(true);\n            _context.next = 5;\n            return txPromise;\n\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }))),\n      _useActionState2 = _slicedToArray(_useActionState, 4),\n      setAllowance = _useActionState2[0],\n      allowanceLoading = _useActionState2[1],\n      allowanceErrors = _useActionState2[3];\n\n  return {\n    hasAllowance: hasAllowance,\n    hasFetchedAllowance: hasFetchedAllowance,\n    setAllowance: setAllowance,\n    allowanceLoading: allowanceLoading,\n    allowanceErrors: allowanceErrors,\n    startedWithoutAllowance: startedWithoutAllowance,\n    allowance: allowance,\n    hasSufficientAllowance: hasSufficientAllowance\n  };\n}\n\n__signature__(useTokenAllowance, \"useMaker{{ maker, account }}\\nuseState{[startedWithoutAllowance, setStartedWithoutAllowance](false)}\\nuseActionState{[setAllowance, allowanceLoading, , allowanceErrors]}\", function () {\n  return [useMaker, useActionState];\n});\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(useTokenAllowance, \"useTokenAllowance\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useTokenAllowance.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useTokenAllowance.js"],"names":["useState","useMaker","useActionState","watch","BigNumber","useTokenAllowance","tokenSymbol","maker","account","proxyAddress","address","allowance","tokenAllowance","undefined","hasFetchedAllowance","hasAllowance","eq","hasSufficientAllowance","value","isLessThanOrEqualTo","startedWithoutAllowance","setStartedWithoutAllowance","token","getToken","txPromise","approveUnlimited","setAllowance","allowanceLoading","allowanceErrors"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,eAAe,SAASC,iBAAT,CAA2BC,WAA3B,EAAwC;AAAA,kBAC1BL,QAAQ,EADkB;AAAA,MAC7CM,KAD6C,aAC7CA,KAD6C;AAAA,MACtCC,OADsC,aACtCA,OADsC;;AAGrD,MAAMC,YAAY,GAAGN,KAAK,CAACM,YAAN,CAAmBD,OAAnB,aAAmBA,OAAnB,uBAAmBA,OAAO,CAAEE,OAA5B,CAArB;AACA,MAAMC,SAAS,GAAGR,KAAK,CAACS,cAAN,CAChBJ,OADgB,aAChBA,OADgB,uBAChBA,OAAO,CAAEE,OADO,EAEhBD,YAAY,IAAII,SAFA,EAGhBP,WAHgB,CAAlB;AAMA,MAAMQ,mBAAmB,GAAGL,YAAY,KAAK,IAAjB,IAAyBE,SAAS,KAAKE,SAAnE;AACA,MAAME,YAAY,GAChBT,WAAW,KAAK,KAAhB,IACCK,SAAS,KAAKE,SAAd,IAA2BF,SAAS,KAAK,IAAzC,IAAiD,CAACA,SAAS,CAACK,EAAV,CAAa,CAAb,CAFrD;;AAIA,MAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAAC,KAAK;AAAA,WAClCd,SAAS,CAACc,KAAD,CAAT,CAAiBC,mBAAjB,CAAqCR,SAArC,CADkC;AAAA,GAApC;;AAfqD,kBAkBSX,QAAQ,CAAC,KAAD,CAlBjB;AAAA;AAAA,MAkB9CoB,uBAlB8C;AAAA,MAkBrBC,0BAlBqB;;AAAA,wBAmBOnB,cAAc,wEACxE;AAAA;AAAA;AAAA;AAAA;AAAA;AACQoB,YAAAA,KADR,GACgBf,KAAK,CAACgB,QAAN,CAAejB,WAAf,CADhB;AAEQkB,YAAAA,SAFR,GAEoBF,KAAK,CAACG,gBAAN,CAAuBhB,YAAvB,CAFpB;AAGEY,YAAAA,0BAA0B,CAAC,IAAD,CAA1B;AAHF;AAAA,mBAIeG,SAJf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADwE,GAnBrB;AAAA;AAAA,MAmB9CE,YAnB8C;AAAA,MAmBhCC,gBAnBgC;AAAA,MAmBZC,eAnBY;;AA4BrD,SAAO;AACLb,IAAAA,YAAY,EAAZA,YADK;AAELD,IAAAA,mBAAmB,EAAnBA,mBAFK;AAGLY,IAAAA,YAAY,EAAZA,YAHK;AAILC,IAAAA,gBAAgB,EAAhBA,gBAJK;AAKLC,IAAAA,eAAe,EAAfA,eALK;AAMLR,IAAAA,uBAAuB,EAAvBA,uBANK;AAOLT,IAAAA,SAAS,EAATA,SAPK;AAQLM,IAAAA,sBAAsB,EAAtBA;AARK,GAAP;AAUD;;cAtCuBZ,iB;UACKJ,Q,EAkBiCC,c;;;;;;;;;;;;0BAnBtCG,iB","sourcesContent":["import { useState } from 'react';\nimport useMaker from 'hooks/useMaker';\nimport useActionState from 'hooks/useActionState';\nimport { watch } from 'hooks/useObservable';\nimport BigNumber from 'bignumber.js';\n\nexport default function useTokenAllowance(tokenSymbol) {\n  const { maker, account } = useMaker();\n\n  const proxyAddress = watch.proxyAddress(account?.address);\n  const allowance = watch.tokenAllowance(\n    account?.address,\n    proxyAddress || undefined,\n    tokenSymbol\n  );\n\n  const hasFetchedAllowance = proxyAddress === null || allowance !== undefined;\n  const hasAllowance =\n    tokenSymbol === 'ETH' ||\n    (allowance !== undefined && allowance !== null && !allowance.eq(0));\n\n  const hasSufficientAllowance = value =>\n    BigNumber(value).isLessThanOrEqualTo(allowance);\n\n  const [startedWithoutAllowance, setStartedWithoutAllowance] = useState(false);\n  const [setAllowance, allowanceLoading, , allowanceErrors] = useActionState(\n    async () => {\n      const token = maker.getToken(tokenSymbol);\n      const txPromise = token.approveUnlimited(proxyAddress);\n      setStartedWithoutAllowance(true);\n      return await txPromise;\n    }\n  );\n\n  return {\n    hasAllowance,\n    hasFetchedAllowance,\n    setAllowance,\n    allowanceLoading,\n    allowanceErrors,\n    startedWithoutAllowance,\n    allowance,\n    hasSufficientAllowance\n  };\n}\n"]},"metadata":{},"sourceType":"module"}