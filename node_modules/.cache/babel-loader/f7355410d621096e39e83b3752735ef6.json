{"ast":null,"code":"import _objectSpread from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _createForOfIteratorHelper from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport test from './presets/test.json';\nimport kovan from './presets/kovan.json';\nimport http from './presets/http.json';\nimport ws from './presets/ws.json';\nimport mainnet from './presets/mainnet.json';\nimport browser from './presets/browser.json';\nimport inject from './presets/inject.json';\nimport intersection from 'lodash/intersection';\nimport merge from 'lodash/merge';\nimport { mergeServiceConfig } from './index';\nimport { AccountType } from '../utils/constants';\n\nvar ConfigPresetNotFoundError = /*#__PURE__*/function (_Error) {\n  _inherits(ConfigPresetNotFoundError, _Error);\n\n  var _super = _createSuper(ConfigPresetNotFoundError);\n\n  function ConfigPresetNotFoundError(message) {\n    _classCallCheck(this, ConfigPresetNotFoundError);\n\n    return _super.call(this, 'Cannot find configuration preset with name: ' + message);\n  }\n\n  _createClass(ConfigPresetNotFoundError, [{\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return ConfigPresetNotFoundError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar serviceRoles = ['accounts', 'allowance', 'gas', 'multicall', 'nonce', 'proxy', 'smartContract', 'timer', 'token', 'transactionManager', 'web3'];\n\nfunction loadPreset(name) {\n  if (typeof name == 'object') {\n    return name; // for testing\n  }\n\n  var preset;\n\n  switch (name) {\n    case 'test':\n      preset = test;\n      break;\n\n    case 'http':\n      preset = http;\n      break;\n\n    case 'ws':\n    case 'websocket':\n      preset = ws;\n      break;\n\n    case 'kovan':\n      preset = kovan;\n      break;\n\n    case 'mainnet':\n      preset = mainnet;\n      break;\n\n    case 'browser':\n      preset = browser;\n      break;\n\n    case 'inject':\n      preset = inject;\n      break;\n\n    default:\n      throw new ConfigPresetNotFoundError(name);\n  } // make a copy so we don't overwrite the original values\n\n\n  return merge({}, preset);\n}\n\nvar reservedWords = ['accounts', 'overrideMetamask', 'plugins', 'privateKey', 'provider', 'url'];\n\nfunction checkForReservedWords(words) {\n  var usedReservedWords = intersection(words, reservedWords);\n\n  if (usedReservedWords.length > 0) {\n    throw new Error('The following words cannot be used as service role names: ' + usedReservedWords.join(', '));\n  }\n}\n\nvar ConfigFactory = /*#__PURE__*/function () {\n  function ConfigFactory() {\n    _classCallCheck(this, ConfigFactory);\n  }\n\n  _createClass(ConfigFactory, null, [{\n    key: \"create\",\n\n    /**\n     * @param {string} preset\n     * @param {object} options\n     */\n    value: function create(preset) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var resolver = arguments.length > 2 ? arguments[2] : undefined;\n\n      if (typeof preset !== 'string') {\n        options = preset;\n        preset = options.preset;\n      }\n\n      var config = loadPreset(preset);\n      var additionalServices = options.additionalServices || [];\n      checkForReservedWords(additionalServices);\n\n      var _iterator = _createForOfIteratorHelper(serviceRoles.concat(additionalServices)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var role = _step.value;\n          if (!(role in options)) continue;\n\n          if (!(role in config)) {\n            config[role] = options[role];\n            continue;\n          }\n\n          config[role] = mergeServiceConfig(role, config[role], options[role], resolver);\n        } // web3-specific convenience options\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (config.web3) {\n        var web3Settings = config.web3[1] || config.web3;\n        if (!web3Settings.provider) web3Settings.provider = {};\n\n        if (options.url) {\n          web3Settings.provider.url = options.url;\n        }\n\n        if (options.provider) {\n          merge(web3Settings.provider, options.provider);\n        }\n      } // accounts-specific convenience option\n\n\n      if (options.privateKey) {\n        config.accounts = _objectSpread({}, config.accounts, {\n          default: {\n            type: AccountType.PRIVATE_KEY,\n            key: options.privateKey\n          }\n        });\n      }\n\n      return config;\n    }\n  }]);\n\n  return ConfigFactory;\n}();\n\nexport { ConfigFactory as default };\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(ConfigPresetNotFoundError, \"ConfigPresetNotFoundError\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/config/ConfigFactory.js\");\n  reactHotLoader.register(serviceRoles, \"serviceRoles\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/config/ConfigFactory.js\");\n  reactHotLoader.register(loadPreset, \"loadPreset\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/config/ConfigFactory.js\");\n  reactHotLoader.register(reservedWords, \"reservedWords\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/config/ConfigFactory.js\");\n  reactHotLoader.register(checkForReservedWords, \"checkForReservedWords\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/config/ConfigFactory.js\");\n  reactHotLoader.register(ConfigFactory, \"ConfigFactory\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/config/ConfigFactory.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/libs/dai/src/config/ConfigFactory.js"],"names":["test","kovan","http","ws","mainnet","browser","inject","intersection","merge","mergeServiceConfig","AccountType","ConfigPresetNotFoundError","message","Error","serviceRoles","loadPreset","name","preset","reservedWords","checkForReservedWords","words","usedReservedWords","length","join","ConfigFactory","options","resolver","config","additionalServices","concat","role","web3","web3Settings","provider","url","privateKey","accounts","default","type","PRIVATE_KEY","key"],"mappings":"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","sourcesContent":["import test from './presets/test.json';\nimport kovan from './presets/kovan.json';\nimport http from './presets/http.json';\nimport ws from './presets/ws.json';\nimport mainnet from './presets/mainnet.json';\nimport browser from './presets/browser.json';\nimport inject from './presets/inject.json';\nimport intersection from 'lodash/intersection';\nimport merge from 'lodash/merge';\nimport { mergeServiceConfig } from './index';\nimport { AccountType } from '../utils/constants';\n\nclass ConfigPresetNotFoundError extends Error {\n  constructor(message) {\n    super('Cannot find configuration preset with name: ' + message);\n  }\n}\n\nconst serviceRoles = [\n  'accounts',\n  'allowance',\n  'gas',\n  'multicall',\n  'nonce',\n  'proxy',\n  'smartContract',\n  'timer',\n  'token',\n  'transactionManager',\n  'web3'\n];\n\nfunction loadPreset(name) {\n  if (typeof name == 'object') {\n    return name; // for testing\n  }\n\n  let preset;\n  switch (name) {\n    case 'test':\n      preset = test;\n      break;\n    case 'http':\n      preset = http;\n      break;\n    case 'ws':\n    case 'websocket':\n      preset = ws;\n      break;\n    case 'kovan':\n      preset = kovan;\n      break;\n    case 'mainnet':\n      preset = mainnet;\n      break;\n    case 'browser':\n      preset = browser;\n      break;\n    case 'inject':\n      preset = inject;\n      break;\n    default:\n      throw new ConfigPresetNotFoundError(name);\n  }\n  // make a copy so we don't overwrite the original values\n  return merge({}, preset);\n}\n\nconst reservedWords = [\n  'accounts',\n  'overrideMetamask',\n  'plugins',\n  'privateKey',\n  'provider',\n  'url'\n];\n\nfunction checkForReservedWords(words) {\n  const usedReservedWords = intersection(words, reservedWords);\n  if (usedReservedWords.length > 0) {\n    throw new Error(\n      'The following words cannot be used as service role names: ' +\n        usedReservedWords.join(', ')\n    );\n  }\n}\n\nexport default class ConfigFactory {\n  /**\n   * @param {string} preset\n   * @param {object} options\n   */\n  static create(preset, options = {}, resolver) {\n    if (typeof preset !== 'string') {\n      options = preset;\n      preset = options.preset;\n    }\n\n    const config = loadPreset(preset);\n    const additionalServices = options.additionalServices || [];\n    checkForReservedWords(additionalServices);\n\n    for (let role of serviceRoles.concat(additionalServices)) {\n      if (!(role in options)) continue;\n      if (!(role in config)) {\n        config[role] = options[role];\n        continue;\n      }\n      config[role] = mergeServiceConfig(\n        role,\n        config[role],\n        options[role],\n        resolver\n      );\n    }\n\n    // web3-specific convenience options\n    if (config.web3) {\n      const web3Settings = config.web3[1] || config.web3;\n      if (!web3Settings.provider) web3Settings.provider = {};\n\n      if (options.url) {\n        web3Settings.provider.url = options.url;\n      }\n\n      if (options.provider) {\n        merge(web3Settings.provider, options.provider);\n      }\n    }\n\n    // accounts-specific convenience option\n    if (options.privateKey) {\n      config.accounts = {\n        ...config.accounts,\n        default: { type: AccountType.PRIVATE_KEY, key: options.privateKey }\n      };\n    }\n\n    return config;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}