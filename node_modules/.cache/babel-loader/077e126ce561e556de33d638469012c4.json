{"ast":null,"code":"import _regeneratorRuntime from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { useEffect, useState } from 'react';\nimport useMaker from 'hooks/useMaker';\nimport debug from 'debug';\nvar log = debug('maker:useEventHistory');\nexport default function useEventHistory(id) {\n  var _useMaker = useMaker(),\n      maker = _useMaker.maker,\n      txLastUpdate = _useMaker.txLastUpdate;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      events = _useState2[0],\n      setEvents = _useState2[1];\n\n  var isCancelled = false;\n  useEffect(function () {\n    if (!maker) return;\n\n    function getHistory() {\n      return _getHistory.apply(this, arguments);\n    }\n\n    function _getHistory() {\n      _getHistory = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var cdp, nextEvents;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                log(\"Getting event history for vault #\".concat(id, \"...\"));\n                _context.next = 3;\n                return maker.service('mcd:cdpManager').getCdp(id, {\n                  prefetch: false\n                });\n\n              case 3:\n                cdp = _context.sent;\n\n                if (!isCancelled) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 6:\n                _context.next = 8;\n                return maker.service('mcd:cdpManager').getEventHistory(cdp);\n\n              case 8:\n                nextEvents = _context.sent;\n\n                if (!isCancelled) {\n                  _context.next = 11;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 11:\n                log('Got events for #' + id, nextEvents);\n                if (events === null) setEvents(nextEvents);else if (events.length < nextEvents.length) {\n                  setEvents(null);\n                  setEvents(nextEvents);\n                }\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _getHistory.apply(this, arguments);\n    }\n\n    getHistory(); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n    return function () {\n      return isCancelled = true;\n    };\n  }, [maker, id, txLastUpdate === null || txLastUpdate === void 0 ? void 0 : txLastUpdate[id]]);\n  return events;\n}\n\n__signature__(useEventHistory, \"useMaker{{ maker, txLastUpdate }}\\nuseState{[events, setEvents](null)}\\nuseEffect{}\", function () {\n  return [useMaker];\n});\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(log, \"log\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useEventHistory.js\");\n  reactHotLoader.register(useEventHistory, \"useEventHistory\", \"/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useEventHistory.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/good/Documents/Good/GitHub/FL/fork/bsc-fl-cdp-portal/src/hooks/useEventHistory.js"],"names":["useEffect","useState","useMaker","debug","log","useEventHistory","id","maker","txLastUpdate","events","setEvents","isCancelled","getHistory","service","getCdp","prefetch","cdp","getEventHistory","nextEvents","length"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,IAAMC,GAAG,GAAGD,KAAK,CAAC,uBAAD,CAAjB;AAEA,eAAe,SAASE,eAAT,CAAyBC,EAAzB,EAA6B;AAAA,kBACVJ,QAAQ,EADE;AAAA,MAClCK,KADkC,aAClCA,KADkC;AAAA,MAC3BC,YAD2B,aAC3BA,YAD2B;;AAAA,kBAEdP,QAAQ,CAAC,IAAD,CAFM;AAAA;AAAA,MAEnCQ,MAFmC;AAAA,MAE3BC,SAF2B;;AAG1C,MAAIC,WAAW,GAAG,KAAlB;AAEAX,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACO,KAAL,EAAY;;AADE,aAECK,UAFD;AAAA;AAAA;;AAAA;AAAA,6EAEd;AAAA;AAAA;AAAA;AAAA;AAAA;AACER,gBAAAA,GAAG,4CAAqCE,EAArC,SAAH;AADF;AAAA,uBAEoBC,KAAK,CACpBM,OADe,CACP,gBADO,EAEfC,MAFe,CAERR,EAFQ,EAEJ;AAAES,kBAAAA,QAAQ,EAAE;AAAZ,iBAFI,CAFpB;;AAAA;AAEQC,gBAAAA,GAFR;;AAAA,qBAKML,WALN;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,uBAM2BJ,KAAK,CAC3BM,OADsB,CACd,gBADc,EAEtBI,eAFsB,CAEND,GAFM,CAN3B;;AAAA;AAMQE,gBAAAA,UANR;;AAAA,qBASMP,WATN;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAUEP,gBAAAA,GAAG,CAAC,qBAAqBE,EAAtB,EAA0BY,UAA1B,CAAH;AACA,oBAAIT,MAAM,KAAK,IAAf,EAAqBC,SAAS,CAACQ,UAAD,CAAT,CAArB,KACK,IAAIT,MAAM,CAACU,MAAP,GAAgBD,UAAU,CAACC,MAA/B,EAAuC;AAC1CT,kBAAAA,SAAS,CAAC,IAAD,CAAT;AACAA,kBAAAA,SAAS,CAACQ,UAAD,CAAT;AACD;;AAfH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFc;AAAA;AAAA;;AAmBdN,IAAAA,UAAU,GAnBI,CAoBd;;AACA,WAAO;AAAA,aAAOD,WAAW,GAAG,IAArB;AAAA,KAAP;AACD,GAtBQ,EAsBN,CAACJ,KAAD,EAAQD,EAAR,EAAYE,YAAZ,aAAYA,YAAZ,uBAAYA,YAAY,CAAGF,EAAH,CAAxB,CAtBM,CAAT;AAuBA,SAAOG,MAAP;AACD;;cA7BuBJ,e;UACUH,Q;;;;;;;;;;;;0BAH5BE,G;0BAEkBC,e","sourcesContent":["import { useEffect, useState } from 'react';\nimport useMaker from 'hooks/useMaker';\nimport debug from 'debug';\nconst log = debug('maker:useEventHistory');\n\nexport default function useEventHistory(id) {\n  const { maker, txLastUpdate } = useMaker();\n  const [events, setEvents] = useState(null);\n  let isCancelled = false;\n\n  useEffect(() => {\n    if (!maker) return;\n    async function getHistory() {\n      log(`Getting event history for vault #${id}...`);\n      const cdp = await maker\n        .service('mcd:cdpManager')\n        .getCdp(id, { prefetch: false });\n      if (isCancelled) return;\n      const nextEvents = await maker\n        .service('mcd:cdpManager')\n        .getEventHistory(cdp);\n      if (isCancelled) return;\n      log('Got events for #' + id, nextEvents);\n      if (events === null) setEvents(nextEvents);\n      else if (events.length < nextEvents.length) {\n        setEvents(null);\n        setEvents(nextEvents);\n      }\n    }\n    getHistory();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    return () => (isCancelled = true);\n  }, [maker, id, txLastUpdate?.[id]]);\n  return events;\n}\n"]},"metadata":{},"sourceType":"module"}